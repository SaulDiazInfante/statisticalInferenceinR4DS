[
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#letters-of-the-genetic-code",
    "href": "_reshaping_data_with_tidyr_03.html#letters-of-the-genetic-code",
    "title": "3  Expanding Data",
    "section": "3.1 Letters of the genetic code",
    "text": "3.1 Letters of the genetic code\nThe basic building blocks of RNA are four molecules described by a single letter each: adenine (A), cytosine (C), guanine (G), and uracil (U). The information carried by an RNA strand can be represented as a long sequence of these four letters. To read this code, one has to divide this chain into sequences of three letters each (e.g.** GCU, ACG**, …). These three letter sequences are known as codons. The concept is illustrated in the image below.\n\n\n\n\n\nHelix rna model\n\n\n\nInstructions 100 XP\n\nCreate a tibble with three columns called letter1, letter2, and letter3 that holds all possible combinations of the vector letters using expand_grid().\nUse the unite() function from chapter one to merge these three columns into a single column named codon. Use an empty string as the separator.\n\n\n\nex_019.R\n\nletters <- c(\"A\", \"C\", \"G\", \"U\")\n# Create a tibble with all possible 3 way combinations\ncodon_df <- expand_grid(\n    leter1 = letters,\n    leter2 = letters,\n    leter3 = letters\n)\ncodon_df\n\nletters <- c(\"A\", \"C\", \"G\", \"U\")\n# Create a tibble with all possible 3 way combinations\ncodon_df <- expand_grid(\n  letter1 = letters,\n  letter2 = letters,\n  letter3 = letters\n)\n#\ncodon_df %>% \n  # Unite these three columns into a \"codon\" column\n  unite(\"codon\",  c(letter1, letter2, letter3),\n    sep = ''\n  )"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#when-did-humans-replace-dogs-in-space",
    "href": "_reshaping_data_with_tidyr_03.html#when-did-humans-replace-dogs-in-space",
    "title": "3  Expanding Data",
    "section": "3.2 When did humans replace dogs in space",
    "text": "3.2 When did humans replace dogs in space\nYou already know that in the early days of spaceflight, the USSR was testing rockets with dogs. You now wonder when exactly humans started replacing dogs on space flight missions. You’ve been given a dataset space_df with the number of both dogs (compiled by Duncan Geere) and humans in space per year from 1951 till 1970 (collected from Wikipedia).\nYour goal is to create a plot that shows you the number of individuals sent into space per species. Before you can create this plot, you’ll first have to introduce zero values for missing combinations of year and species.\nLoad dplyr and ggplot2 packages.\n\nInstructions 100 XP\n\nCreate full_df, a tibble with all unique combinations of the variables year (from 1951 to 1970) and species (\"Human\" and \"Dog\").\nPerform a right_join() between space_df and full_df on the year and species columns.\nUse the ggplot() function to create a line plot of n_in_space over year, colored by species.\nUse the replace_na() function to overwrite NA values in the n_in_space column with zeros.\n\n\n\nex_020.R\n\n# Create a tibble with all combinations of years and species\nfull_df <- expand_grid(\n  year = 1951:1970, \n  species = c(\"Human\", \"Dog\")\n)\n\nspace_df %>% \n  # Join with full_df so that missing values are introduced\n  right_join(full_df, by = c(\"year\", \"species\")) %>% \n  # Create a line plot with n_in_space over year, color by species\n  ggplot(\n    aes(\n      x = n_in_space,\n      y = year,\n      group = species,\n      color = species\n    )\n  ) +\n  geom_line()\n# Create a tibble with all combinations of years and species\nfull_df <- expand_grid(\n  year = 1951:1970, \n  species = c(\"Human\", \"Dog\")\n)\n\nspace_df %>% \n  # Join with full_df so that missing values are introduced\n  right_join(full_df, by = c(\"year\", \"species\")) %>% \n  # Overwrite NA values for n_in_space with 0L\n  replace_na(list(n_in_space = 0L)) %>% \n  # Create a line plot with n_in_space over year, color by species\n  ggplot(aes(x = year, y = n_in_space, color = species)) +\n  geom_line()"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#finding-missing-observations",
    "href": "_reshaping_data_with_tidyr_03.html#finding-missing-observations",
    "title": "3  Expanding Data",
    "section": "3.3 Finding missing observations",
    "text": "3.3 Finding missing observations\nYou’re an inspector at a nuclear plant and have to validate whether every reactor has received its daily safety check over the course of a full year. The safety check logs are in reactor_df, a data frame with columns date, reactor, and check.\nTwo vectors, dates and reactors, with all dates of the year and reactors at the plant respectively have been created for you. You’ll use the combination of the expand_grid() and anti_join() functions to find dates where particular reactors were not checked.\nLoad dplyr package.\n\nInstructions 100 XP\n\nUse the expand_grid() function to create a tibble holding all combinations of the variables date and reactor. Use the dates and reactors vectors created for you.\nPerform an anti-join between full_df and reactor_df on the date and reactor columns.\n\n\n\nex_021.R\n\n# Create a tibble with all combinations of dates and reactors\nfull_df <- expand_grid(\n  date = dates, \n  reactor = reactors\n)\n\n# Find the reactor - date combinations not present in reactor_df\nfull_df %>% \n  anti_join(reactor_df, by=c(\"date\", \"reactor\"))"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#completing-the-solar-system",
    "href": "_reshaping_data_with_tidyr_03.html#completing-the-solar-system",
    "title": "3  Expanding Data",
    "section": "3.4 Completing the Solar System",
    "text": "3.4 Completing the Solar System\nYou have been given a data frame (planet_df) from the devstronomy project with the number of moons per planet in our Solar System. However, Mercury and Venus, the two moonless planets, are absent. You want to expand this dataset using the complete() function and a vector planets that contains all eight planet’s names.\n\nInstructions 100 XP\n\nComplete the planet variable using the planets vector.\nReplace NA values in the n_moons variable with 0L values.\n\n\n\nex_022.R\n\nplanets = c(\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n)\n\nplanet_df %>% \n  complete(\n    # Complete the planet variable\n    planet =  planets,\n    # Overwrite NA values for n_moons with 0L\n    fill= list(n_moons = 0L)\n  )"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#zero-olymoic-medals",
    "href": "_reshaping_data_with_tidyr_03.html#zero-olymoic-medals",
    "title": "3  Expanding Data",
    "section": "3.5 Zero Olymoic medals",
    "text": "3.5 Zero Olymoic medals\nSince 1896, athletes from all over the world have been competing in the modern Olympic games. You’ve been given a dataset (medal_df) with observations for all medals won by athletes from the 10 most successful countries in Olympic history. You want to create a visual with the number of medals won per country (team) per year. However, since not all countries won medals each year, you’ll have to introduce zero values before you can make an accurate visual.\n Load ggplot2 and dplyr. In step 2 and 3 the scale_color_brewer() function is used to color lines in the plot with a palette that makes it easier to distinguish the different countries.\n\nInstructions 100 XP\n\nCount the number of medals won per team and year.\nUse ggplot() to create a line plot with n_medals over year, colored by team.\nComplete the team and year variables, replace NA values in the n_medals column with zeros.\n\n\n\nex_023.R\n\nmedal_df %>% \n  # Count the medals won per team and year\n  count(team, year, name = \"n_medals\")\nmedal_df %>% \n  # Count the medals won per team and year\n  count(team, year, name = \"n_medals\") %>% \n  # Plot n_medals over year, colored by team\n  ggplot(\n    aes(\n      x = year,\n      y = n_medals,\n      group = team,\n      color = team\n    )\n  ) +\n  geom_line() +\n  scale_color_brewer(palette = \"Paired\")\n\nmedal_df %>% \n  # Count the medals won per team and year\n  count(team, year, name = \"n_medals\") %>% \n  # Complete the team and year variables, fill n_medals with zeros\n  complete(\n    team,\n    year,\n    fill = list(n_medals = 0)\n  ) %>% \n  # Plot n_medals over year, colored by team\n  ggplot(aes(x = year, y = n_medals, color = team)) +\n  geom_line() +\n  scale_color_brewer(palette = \"Paired\")"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#creating-a-sequence-with-full_seq",
    "href": "_reshaping_data_with_tidyr_03.html#creating-a-sequence-with-full_seq",
    "title": "3  Expanding Data",
    "section": "3.6 Creating a sequence with full_seq()",
    "text": "3.6 Creating a sequence with full_seq()\nThe full_seq() function will look for the minimal and maximal values inside the vector you pass it and will then generate a full sequence of numbers with a fixed period in between them. When used inside the complete() function, full_seq() is a handy tool to make sure there are no missing observations in your data. Before combining these two functions you’ll generate a few sequences with full_seq() on its own to get the hang of this function.\n\nInstructions 100 XP\n\nUse full_seq() to create a sequence with all years from 2020 till 2030.\nUse full_seq() to create a sequence with all decades from 1980 till 2030.\nUse full_seq() to create a sequence with all dates in 1980 using the outer_dates vector.\n\n\n\nex_024.R\n\n# Generate all years from 2020 to 2030\nyears <- full_seq(c(2020, 2030), period = 1)\nyears\n# Generate all decades from 1980 to 2030\ndecades <- full_seq(c(1980, 2030), period = 10)\ndecades\n\nouter_dates <- c(as.Date(\"1980-01-01\"), as.Date(\"1980-12-31\"))\n# Generate the dates for all days in 1980\nfull_seq(outer_dates, period = 1)"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#olympic-medals-per-continent",
    "href": "_reshaping_data_with_tidyr_03.html#olympic-medals-per-continent",
    "title": "3  Expanding Data",
    "section": "3.8 Olympic medals per continent",
    "text": "3.8 Olympic medals per continent\n\nInstructions 100 XP\n\n\nex_026.R"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#tracking-a-virus-outbreak",
    "href": "_reshaping_data_with_tidyr_03.html#tracking-a-virus-outbreak",
    "title": "3  Expanding Data",
    "section": "3.9 Tracking a virus outbreak",
    "text": "3.9 Tracking a virus outbreak\n\nInstructions 100 XP\n\n\nex_027.R"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#counting-office-occupants",
    "href": "_reshaping_data_with_tidyr_03.html#counting-office-occupants",
    "title": "3  Expanding Data",
    "section": "3.10 Counting office occupants",
    "text": "3.10 Counting office occupants\n\nInstructions 100 XP\n\n\nex_028.R"
  },
  {
    "objectID": "_reshaping_data_with_tidyr_03.html#the-cold-wars-hottest-year",
    "href": "_reshaping_data_with_tidyr_03.html#the-cold-wars-hottest-year",
    "title": "3  Expanding Data",
    "section": "3.7 The Cold War’s hottest year",
    "text": "3.7 The Cold War’s hottest year\nIn October 1962, during the Cuban missile crisis, the world came close to a full scale nuclear war. Throughout 1962, the USA, USSR, and France together detonated a record 178 nuclear bombs for military power display and research. You’ve been given a sample of the Nuclear Explosion Database (NEDB) for that year (cumul_nukes_1962_df) with an observation for each date on which a bomb was detonated. The total_bombs variable contains the cumulative number of bombs detonated by a country up to that point in time.\nYou’ll complete the dataset to hold the full sequence of dates, and visualize the total number of bombs per country over time. You’ll also use the fill() function from Chapter One to impute missing values.\nLoad dplyr and ggplot2 packages.\n\nInstructions 100 XP\n\nComplete the dataset so that for each country there is an observation of each date using the full_seq() function.\n\n\n\nex_026.R\n\n\ncumul_nukes_1962_df %>% \n  # Complete the dataset\n  complete(\n    country,\n    date = full_seq(date, period = 1) \n  )\n\ncumul_nukes_1962_df %>% \n  # Complete the dataset\n  complete(country, date = full_seq(date, period = 1)) %>% \n  # Group the data by country\n  group_by(country) %>% \n  # Impute missing values with the last known observation\n  fill(total_bombs)\ncumul_nukes_1962_df %>% \n  # Complete the dataset\n    complete(country, date = full_seq(date, period = 1)) %>% \n  # Group the data by country\n    group_by(country) %>% \n  # Impute missing values with the last known observation\n    fill(total_bombs) %>% \n  # Plot the number of bombs over time, color by country\n    ggplot(\n        aes(\n        x = date,\n        y = total_bombs,\n        group = country,\n        color = country\n        )\n    ) +\n  # These two lines will mark the Cuban Missile Crisis \n    geom_rect(\n        xmin = as.Date(\"1962-10-16\"),\n        xmax = as.Date(\"1962-10-29\"),\n        ymin = -Inf,\n        ymax = Inf,\n        color = NA) + \n    geom_text(\n        x = as.Date(\"1962-10-22\"),\n        y = 15, label = \"Cuban Missile Crisis\",\n        angle = 90,\n        color = \"white\"\n    ) +\n  geom_line()"
  }
]