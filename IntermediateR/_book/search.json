[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IntermediateR",
    "section": "",
    "text": "Preface\nCourse Description\nIntermediate R is the next stop on your journey in mastering the R programming language. In this R training, you will learn about conditional statements, loops, and functions to power your own R scripts. Next, make your R code more efficient and readable using the apply functions. Finally, the utilities chapter gets you up to speed with regular expressions in R, data structure manipulations, and times and dates. This course will allow you to take the next step in advancing your overall knowledge and capabilities while programming in R."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Grade Rubric\nThe course encloenses 81 excercise and 14 videos that results in 6950 xp.\n\n\n\n\nname\nXP\n\n\n\nEquality\n100\n\n\nGreater and less than\n100\n\n\nCompare Vectors\n100\n\n\nCompare Matrices\n100\n\n\n& and |\n100\n\n\n& and | (2)\n100\n\n\nBlend it all together\n100\n\n\nThe is statement\n100\n\n\nAdd and else\n100\n\n\nCustomize furhter: else if\n100\n\n\nTake Control\n100"
  },
  {
    "objectID": "intermediate_r_ch_01.html#equality",
    "href": "intermediate_r_ch_01.html#equality",
    "title": "1  Conditionals and Control Flow",
    "section": "1.1 Equality",
    "text": "1.1 Equality\nThe most basic form of comparison is equality. Let’s briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).\n3 == (2 + 1)\n\"intermediate\" != \"r\"\nTRUE != FALSE\n\"Rchitect\" != \"rchitect\"\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!\n\nInstructions 100 XP\n\nIn the editor on the right, write R code to see if TRUE equals FALSE.\nLikewise, check if -6 * 14 is not equal to 17 - 101.\nNext up: comparison of character strings. Ask R whether the strings “useR” and “user” are equal.\nFinally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\n\nex_001.R\n\n# Comparison of logicals\nTRUE == FALSE\n\n# Comparison of numerics\n\n-6 * 14 != 17 -101\n# Comparison of character strings\n\"useR\" == \"user\"\n\n# Compare a logical with a numeric\nTRUE == 1"
  },
  {
    "objectID": "intermediate_r_ch_01.html#greater-and-less-than",
    "href": "intermediate_r_ch_01.html#greater-and-less-than",
    "title": "1  Conditionals and Control Flow",
    "section": "1.2 Greater and less than",
    "text": "1.2 Greater and less than\nApart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:\n(1 + 2) > 4\n\"dog\" < \"Cats\"\nTRUE <= FALSE\nRemember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE is treated as 1 for arithmetic, and FALSE is treated as 0. Therefore, FALSE < TRUE is TRUE.\n\nInstructions 100 XP\n\nWrite R expressions to check whether:\n-6 * 5 + 2 is greater than or equal to -10 + 1.\n“raining” is less than or equal to “raining dogs”.\nTRUE is greater than FALSE.\n\n\n\nex_002.R\n\n# Comparison of numerics\n\n-6 * 5 + 2 >= -10 +1\n\n# Comparison of character strings\n\"raining\" <=  \"raining dogs\"\n\n# Comparison of logicals\n\nTRUE > FALSE"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-vectors",
    "href": "intermediate_r_ch_01.html#compare-vectors",
    "title": "1  Conditionals and Control Flow",
    "section": "1.3 Compare vectors",
    "text": "1.3 Compare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nLet’s go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.\n\n1.3.1 Instructions 100 XP\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:\n\nOn which days did the number of LinkedIn profile views exceed 15? When was your\nLinkedIn profile viewed only 5 times or fewer? When was your LinkedIn profile\nvisited more often than your Facebook profile?\n\n\n\nex003.R\n\n# The linkedin and facebook vectors have already been created for you\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Popular days\n\nlinkedin > 15\n# Quiet days\nlinkedin <= 5\n\n# LinkedIn more popular than Facebook\nlinkedin > facebook"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-matrices",
    "href": "intermediate_r_ch_01.html#compare-matrices",
    "title": "1  Conditionals and Control Flow",
    "section": "1.4 Compare matrices",
    "text": "1.4 Compare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.\n\n1.4.1 Instructions 100 XP\nUsing the relational operators you’ve learned so far, try to discover the following:\n\nWhen were the views exactly equal to 13? Use the views matrix to return a logical matrix.\nFor which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\n\nex_004.R\n\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n# When does views equal 13?\n\nviews == 13\n# When is views less than or equal to 14?\n\nviews <= 14"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and",
    "href": "intermediate_r_ch_01.html#and",
    "title": "1  Conditionals and Control Flow",
    "section": "1.5 & and |",
    "text": "1.5 & and |\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\nTRUE & TRUE\nFALSE | TRUE\n5 <= 5 & 2 < 3\n3 < 4 | 7 < 6\nWatch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you’ll need 3 < x & x < 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have been pre-defined for you.\n\nInstructions 100 XP\nWrite R expressions to solve the following questions concerning the variable last:\n\nIs last under 5 or above 10?\nIs last between 15 and 20, excluding 15 but including 20?\n\n\n\nex_005.R\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n\n# Is last under 5 or above 10?\nlast < 5 | last > 10\n\n# Is last between 15 (exclusive) and 20 (inclusive)?\nlast > 15 | last < 20"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and-2",
    "href": "intermediate_r_ch_01.html#and-2",
    "title": "1  Conditionals and Control Flow",
    "section": "1.6 & and | (2)",
    "text": "1.6 & and | (2)\nLike relational operators, logical operators work perfectly fine with vectors and matrices.\nBoth the vectors linkedin and facebook are available again. Also a matrix -views- has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?\n\nInstructions 100 XP\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?\n\n\n\nex_006.R\n\n# The social data (linkedin, facebook, views) has been created for you\n\n# linkedin exceeds 10 but facebook below 10\nlinkedin > 10 & facebook < 10\n\n\n# When were one or both visited at least 12 times?\nlinkedin >= 12 | facebook >= 12\n\n# When is views between 11 (exclusive) and 14 (inclusive)?\n\nviews > 11 & views <= 14"
  },
  {
    "objectID": "intermediate_r_ch_01.html#blend-it-all-together",
    "href": "intermediate_r_ch_01.html#blend-it-all-together",
    "title": "1  Conditionals and Control Flow",
    "section": "1.7 Blend it all together",
    "text": "1.7 Blend it all together\nWith the things you’ve learned by now, you’re able to solve pretty cool problems.\nInstead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you’re working for. You’ve asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out.\n\nInstructions 100 XP\n\nSelect the entire second column, named day2, from the li_df data frame as a vector and assign it to second.\n\nUse second to create a logical vector, thatcontains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.\n\nUse sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.\n\n\n\nex_007.R\n\n# li_df is pre-loaded in your workspace\n\n# Select the second column, named day2, from li_df: second\nsecond <- li_df$day2\n\n# Build a logical vector, TRUE if value in second is extreme: extremes\nextremes <- second > 25 | second < 5\n\n# Count the number of TRUEs in extremes\nprint(sum(extremes))"
  },
  {
    "objectID": "intermediate_r_ch_01.html#the-if-statement",
    "href": "intermediate_r_ch_01.html#the-if-statement",
    "title": "1  Conditionals and Control Flow",
    "section": "1.8 The if statement",
    "text": "1.8 The if statement\nBefore diving into some exercises on the if statement, have another look at its syntax:\nif (condition) {\n  expr\n}\nRemember your vectors with social profile views? Let’s look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both variables have been pre- defined for you.\n\nInstructions 100 XP\n\nExamine the if statement that prints out “Showing LinkedIn information” if the medium variable equals \"LinkedIn\". -Code an if statement that prints “You are popular!” to the console if the num_views variable exceeds 15.\n\n\n\nex_008.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Examine the if statement for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n}\n\n# Write the if statement for num_views\n\nif (num_views > 15) {\n  print(\"You are popular!\")\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#add-an-else",
    "href": "intermediate_r_ch_01.html#add-an-else",
    "title": "1  Conditionals and Control Flow",
    "section": "1.9 Add an else",
    "text": "1.9 Add an else\nYou can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Here’s a recipe for its usage:\nif (condition) {\n  expr1\n} else {\n  expr2\n}\nIt’s important that the else keyword comes on the same line as the closing bracket of the if part!\nBoth if statements that you coded in the previous exercises are already available to use. It’s now up to you to extend them with the appropriate else statements!\n\nInstructions 100 XP\nAdd an else statement to both control structures, such that\n\n“Unknown medium” gets printed out to the console when the if-condition on medium does not hold.\n-R prints out “Try to be more visible!” when the if-condition on num_views is not met.\n\n\n\nex_009.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else{\n  print(\"Unknown medium\" )\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else{\n  print( \"Try to be more visible!\" )\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#customize-further-else-if",
    "href": "intermediate_r_ch_01.html#customize-further-else-if",
    "title": "1  Conditionals and Control Flow",
    "section": "1.10 Customize further: else if",
    "text": "1.10 Customize further: else if\nThe else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here’s an overview of the syntax to freshen your memory:\nif (condition1) {\n  expr1\n} else if (condition2) {\n  expr2\n} else if (condition3) {\n  expr3\n} else {\n  expr4\n}\nAgain, It’s important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!\n\nInstructions 100 XP\nAdd code to both control structures such that:\n\nR prints out “Showing Facebook information” if medium is equal to “Facebook”. Remember that R is case sensitive!\n“Your number of views is average” is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variables medium and num_views to see how the control structure respond. In both cases, the existing code should be extended in the else if statement. No existing code should be modified.\n\n\n\nex_010.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  # Add code to print correct string when condition is TRUE\n  print(\"Showing Facebook information\" )\n} else {\n  print(\"Unknown medium\")\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else if (num_views <= 15 & num_views > 10) {\n  # Add code to print correct string when condition is TRUE\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#else-if-2.0",
    "href": "intermediate_r_ch_01.html#else-if-2.0",
    "title": "1  Conditionals and Control Flow",
    "section": "1.11 Else if 2.0",
    "text": "1.11 Else if 2.0\nYou can do anything you want inside if-else constructs. You can even put in another set of conditional statements. Examine the following code chunk:\nif (number < 10) {\n  if (number < 5) {\n    result <- \"extra small\"\n  } else {\n    result <- \"small\"\n  }\n} else if (number < 100) {\n  result <- \"medium\"\n} else {\n  result <- \"large\"\n}\nprint(result)\nHave a look at the following statements:\n\nIf number is set to 6, “small” gets printed to the console.\nIf number is set to 100, R prints out “medium”.\nIf number is set to 4, “extra small” gets printed out to the console.\nIf number is set to 2500, R will generate an error, as result will not be defined.\n\nSelect the option that lists all the true statements.\n\nRun the code or a handwrite test (1, 3)."
  },
  {
    "objectID": "intermediate_r_ch_01.html#take-control",
    "href": "intermediate_r_ch_01.html#take-control",
    "title": "1  Conditionals and Control Flow",
    "section": "1.12 Take control!",
    "text": "1.12 Take control!\nIn this exercise, you will combine everything that you’ve learned so far: relational operators, logical operators and control constructs. You’ll need it all!\nWe’ve pre-defined two values for you: li and fb, denoting the number of profile views your LinkedIn and Facebook profile had on the last day of recordings. Go through the instructions to create R code that generates a ‘social media score’, sms, based on the values of li and fb.\n\nInstructions 100 XP\nFinish the control-flow construct with the following behavior:\n\nIf both li and fb are 15 or higher, set sms equal to double the sum of li and fb.\nIf both li and fb are strictly below 10, set sms equal to half the sum of li and fb.\nIn all other cases, set sms equal to li + fb.\nFinally, print the resulting sms variable.\n\n\n\nex_011.R\n\n# Variables related to your last day of recordings\nli <- 15\nfb <- 9\n\n# Code the control-flow construct\nif (li >= 15 & fb >= 15) {\n  sms <- 2 * (li + fb)\n} else if (li < 10 & fb < 10) {\n  sms <- 0.5 * (li + fb)\n} else {\n  sms <- li + fb\n}\n\n# Print the resulting sms to the console\nprint(sms)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "intermediate_r_ch_02.html#write-a-while-loop",
    "href": "intermediate_r_ch_02.html#write-a-while-loop",
    "title": "2  Loops",
    "section": "2.1 Write a while loop",
    "text": "2.1 Write a while loop\nLet’s get you started with building a while loop from the ground up. Have another look at its recipe:\nwhile (condition) {\n  expr\n}\nRemember that the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely.\nIf your session expires when you run your code, check the body of your while loop carefully.\nHave a look at the sample code provided; it initializes the speed variables and already provides a while loop template to get you started.\n\nInstructions 100 XP\nCode a while loop with the following characteristics:\n\nThe condition of the while loop should check if speed is higher than 30.\nInside the body of the while loop, print out “Slow down!”.\nInside the body of the while loop, decrease the speed by 7 units and assign\nthis new value to speed again. This step is crucial; otherwise your while loop will never stop and your session will expire.\n\nIf your session expires when you run your code, check the body of your while loop carefully: it’s likely that you made a mistake.\n\n\nex_012.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Code the while loop\nwhile (speed >30) {\n  print(\"Slow down!\")\n  speed <- speed - 7\n}\n\n# Print out the speed variable\nspeed"
  },
  {
    "objectID": "intermediate_r_ch_02.html",
    "href": "intermediate_r_ch_02.html",
    "title": "2  Loops",
    "section": "",
    "text": "3 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?"
  },
  {
    "objectID": "intermediate_r_ch_02.html#stop-the-while-loop-break",
    "href": "intermediate_r_ch_02.html#stop-the-while-loop-break",
    "title": "2  Loops",
    "section": "2.3 Stop the while loop: break",
    "text": "2.3 Stop the while loop: break\nThere are some very rare situations in which severe speeding is necessary: what if a hurricane is approaching and you have to get away as quickly as possible? You don’t want the driver’s assistant sending you speeding notifications in that scenario, right?\nThis seems like a great opportunity to include the break statement in the while loop you’ve been working on. Remember that the break statement is a control statement. When R encounters it, the while loop is abandoned completely.\n\nInstructions 100 XP\nAdapt the while loop such that it is abandoned when the speed of the vehicle is greater than 80. This time, the speed variable has been initialized to 88; keep it that way.\n\n\nex_014.R\n\n# Initialize the speed variable\nspeed <- 88\n\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  \n  # Break the while loop when speed exceeds 80\n  if (speed > 80) {\n    break\n  }\n  \n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#build-a-while-loop-from-scratch",
    "href": "intermediate_r_ch_02.html#build-a-while-loop-from-scratch",
    "title": "2  Loops",
    "section": "2.4 Build a while loop from scratch",
    "text": "2.4 Build a while loop from scratch\nThe previous exercises guided you through developing a pretty advanced while loop, containing a break statement and different messages and updates as determined by control flow constructs. If you manage to solve this comprehensive exercise using a while loop, you’re totally ready for the next topic: the for loop."
  },
  {
    "objectID": "intermediate_r_ch_02.html#instructions-100-xp-3",
    "href": "intermediate_r_ch_02.html#instructions-100-xp-3",
    "title": "2  Loops",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the while loop so that it:\n\nprints out the triple of i, so 3 * i, at each run.\nis abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.\n\n\n\nex_015.R\n\n# Initialize i as 1 \ni <- 1\n\n# Code the while loop\nwhile (i <= 10) {\n  print(3 * i)\n  if (i %% 8 ==0 ) {\n    break\n  }\n  i <- i + 1\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#throw-in-more-conditionals",
    "href": "intermediate_r_ch_01.html#throw-in-more-conditionals",
    "title": "1  Conditionals and Control Flow",
    "section": "1.13 Throw in more conditionals",
    "text": "1.13 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nInstructions 100 XP\n\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6.\nIf the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed."
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-vector",
    "href": "intermediate_r_ch_02.html#loop-over-a-vector",
    "title": "2  Loops",
    "section": "2.5 Loop over a vector",
    "text": "2.5 Loop over a vector\nIn the previous video, Filip told you about two different strategies for using the for loop. To refresh your memory, consider the following loops that are equivalent in R:\nprimes <- c(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes)) {\n  print(primes[i])\n}\nRemember our linkedin vector? It’s a vector that contains the number of views your LinkedIn profile had in the last seven days. The linkedin vector has been pre-defined so that you can fully focus on the instructions!\n\nInstructions 100 XP\nWrite a for loop that iterates over all the elements of linkedin and prints out every element separately. Do this in two ways: using the loop version 1 and the loop version 2 in the example code above.\n\n\nex_016.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (element in linkedin) {\n\n    print(element)\n}\n\n# Loop version 2\nfor (i in 1:length(linkedin)){\n    print(linkedin[i])\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#throw-in-more-conditionals",
    "href": "intermediate_r_ch_02.html#throw-in-more-conditionals",
    "title": "2  Loops",
    "section": "2.2 Throw in more conditionals",
    "text": "2.2 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nInstructions 100 XP\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6. If the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed.\n\n\nex_013.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Extend/adapt the while loop\nwhile (speed > 30) {\n  print(paste(\"Your speed is\",speed))\n  if (speed > 48 ) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11 \n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6 \n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-list",
    "href": "intermediate_r_ch_02.html#loop-over-a-list",
    "title": "2  Loops",
    "section": "2.6 Loop over a list",
    "text": "2.6 Loop over a list\nLooping over a list is just as easy and convenient as looping over a vector. There are again two different approaches here:\nprimes_list <- list(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes_list) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes_list)) {\n  print(primes_list[[i]])\n}\nNotice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.\nSuppose you have a list of all sorts of information on New York City: its population size, the names of the boroughs, and whether it is the capital of the United States. We’ve already defined a list nyc containing this information (source: Wikipedia).\n\nInstructions 100 XP\nAs in the previous exercise, loop over the nyc list in two different ways to print its elements:\n\nLoop directly over the nyc list (loop version 1).\nDefine a looping index and do subsetting using double brackets (loop version 2).\n\n\n\nex_017.R\n\n# The nyc list is already specified\nnyc <- list(pop = 8405837, \n            boroughs = c(\n              \"Manhattan\",\n              \"Bronx\",\n              \"Brooklyn\",\n              \"Queens\",\n              \"Staten Island\"\n            ), \n            capital = FALSE)\n\n# Loop version 1\nfor(i in nyc){\n    print(i)\n}\n\n# Loop version 2\nfor(i in 1:length(nyc)){\n    print(nyc[[i]])\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-matrix",
    "href": "intermediate_r_ch_02.html#loop-over-a-matrix",
    "title": "2  Loops",
    "section": "2.7 Loop over a matrix",
    "text": "2.7 Loop over a matrix\nIn your workspace, there’s a matrix ttt, that represents the status of a tic-tac-toe game. It contains the values “X”, “O” and “NA”. Print out ttt to get a closer look. On row 1 and column 1, there’s “O”, while on row 3 and column 2 there’s “NA”.\nTo solve this exercise, you’ll need a for loop inside a for loop, often called a nested loop. Doing this in R is a breeze! Simply use the following recipe:\nfor (var1 in seq1) {\n  for (var2 in seq2) {\n    expr\n  }\n}\n\nInstructions 100 XP\nFinish the nested for loops to go over the elements in ttt:\n\nThe outer loop should loop over the rows, with loop index i (use 1:nrow(ttt)).\nThe inner loop should loop over the columns, with loop index j (use 1:ncol(ttt)).\nInside the inner loop, make use of print() and paste() to print out information in the following format: “On row i and column j the board contains x”, where x is the value on that position.\n\n\n\nex_018.R\n\n# The tic-tac-toe matrix ttt has already been defined for you\n\n# define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(\n      paste(\n        \"On row\",\n        i,\n        \" and column\",\n        j,\n        \"the board contains\",\n        ttt[i, j]\n      )\n    )\n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#mix-it-up-with-control-flow",
    "href": "intermediate_r_ch_02.html#mix-it-up-with-control-flow",
    "title": "2  Loops",
    "section": "2.8 Mix it up with control flow",
    "text": "2.8 Mix it up with control flow\nLet’s return to the LinkedIn profile views data, stored in a vector linkedin. In the first exercise on for loops you already did a simple printout of each element in this vector. A little more in-depth interpretation of this data wouldn’t hurt, right? Time to throw in some conditionals! As with the while loop, you can use the if and else statements inside the for loop.\n\nInstructions 100 XP\nAdd code to the for loop that loops over the elements of the linkedin vector:\n\nIf the vector element’s value exceeds 10, print out “You’re popular!”.\nIf the vector element’s value does not exceed 10, print out “Be more visible!”\n\n\n\nex_019.r\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if ( li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#next-you-break-it",
    "href": "intermediate_r_ch_02.html#next-you-break-it",
    "title": "2  Loops",
    "section": "2.9 Next, you break it",
    "text": "2.9 Next, you break it\nA possible solution to the previous exercise has been provided for you. The code loops over the linkedin vector and prints out different messages depending on the values of li.\nIn this exercise, you will use the break and next statements:\nThe break statement abandons the active loop: the remaining code in the loop is skipped and the loop is not iterated over anymore. The next statement skips the remainder of the code in the loop, but continues the iteration.\nInstructions 100 XP Extend the for loop with two new, separate if tests as follows:\n\nIf the vector element’s value exceeds 16, print out “This is ridiculous, I’m outta here!” and have R abandon the for loop (break).\nIf the value is lower than 5, print out “This is too embarrassing!” and fast-forward to the next iteration (next).\n\n\n\nex_019.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Adapt/extend the for loop\nfor (li in linkedin) {\n  if (li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  \n  # Add if statement with break\n  if (li > 16 ){\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  \n  # Add if statement with next\n  \n  if (li < 5){\n      print(\"This is too embarrassing!\")    \n      next\n  }\n  \n  print(li)\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#build-a-for-loop-from-scratch",
    "href": "intermediate_r_ch_02.html#build-a-for-loop-from-scratch",
    "title": "2  Loops",
    "section": "2.10 Build a for loop from scratch",
    "text": "2.10 Build a for loop from scratch\nThis exercise will not introduce any new concepts on for loops.\nWe already went ahead and defined a variable rquote. This variable has been split up into a vector that contains separate letters and has been stored in a vector chars with the strsplit() function.\nCan you write code that counts the number of r’s that come before the first u in rquote?\n\nInstructions 100 XP\n\nInitialize the variable rcount, as 0.\nFinish the for loop:\n\nif char equals “r”, increase the value of rcount by 1.\nif char equals “u”, leave the for loop entirely with a break.\n\nFinally, print out the variable rcount to the console to see if your code is correct."
  }
]