[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IntermediateR",
    "section": "",
    "text": "Preface\nCourse Description\nIntermediate R is the next stop on your journey in mastering the R programming language. In this R training, you will learn about conditional statements, loops, and functions to power your own R scripts. Next, make your R code more efficient and readable using the apply functions. Finally, the utilities chapter gets you up to speed with regular expressions in R, data structure manipulations, and times and dates. This course will allow you to take the next step in advancing your overall knowledge and capabilities while programming in R."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Grade Rubric\nThe course encloenses 81 excercise and 14 videos that results in 6950 xp.\n\n\n\n\nname\nXP\n\n\n\nEquality\n100\n\n\nGreater and less than\n100\n\n\nCompare Vectors\n100\n\n\nCompare Matrices\n100\n\n\n& and |\n100\n\n\n& and | (2)\n100\n\n\nBlend it all together\n100\n\n\nThe is statement\n100\n\n\nAdd and else\n100\n\n\nCustomize furhter: else if\n100\n\n\nTake Control\n100\n\n\n\n\n\n\n\n\n\nname\nXP\n\n\n\nWrite a while loop\n100\n\n\nThrow in more conditionals\n100\n\n\nStop the while loop: break\n100\n\n\nBuild a while loop from scratch\n100\n\n\nLoop over a vector\n100\n\n\nLoop over a list\n100\n\n\nLoop over a matrix\n100\n\n\nMix it up with control flow\n100\n\n\nNext, you break it\n100\n\n\nBuild a for loop from scratch\n100\n\n\n\n\n\n\n\n\n\nname\nXP\n\n\n\nFunction Documentation\n100\n\n\nUse a function\n100\n\n\nUse a function (2)\n100\n\n\nUse a function (3)\n100\n\n\nFunctions inside functions\n100\n\n\nWrite your own function\n100\n\n\nWrite your own function (2)\n100\n\n\nWrite your own function (3)\n100"
  },
  {
    "objectID": "intermediate_r_ch_01.html#equality",
    "href": "intermediate_r_ch_01.html#equality",
    "title": "1  Conditionals and Control Flow",
    "section": "1.1 Equality",
    "text": "1.1 Equality\nThe most basic form of comparison is equality. Let’s briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).\n3 == (2 + 1)\n\"intermediate\" != \"r\"\nTRUE != FALSE\n\"Rchitect\" != \"rchitect\"\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!\n\nInstructions 100 XP\n\nIn the editor on the right, write R code to see if TRUE equals FALSE.\nLikewise, check if -6 * 14 is not equal to 17 - 101.\nNext up: comparison of character strings. Ask R whether the strings “useR” and “user” are equal.\nFinally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\n\nex_001.R\n\n# Comparison of logicals\nTRUE == FALSE\n\n# Comparison of numerics\n\n-6 * 14 != 17 -101\n# Comparison of character strings\n\"useR\" == \"user\"\n\n# Compare a logical with a numeric\nTRUE == 1"
  },
  {
    "objectID": "intermediate_r_ch_01.html#greater-and-less-than",
    "href": "intermediate_r_ch_01.html#greater-and-less-than",
    "title": "1  Conditionals and Control Flow",
    "section": "1.2 Greater and less than",
    "text": "1.2 Greater and less than\nApart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:\n(1 + 2) > 4\n\"dog\" < \"Cats\"\nTRUE <= FALSE\nRemember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE is treated as 1 for arithmetic, and FALSE is treated as 0. Therefore, FALSE < TRUE is TRUE.\n\nInstructions 100 XP\n\nWrite R expressions to check whether:\n-6 * 5 + 2 is greater than or equal to -10 + 1.\n“raining” is less than or equal to “raining dogs”.\nTRUE is greater than FALSE.\n\n\n\nex_002.R\n\n# Comparison of numerics\n\n-6 * 5 + 2 >= -10 +1\n\n# Comparison of character strings\n\"raining\" <=  \"raining dogs\"\n\n# Comparison of logicals\n\nTRUE > FALSE"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-vectors",
    "href": "intermediate_r_ch_01.html#compare-vectors",
    "title": "1  Conditionals and Control Flow",
    "section": "1.3 Compare vectors",
    "text": "1.3 Compare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nLet’s go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.\n\n1.3.1 Instructions 100 XP\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:\n\nOn which days did the number of LinkedIn profile views exceed 15? When was your\nLinkedIn profile viewed only 5 times or fewer? When was your LinkedIn profile\nvisited more often than your Facebook profile?\n\n\n\nex003.R\n\n# The linkedin and facebook vectors have already been created for you\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Popular days\n\nlinkedin > 15\n# Quiet days\nlinkedin <= 5\n\n# LinkedIn more popular than Facebook\nlinkedin > facebook"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-matrices",
    "href": "intermediate_r_ch_01.html#compare-matrices",
    "title": "1  Conditionals and Control Flow",
    "section": "1.4 Compare matrices",
    "text": "1.4 Compare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.\n\n1.4.1 Instructions 100 XP\nUsing the relational operators you’ve learned so far, try to discover the following:\n\nWhen were the views exactly equal to 13? Use the views matrix to return a logical matrix.\nFor which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\n\nex_004.R\n\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n# When does views equal 13?\n\nviews == 13\n# When is views less than or equal to 14?\n\nviews <= 14"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and",
    "href": "intermediate_r_ch_01.html#and",
    "title": "1  Conditionals and Control Flow",
    "section": "1.5 & and |",
    "text": "1.5 & and |\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\nTRUE & TRUE\nFALSE | TRUE\n5 <= 5 & 2 < 3\n3 < 4 | 7 < 6\nWatch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you’ll need 3 < x & x < 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have been pre-defined for you.\n\nInstructions 100 XP\nWrite R expressions to solve the following questions concerning the variable last:\n\nIs last under 5 or above 10?\nIs last between 15 and 20, excluding 15 but including 20?\n\n\n\nex_005.R\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n\n# Is last under 5 or above 10?\nlast < 5 | last > 10\n\n# Is last between 15 (exclusive) and 20 (inclusive)?\nlast > 15 | last < 20"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and-2",
    "href": "intermediate_r_ch_01.html#and-2",
    "title": "1  Conditionals and Control Flow",
    "section": "1.6 & and | (2)",
    "text": "1.6 & and | (2)\nLike relational operators, logical operators work perfectly fine with vectors and matrices.\nBoth the vectors linkedin and facebook are available again. Also a matrix -views- has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?\n\nInstructions 100 XP\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?\n\n\n\nex_006.R\n\n# The social data (linkedin, facebook, views) has been created for you\n\n# linkedin exceeds 10 but facebook below 10\nlinkedin > 10 & facebook < 10\n\n\n# When were one or both visited at least 12 times?\nlinkedin >= 12 | facebook >= 12\n\n# When is views between 11 (exclusive) and 14 (inclusive)?\n\nviews > 11 & views <= 14"
  },
  {
    "objectID": "intermediate_r_ch_01.html#blend-it-all-together",
    "href": "intermediate_r_ch_01.html#blend-it-all-together",
    "title": "1  Conditionals and Control Flow",
    "section": "1.7 Blend it all together",
    "text": "1.7 Blend it all together\nWith the things you’ve learned by now, you’re able to solve pretty cool problems.\nInstead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you’re working for. You’ve asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out.\n\nInstructions 100 XP\n\nSelect the entire second column, named day2, from the li_df data frame as a vector and assign it to second.\n\nUse second to create a logical vector, thatcontains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.\n\nUse sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.\n\n\n\nex_007.R\n\n# li_df is pre-loaded in your workspace\n\n# Select the second column, named day2, from li_df: second\nsecond <- li_df$day2\n\n# Build a logical vector, TRUE if value in second is extreme: extremes\nextremes <- second > 25 | second < 5\n\n# Count the number of TRUEs in extremes\nprint(sum(extremes))"
  },
  {
    "objectID": "intermediate_r_ch_01.html#the-if-statement",
    "href": "intermediate_r_ch_01.html#the-if-statement",
    "title": "1  Conditionals and Control Flow",
    "section": "1.8 The if statement",
    "text": "1.8 The if statement\nBefore diving into some exercises on the if statement, have another look at its syntax:\nif (condition) {\n  expr\n}\nRemember your vectors with social profile views? Let’s look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both variables have been pre- defined for you.\n\nInstructions 100 XP\n\nExamine the if statement that prints out “Showing LinkedIn information” if the medium variable equals \"LinkedIn\". -Code an if statement that prints “You are popular!” to the console if the num_views variable exceeds 15.\n\n\n\nex_008.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Examine the if statement for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n}\n\n# Write the if statement for num_views\n\nif (num_views > 15) {\n  print(\"You are popular!\")\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#add-an-else",
    "href": "intermediate_r_ch_01.html#add-an-else",
    "title": "1  Conditionals and Control Flow",
    "section": "1.9 Add an else",
    "text": "1.9 Add an else\nYou can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Here’s a recipe for its usage:\nif (condition) {\n  expr1\n} else {\n  expr2\n}\nIt’s important that the else keyword comes on the same line as the closing bracket of the if part!\nBoth if statements that you coded in the previous exercises are already available to use. It’s now up to you to extend them with the appropriate else statements!\n\nInstructions 100 XP\nAdd an else statement to both control structures, such that\n\n“Unknown medium” gets printed out to the console when the if-condition on medium does not hold.\n-R prints out “Try to be more visible!” when the if-condition on num_views is not met.\n\n\n\nex_009.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else{\n  print(\"Unknown medium\" )\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else{\n  print( \"Try to be more visible!\" )\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#customize-further-else-if",
    "href": "intermediate_r_ch_01.html#customize-further-else-if",
    "title": "1  Conditionals and Control Flow",
    "section": "1.10 Customize further: else if",
    "text": "1.10 Customize further: else if\nThe else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here’s an overview of the syntax to freshen your memory:\nif (condition1) {\n  expr1\n} else if (condition2) {\n  expr2\n} else if (condition3) {\n  expr3\n} else {\n  expr4\n}\nAgain, It’s important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!\n\nInstructions 100 XP\nAdd code to both control structures such that:\n\nR prints out “Showing Facebook information” if medium is equal to “Facebook”. Remember that R is case sensitive!\n“Your number of views is average” is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variables medium and num_views to see how the control structure respond. In both cases, the existing code should be extended in the else if statement. No existing code should be modified.\n\n\n\nex_010.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  # Add code to print correct string when condition is TRUE\n  print(\"Showing Facebook information\" )\n} else {\n  print(\"Unknown medium\")\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else if (num_views <= 15 & num_views > 10) {\n  # Add code to print correct string when condition is TRUE\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#else-if-2.0",
    "href": "intermediate_r_ch_01.html#else-if-2.0",
    "title": "1  Conditionals and Control Flow",
    "section": "1.11 Else if 2.0",
    "text": "1.11 Else if 2.0\nYou can do anything you want inside if-else constructs. You can even put in another set of conditional statements. Examine the following code chunk:\nif (number < 10) {\n  if (number < 5) {\n    result <- \"extra small\"\n  } else {\n    result <- \"small\"\n  }\n} else if (number < 100) {\n  result <- \"medium\"\n} else {\n  result <- \"large\"\n}\nprint(result)\nHave a look at the following statements:\n\nIf number is set to 6, “small” gets printed to the console.\nIf number is set to 100, R prints out “medium”.\nIf number is set to 4, “extra small” gets printed out to the console.\nIf number is set to 2500, R will generate an error, as result will not be defined.\n\nSelect the option that lists all the true statements.\n\nRun the code or a handwrite test (1, 3)."
  },
  {
    "objectID": "intermediate_r_ch_01.html#take-control",
    "href": "intermediate_r_ch_01.html#take-control",
    "title": "1  Conditionals and Control Flow",
    "section": "1.12 Take control!",
    "text": "1.12 Take control!\nIn this exercise, you will combine everything that you’ve learned so far: relational operators, logical operators and control constructs. You’ll need it all!\nWe’ve pre-defined two values for you: li and fb, denoting the number of profile views your LinkedIn and Facebook profile had on the last day of recordings. Go through the instructions to create R code that generates a ‘social media score’, sms, based on the values of li and fb.\n\nInstructions 100 XP\nFinish the control-flow construct with the following behavior:\n\nIf both li and fb are 15 or higher, set sms equal to double the sum of li and fb.\nIf both li and fb are strictly below 10, set sms equal to half the sum of li and fb.\nIn all other cases, set sms equal to li + fb.\nFinally, print the resulting sms variable.\n\n\n\nex_011.R\n\n# Variables related to your last day of recordings\nli <- 15\nfb <- 9\n\n# Code the control-flow construct\nif (li >= 15 & fb >= 15) {\n  sms <- 2 * (li + fb)\n} else if (li < 10 & fb < 10) {\n  sms <- 0.5 * (li + fb)\n} else {\n  sms <- li + fb\n}\n\n# Print the resulting sms to the console\nprint(sms)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "intermediate_r_ch_02.html#write-a-while-loop",
    "href": "intermediate_r_ch_02.html#write-a-while-loop",
    "title": "2  Loops",
    "section": "2.1 Write a while loop",
    "text": "2.1 Write a while loop\nLet’s get you started with building a while loop from the ground up. Have another look at its recipe:\nwhile (condition) {\n  expr\n}\nRemember that the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely.\nIf your session expires when you run your code, check the body of your while loop carefully.\nHave a look at the sample code provided; it initializes the speed variables and already provides a while loop template to get you started.\n\nInstructions 100 XP\nCode a while loop with the following characteristics:\n\nThe condition of the while loop should check if speed is higher than 30.\nInside the body of the while loop, print out “Slow down!”.\nInside the body of the while loop, decrease the speed by 7 units and assign\nthis new value to speed again. This step is crucial; otherwise your while loop will never stop and your session will expire.\n\nIf your session expires when you run your code, check the body of your while loop carefully: it’s likely that you made a mistake.\n\n\nex_012.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Code the while loop\nwhile (speed >30) {\n  print(\"Slow down!\")\n  speed <- speed - 7\n}\n\n# Print out the speed variable\nspeed"
  },
  {
    "objectID": "intermediate_r_ch_02.html",
    "href": "intermediate_r_ch_02.html",
    "title": "2  Loops",
    "section": "",
    "text": "3 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?"
  },
  {
    "objectID": "intermediate_r_ch_02.html#stop-the-while-loop-break",
    "href": "intermediate_r_ch_02.html#stop-the-while-loop-break",
    "title": "2  Loops",
    "section": "2.3 Stop the while loop: break",
    "text": "2.3 Stop the while loop: break\nThere are some very rare situations in which severe speeding is necessary: what if a hurricane is approaching and you have to get away as quickly as possible? You don’t want the driver’s assistant sending you speeding notifications in that scenario, right?\nThis seems like a great opportunity to include the break statement in the while loop you’ve been working on. Remember that the break statement is a control statement. When R encounters it, the while loop is abandoned completely.\n\nInstructions 100 XP\nAdapt the while loop such that it is abandoned when the speed of the vehicle is greater than 80. This time, the speed variable has been initialized to 88; keep it that way.\n\n\nex_014.R\n\n# Initialize the speed variable\nspeed <- 88\n\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  \n  # Break the while loop when speed exceeds 80\n  if (speed > 80) {\n    break\n  }\n  \n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#build-a-while-loop-from-scratch",
    "href": "intermediate_r_ch_02.html#build-a-while-loop-from-scratch",
    "title": "2  Loops",
    "section": "2.4 Build a while loop from scratch",
    "text": "2.4 Build a while loop from scratch\nThe previous exercises guided you through developing a pretty advanced while loop, containing a break statement and different messages and updates as determined by control flow constructs. If you manage to solve this comprehensive exercise using a while loop, you’re totally ready for the next topic: the for loop."
  },
  {
    "objectID": "intermediate_r_ch_02.html#instructions-100-xp-3",
    "href": "intermediate_r_ch_02.html#instructions-100-xp-3",
    "title": "2  Loops",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the while loop so that it:\n\nprints out the triple of i, so 3 * i, at each run.\nis abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.\n\n\n\nex_015.R\n\n# Initialize i as 1 \ni <- 1\n\n# Code the while loop\nwhile (i <= 10) {\n  print(3 * i)\n  if (i %% 8 ==0 ) {\n    break\n  }\n  i <- i + 1\n}"
  },
  {
    "objectID": "intermediate_r_ch_01.html#throw-in-more-conditionals",
    "href": "intermediate_r_ch_01.html#throw-in-more-conditionals",
    "title": "1  Conditionals and Control Flow",
    "section": "1.13 Throw in more conditionals",
    "text": "1.13 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nInstructions 100 XP\n\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6.\nIf the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed."
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-vector",
    "href": "intermediate_r_ch_02.html#loop-over-a-vector",
    "title": "2  Loops",
    "section": "2.5 Loop over a vector",
    "text": "2.5 Loop over a vector\nIn the previous video, Filip told you about two different strategies for using the for loop. To refresh your memory, consider the following loops that are equivalent in R:\nprimes <- c(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes)) {\n  print(primes[i])\n}\nRemember our linkedin vector? It’s a vector that contains the number of views your LinkedIn profile had in the last seven days. The linkedin vector has been pre-defined so that you can fully focus on the instructions!\n\nInstructions 100 XP\nWrite a for loop that iterates over all the elements of linkedin and prints out every element separately. Do this in two ways: using the loop version 1 and the loop version 2 in the example code above.\n\n\nex_016.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (element in linkedin) {\n\n    print(element)\n}\n\n# Loop version 2\nfor (i in 1:length(linkedin)){\n    print(linkedin[i])\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#throw-in-more-conditionals",
    "href": "intermediate_r_ch_02.html#throw-in-more-conditionals",
    "title": "2  Loops",
    "section": "2.2 Throw in more conditionals",
    "text": "2.2 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nInstructions 100 XP\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6. If the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed.\n\n\nex_013.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Extend/adapt the while loop\nwhile (speed > 30) {\n  print(paste(\"Your speed is\",speed))\n  if (speed > 48 ) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11 \n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6 \n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-list",
    "href": "intermediate_r_ch_02.html#loop-over-a-list",
    "title": "2  Loops",
    "section": "2.6 Loop over a list",
    "text": "2.6 Loop over a list\nLooping over a list is just as easy and convenient as looping over a vector. There are again two different approaches here:\nprimes_list <- list(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes_list) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes_list)) {\n  print(primes_list[[i]])\n}\nNotice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.\nSuppose you have a list of all sorts of information on New York City: its population size, the names of the boroughs, and whether it is the capital of the United States. We’ve already defined a list nyc containing this information (source: Wikipedia).\n\nInstructions 100 XP\nAs in the previous exercise, loop over the nyc list in two different ways to print its elements:\n\nLoop directly over the nyc list (loop version 1).\nDefine a looping index and do subsetting using double brackets (loop version 2).\n\n\n\nex_017.R\n\n# The nyc list is already specified\nnyc <- list(pop = 8405837, \n            boroughs = c(\n              \"Manhattan\",\n              \"Bronx\",\n              \"Brooklyn\",\n              \"Queens\",\n              \"Staten Island\"\n            ), \n            capital = FALSE)\n\n# Loop version 1\nfor(i in nyc){\n    print(i)\n}\n\n# Loop version 2\nfor(i in 1:length(nyc)){\n    print(nyc[[i]])\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#loop-over-a-matrix",
    "href": "intermediate_r_ch_02.html#loop-over-a-matrix",
    "title": "2  Loops",
    "section": "2.7 Loop over a matrix",
    "text": "2.7 Loop over a matrix\nIn your workspace, there’s a matrix ttt, that represents the status of a tic-tac-toe game. It contains the values “X”, “O” and “NA”. Print out ttt to get a closer look. On row 1 and column 1, there’s “O”, while on row 3 and column 2 there’s “NA”.\nTo solve this exercise, you’ll need a for loop inside a for loop, often called a nested loop. Doing this in R is a breeze! Simply use the following recipe:\nfor (var1 in seq1) {\n  for (var2 in seq2) {\n    expr\n  }\n}\n\nInstructions 100 XP\nFinish the nested for loops to go over the elements in ttt:\n\nThe outer loop should loop over the rows, with loop index i (use 1:nrow(ttt)).\nThe inner loop should loop over the columns, with loop index j (use 1:ncol(ttt)).\nInside the inner loop, make use of print() and paste() to print out information in the following format: “On row i and column j the board contains x”, where x is the value on that position.\n\n\n\nex_018.R\n\n# The tic-tac-toe matrix ttt has already been defined for you\n\n# define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(\n      paste(\n        \"On row\",\n        i,\n        \" and column\",\n        j,\n        \"the board contains\",\n        ttt[i, j]\n      )\n    )\n  }\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#mix-it-up-with-control-flow",
    "href": "intermediate_r_ch_02.html#mix-it-up-with-control-flow",
    "title": "2  Loops",
    "section": "2.8 Mix it up with control flow",
    "text": "2.8 Mix it up with control flow\nLet’s return to the LinkedIn profile views data, stored in a vector linkedin. In the first exercise on for loops you already did a simple printout of each element in this vector. A little more in-depth interpretation of this data wouldn’t hurt, right? Time to throw in some conditionals! As with the while loop, you can use the if and else statements inside the for loop.\n\nInstructions 100 XP\nAdd code to the for loop that loops over the elements of the linkedin vector:\n\nIf the vector element’s value exceeds 10, print out “You’re popular!”.\nIf the vector element’s value does not exceed 10, print out “Be more visible!”\n\n\n\nex_019.r\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if ( li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#next-you-break-it",
    "href": "intermediate_r_ch_02.html#next-you-break-it",
    "title": "2  Loops",
    "section": "2.9 Next, you break it",
    "text": "2.9 Next, you break it\nA possible solution to the previous exercise has been provided for you. The code loops over the linkedin vector and prints out different messages depending on the values of li.\nIn this exercise, you will use the break and next statements:\nThe break statement abandons the active loop: the remaining code in the loop is skipped and the loop is not iterated over anymore. The next statement skips the remainder of the code in the loop, but continues the iteration.\nInstructions 100 XP Extend the for loop with two new, separate if tests as follows:\n\nIf the vector element’s value exceeds 16, print out “This is ridiculous, I’m outta here!” and have R abandon the for loop (break).\nIf the value is lower than 5, print out “This is too embarrassing!” and fast-forward to the next iteration (next).\n\n\n\nex_019.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Adapt/extend the for loop\nfor (li in linkedin) {\n  if (li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  \n  # Add if statement with break\n  if (li > 16 ){\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  \n  # Add if statement with next\n  \n  if (li < 5){\n      print(\"This is too embarrassing!\")    \n      next\n  }\n  \n  print(li)\n}"
  },
  {
    "objectID": "intermediate_r_ch_02.html#build-a-for-loop-from-scratch",
    "href": "intermediate_r_ch_02.html#build-a-for-loop-from-scratch",
    "title": "2  Loops",
    "section": "2.10 Build a for loop from scratch",
    "text": "2.10 Build a for loop from scratch\nThis exercise will not introduce any new concepts on for loops.\nWe already went ahead and defined a variable rquote. This variable has been split up into a vector that contains separate letters and has been stored in a vector chars with the strsplit() function.\nCan you write code that counts the number of r’s that come before the first u in rquote?\n\nInstructions 100 XP\n\nInitialize the variable rcount, as 0.\nFinish the for loop:\n\nif char equals “r”, increase the value of rcount by 1.\nif char equals “u”, leave the for loop entirely with a break.\n\nFinally, print out the variable rcount to the console to see if your code is correct.\n\n\n\nex_020.R\n\n# Pre-defined variables\nrquote <- \"r's internals are irrefutably intriguing\"\nchars <- strsplit(rquote, split = \"\")[[1]]\n\n# Initialize rcount\nrcount <- 0\n\n# Finish the for loop\nfor (char in chars) {\n  if (char == \"r\"){\n      rcount <- rcount + 1\n  }\n  \n  if (char == \"u\"){\n      break\n  }\n  \n}\n\n# Print out rcount\nprint(rcount)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#section",
    "href": "intermediate_r_ch_03.html#section",
    "title": "3  Functions",
    "section": "3.1 ",
    "text": "3.1 \nBefore even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sample() function, for example, you can use one of following R commands:\nhelp(sample)\n?sample\nIf you execute these commands, you’ll be redirected to <www.rdocumentation.org.>\nA quick hack to see the arguments of the sample() function is the args() function. Try it out in the console:\nargs(sample)\nIn the next exercises, you’ll be learning how to use the mean() function with increasing complexity. The first thing you’ll have to do is get acquainted with the mean() function.\n\nInstructions 100 XP\n\nConsult the documentation on the mean() function: ?mean or help(mean).\nInspect the arguments of the mean() function using the args() function.\n\n\n\nex_021.R\n\n# Consult the documentation on the mean() function\n\nhelp(mean)\n# Inspect the arguments of the mean() function\nargs(mean)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function",
    "href": "intermediate_r_ch_03.html#use-a-function",
    "title": "3  Functions",
    "section": "3.2 Use a function",
    "text": "3.2 Use a function\nThe documentation on the mean() function gives us quite some information:\n\nThe mean() function computes the arithmetic mean.\nThe most general method takes multiple arguments: x and ....\nThe x argument should be a vector containing numeric, logical or time-related information.\n\nRemember that R can match arguments both by position and by name. Can you still remember the difference? You’ll find out in this exercise!\nOnce more, you’ll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been created for you.\n\nInstructions 100 XP\n\nCalculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!\nPrint out both avg_li and avg_fb.\n\n\n\nex_022.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate average number of views\navg_li <- mean(linkedin)\navg_fb <- mean(facebook)\n\n\n# Inspect avg_li and avg_fb\nprint(avg_li)\nprint(avg_fb)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function-2",
    "href": "intermediate_r_ch_03.html#use-a-function-2",
    "title": "3  Functions",
    "section": "3.3 Use a function (2)",
    "text": "3.3 Use a function (2)\nCheck the documentation on the mean() function again:\n?mean\nThe Usage section of the documentation includes two versions of the mean()function. The first usage,\nmean(x, ...)\nis the most general usage of the mean function. The ‘Default S3 method’, however, is:\nmean(x, trim = 0, na.rm = FALSE, ...)\nThe ... is called the ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly. The ellipsis will be treated in more detail in future courses.\nFor the remainder of this exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. This makes them optional arguments.\n\nInstructions 100 XP\n\nCalculate the mean of the element-wise sum of linkedin and facebook and store the result in a variable avg_sum.\nCalculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.\nPrint out both avg_sum and avg_sum_trimmed; can you spot the difference?\n\n\n\nex_023.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate the mean of the sum\navg_sum <- mean(linkedin + facebook)\n\n# Calculate the trimmed mean of the sum\n\navg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2)\n# Inspect both new variables\nprint(avg_sum)\nprint(avg_sum_trimmed)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function-3",
    "href": "intermediate_r_ch_03.html#use-a-function-3",
    "title": "3  Functions",
    "section": "3.4 Use a function (3)",
    "text": "3.4 Use a function (3)\nIn the video, Filip guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.\nIf you’ve had a good look at the documentation, you’ll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the default S3 method shows:\nmean(x, trim = 0, na.rm = FALSE, ...)\nLet’s see what happens if your vectors linkedin and facebook contain missing values (NA).\n\nInstructions 100 XP\n\nCalculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.\nCalculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.\n\n\n\nex_024.R\n\n # The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Basic average of linkedin\n\nmean(linkedin)\n# Advanced average of linkedin\nmean(linkedin, na.rm = TRUE)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#functions-inside-functions",
    "href": "intermediate_r_ch_03.html#functions-inside-functions",
    "title": "3  Functions",
    "section": "3.5 Functions inside functions",
    "text": "3.5 Functions inside functions\nYou already know that R functions return objects that you can then use somewhere else. This makes it easy to use functions inside functions, as you’ve seen before:\nspeed <- 31\nprint(paste(\"Your speed is\", speed))\nNotice that both the print() and paste() functions use the ellipsis - ... - as an argument. Can you figure out how they’re used?\n\nInstructions 100 XP\nUse abs() on linkedin - facebook to get the absolute differences between the daily LinkedIn and Facebook profile views. Place the call to abs() inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!\n\n\nex_025.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Calculate the mean absolute deviation\nmean(abs(linkedin - facebook), na.rm = TRUE)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function",
    "href": "intermediate_r_ch_03.html#write-your-own-function",
    "title": "3  Functions",
    "section": "3.6 Write your own function",
    "text": "3.6 Write your own function\nWow, things are getting serious… you’re about to write your own function! Before you have a go at it, have a look at the following function template:\nmy_fun <- function(arg1, arg2) {\n  body\n}\nNotice that this recipe uses the assignment operator (<-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you’re creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function.\n\nInstructions 100 XP\n\nCreate a function pow_two(): it takes one argument and returns that number squared (that number times itself).\nCall this newly defined function with 12 as input.\nNext, create a function sum_abs(), that takes two arguments and returns the sum of the absolute values of both arguments.\nFinally, call the function sum_abs() with arguments -2 and 3 afterwards.\n\n\n\nex_026.R\n\n# Create a function pow_two()\n\npow_two <- function(x) {\n    x ^ 2 \n}\n\n# Use the function\npow_two(12)\n\n# Create a function sum_abs()\n\nsum_abs <- function(x1, x2){\n    abs(x1 + x2)\n}\n\n# Use the function\nsum_abs(-2, 3)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function-2",
    "href": "intermediate_r_ch_03.html#write-your-own-function-2",
    "title": "3  Functions",
    "section": "3.7 Write your own function (2)",
    "text": "3.7 Write your own function (2)\nThere are situations in which your function does not require an input. Let’s say you want to write a function that gives us the random outcome of throwing a fair die:\nthrow_die <- function() {\n  number <- sample(1:6, size = 1)\n  number\n}\nthrow_die()\nUp to you to code a function that doesn’t take any arguments!\n\nInstructions 100 XP\n\nDefine a function, hello(). It prints out “Hi there!” and returns TRUE. It has no arguments.\nCall the function hello(), without specifying arguments of course.\n\n\n\nex_027.R\n\n# Define the function hello()\nhello <- function(){\n    print(\"Hi there!\")\n    return TRUE\n}\n\n# Call the function hello()\nhello()"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function-3",
    "href": "intermediate_r_ch_03.html#write-your-own-function-3",
    "title": "3  Functions",
    "section": "3.8 Write your own function (3)",
    "text": "3.8 Write your own function (3)\nDo you still remember the difference between an argument with and without default values? The usage section in the sd() documentation shows the following information:\nsd(x, na.rm = FALSE)\nThis tells us that x has to be defined for the sd() function to be called correctly, however, na.rm already has a default value. Not specifying this argument won’t cause an error.\nYou can define default argument values in your own R functions as well. You can use the following recipe to do so:\nmy_fun <- function(arg1, arg2 = val2) {\n  body\n}\nThe editor on the right already includes an extended version of the pow_two() function from before. Can you finish it?\n\nInstructions 100 XP\n\nAdd an optional argument, named print_info, that is TRUE by default.\nWrap an if construct around the print() function: this function should only be executed if print_info is TRUE.\nFeel free to experiment with the pow_two() function you’ve just coded.\n\n\n\nex_028.R\n\n# Finish the pow_two() function\npow_two <- function(x, print_info = TRUE) {\n  y <- x ^ 2\n  if(print_info){\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}"
  },
  {
    "objectID": "intermediate_r_ch_03.html#function-scoping",
    "href": "intermediate_r_ch_03.html#function-scoping",
    "title": "3  Functions",
    "section": "3.9 Function scoping",
    "text": "3.9 Function scoping\nAn issue that Filip did not discuss in the video is function scoping. It implies that variables that are defined inside a function are not accessible outside that function. Try running the following code and see if you understand the results:\npow_two <- function(x) {\n  y <- x ^ 2\n  return(y)\n}\npow_two(4)\ny\nx\ny was defined inside the pow_two() function and therefore it is not accessible outside of that function. This is also true for the function’s arguments of course - x in this case.\nWhich statement is correct about the following chunk of code? The function two_dice() is already available in the workspace.\ntwo_dice <- function() {\n  possibilities <- 1:6\n  dice1 <- sample(possibilities, size = 1)\n  dice2 <- sample(possibilities, size = 1)\n  dice1 + dice2\n}\n\nInstructions 50 XP\n\nWhatever the way of calling the two_dice() function, R won’t have access to dice1 and dice2 outside the function."
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-passes-arguments-by-value",
    "href": "intermediate_r_ch_03.html#r-passes-arguments-by-value",
    "title": "3  Functions",
    "section": "3.10 R passes arguments by value",
    "text": "3.10 R passes arguments by value\nThe title gives it away already: R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function. Let’s look at a simple example (try it in the console):\ntriple <- function(x) {\n  x <- 3*x\n  x\n}\na <- 5\ntriple(a)\na\nInside the triple() function, the argument x gets overwritten with its value times three. Afterwards this new x is returned. If you call this function with a variable a set equal to 5, you obtain 15. But did the value of a change? If R were to pass a to triple() by reference, the override of the x inside the R passes by value, so the R objects you pass to a function can never change unless you do an explicit assignment. a remains equal to 5, even after calling triple(a).\nCan you tell which one of the following statements is false about the following piece of code?\nincrement <- function(x, inc = 1) {\n  x <- x + inc\n  x\n}\ncount <- 5\na <- increment(count, 2)\nb <- increment(count)\ncount <- increment(count, 2)\n\nInstructions 50 XP\n\nIn the end, count will equal 10."
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-you-functional",
    "href": "intermediate_r_ch_03.html#r-you-functional",
    "title": "3  Functions",
    "section": "3.11 R you functional?",
    "text": "3.11 R you functional?\nNow that you’ve acquired some skills in defining functions with different types of arguments and return values, you should try to create more advanced functions. As you’ve noticed in the previous exercises, it’s perfectly possible to add control-flow constructs, loops and even other functions to your function body.\nRemember our social media example? The vectors linkedin and facebook are already defined in the workspace so you can get your hands dirty straight away. As a first step, you will be writing a function that can interpret a single value of this vector. In the next exercise, you will write another function that can handle an entire vector at once.\n\nInstructions 100 XP\n\nFinish the function definition for interpret(), that interprets the number of profile views on a single day:\nThe function takes one argument, num_views.\nIf num_views is greater than 15, the function prints out “You’re popular!” to the console and returns num_views.\nElse, the function prints out “Try to be more visible!” and returns 0. Finally, call the interpret() function twice: on the first value of the linkedin vector and on the second element of the facebook vector.\n\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\n\n# Define the interpret function\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Call the interpret function twice\ninterpret(linkedin[1])\ninterpret(facebook[1])"
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-you-functional-2",
    "href": "intermediate_r_ch_03.html#r-you-functional-2",
    "title": "3  Functions",
    "section": "3.12 R you functional? (2)",
    "text": "3.12 R you functional? (2)\nA possible implementation of the interpret() function has been provided for you. In this exercise you’ll be writing another function that will use the interpret() function to interpret all the data from your daily profile views inside a vector. Furthermore, your function will return the sum of views on popular days, if asked for. A for loop is ideal for iterating over all the vector elements. The ability to return the sum of views on popular days is something you can code through a function argument with a default value.\n\n3.12.1 Instructions 100 XP\nFinish the template for the interpret_all() function:\n\nMake return_sum an optional argument, that is TRUE by default.\nInside the for loop, iterate over all views: on every iteration, add the result of interpret(v) to count. Remember that interpret(v) returns v for popular days, and 0 otherwise. At the same time, interpret(v) will also do some printouts.\nFinish the if construct:\nIf return_sum is TRUE, return count.\nElse, return NULL.\n\nCall this newly defined function on both linkedin and facebook.\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# The interpret() can be used inside interpret_all()\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all <- function(views, return_sum = TRUE) {\n  count <- 0\n\n  for (v in views) {\n    count <- count + interpret(v)\n  }\n\n  if (return_sum) {\n    return (count)\n  } else {\n    return (NULL)\n  }\n}\n\n# Call the interpret_all() function on both linkedin and facebook\n\ninterpret_all(linkedin)\ninterpret_all(facebook)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#load-an-r-package",
    "href": "intermediate_r_ch_03.html#load-an-r-package",
    "title": "3  Functions",
    "section": "3.13 Load an R Package",
    "text": "3.13 Load an R Package\nThere are basically two extremely important functions when it comes down to R packages:\n\ninstall.packages(), which as you can expect, installs a given package.\nlibrary() which loads packages, i.e. attaches them to the search list on your R workspace.\n\nTo install packages, you need administrator privileges. This means that install.packages() will thus not work in the DataCamp interface. However, almost all CRAN packages are installed on our servers. You can load them with library().\nIn this exercise, you’ll be learning how to load the ggplot2 package, a powerful package for data visualization. You’ll use it to create a plot of two variables of the mtcars data frame. The data has already been prepared for you in the workspace.\nBefore starting, execute the following commands in the console:\n\nsearch(), to look at the currently attached packages and\nqplot(mtcars\\(wt, mtcars\\)hp), to build a plot of two variables of the mtcars data frame. An error should occur, because you haven’t loaded the ggplot2 package yet!\n\n\nInstructions 100 XP\n\nTo fix the error you saw in the console, load the ggplot2 package. Make sure you are loading (and not installing) the package!\nNow, retry calling the qplot() function with the same arguments.\nFinally, check out the currently attached packages again.\n\n\n\nex_030.R\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Retry the qplot() function\nqplot(mtcars$wt, mtcars$hp)\n\n# Check out the currently attached packages again\nsearch()"
  },
  {
    "objectID": "intermediate_r_ch_03.html#different-ways-to-load-a-package",
    "href": "intermediate_r_ch_03.html#different-ways-to-load-a-package",
    "title": "3  Functions",
    "section": "3.14 Different ways to load a package",
    "text": "3.14 Different ways to load a package\nThe library() and require() functions are not very picky when it comes down to argument types: both library(rjson) and library(\"rjson\") work perfectly fine for loading a package.\nHave a look at some more code chunks that (attempt to) load one or more packages:\n# Chunk 1\nlibrary(data.table)\nrequire(rjson)\n\n# Chunk 2\nlibrary(\"data.table\")\nrequire(rjson)\n\n# Chunk 3\nlibrary(data.table)\nrequire(rjson, character.only = TRUE)\n\n# Chunk 4\nlibrary(c(\"data.table\", \"rjson\"))\nSelect the option that lists all of the chunks that do not generate an error. The console is yours to experiment in.\n\nInstructions 50 XP\nPossible Answers: (1) and (2)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#function-documentation",
    "href": "intermediate_r_ch_03.html#function-documentation",
    "title": "3  Functions",
    "section": "3.1 Function documentation",
    "text": "3.1 Function documentation\nBefore even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sample() function, for example, you can use one of following R commands:\nhelp(sample)\n?sample\nIf you execute these commands, you’ll be redirected to <www.rdocumentation.org.>\nA quick hack to see the arguments of the sample() function is the args() function. Try it out in the console:\nargs(sample)\nIn the next exercises, you’ll be learning how to use the mean() function with increasing complexity. The first thing you’ll have to do is get acquainted with the mean() function.\n\nInstructions 100 XP\n\nConsult the documentation on the mean() function: ?mean or help(mean).\nInspect the arguments of the mean() function using the args() function.\n\n\n\nex_021.R\n\n# Consult the documentation on the mean() function\n\nhelp(mean)\n# Inspect the arguments of the mean() function\nargs(mean)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-lapply-with-a-built-in-r-function",
    "href": "intermediate_r_ch_03.html#use-lapply-with-a-built-in-r-function",
    "title": "3  Functions",
    "section": "3.15 Use lapply with a built-in R function",
    "text": "3.15 Use lapply with a built-in R function\nBefore you go about solving the exercises below, have a look at the documentation of the lapply() function. The Usage section shows the following expression:\nlapply(X, FUN, ...)\nTo put it generally, lapply takes a vector or list X, and applies the function FUN to each of its members. If FUN requires additional arguments, you pass them after you’ve specified X and FUN (...). The output of lapply() is a list, the same length as X, where each element is the result of applying FUN on the corresponding element of X.\nNow that you are truly brushing up on your data science skills, let’s revisit some of the most relevant figures in data science history. We’ve compiled a vector of famous mathematicians/statisticians and the year they were born. Up to you to extract some information!\n\nInstructions 100 XP\n\nHave a look at the strsplit() calls, that splits the strings in pioneers on the : sign. The result, split_math is a list of 4 character vectors: the first vector element represents the name, the second element the birth year.\nUse lapply() to convert the character vectors in split_math to lowercase letters: apply tolower() on each of the elements in split_math. Assign the result, which is a list, to a new variable split_low.\nFinally, inspect the contents of split_low with str().\n\n\n\nex_031.R\n\n# The vector pioneers has already been created for you\npioneers <- \n  c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\n\n# Split names from birth year\nsplit_math <- strsplit(pioneers, split = \":\")\n\n# Convert to lowercase strings: split_low\nsplit_low <- lapply(split_math, tolower)\n\n# Take a look at the structure of split_low\nstr(split_low)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-lapply-with-your-own-function",
    "href": "intermediate_r_ch_03.html#use-lapply-with-your-own-function",
    "title": "3  Functions",
    "section": "3.16 Use lapply with your own function",
    "text": "3.16 Use lapply with your own function\nAs Filip explained in the instructional video, you can use lapply() on your own functions as well. You just need to code a new function and make sure it is available in the workspace. After that, you can use the function inside lapply() just as you did with base R functions.\nIn the previous exercise you already used lapply() once to convert the information about your favorite pioneering statisticians to a list of vectors composed of two character strings. Let’s write some code to select the names and the birth years separately.\nThe sample code already includes code that defined select_first(), that takes a vector as input and returns the first element of this vector.\n\nInstructions 100 XP\n\nApply select_first() over the elements of split_low with lapply() and assign the result to a new variable names.\nNext, write a function select_second() that does the exact same thing for the second element of an inputted vector.\nFinally, apply the select_second() function over split_low and assign the output to the variable years.\n\n\n\nex_0.32.R\n\n# Code from previous exercise:\npioneers <- \n c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n# Write function select_first()\nselect_first <- function(x) {\n x[1]\n}\n# Apply select_first() over split_low: names\nnames <- lapply(split_low, select_first)\n# Write function select_second()\nselect_second <- function(x) {\n x[2]\n}\n# Apply select_second() over split_low: years\nyears <- lapply(split_low, select_second)\n\n## lapply and anonymous functions Writing your own functions and then using them inside lapply() is quite an accomplishment! But defining functions to use them only once is kind of overkill, isn’t it? That’s why you can use so-called anonymous functions in R.\nPreviously, you learned that functions in R are objects in their own right. This means that they aren’t automatically bound to a name. When you create a function, you can use the assignment operator to give the function a name. It’s perfectly possible, however, to not give the function a name. This is called an anonymous function:\n# Named function\ntriple <- function(x) { 3 * x }\n\n# Anonymous function with same implementation\nfunction(x) { 3 * x }\n\n# Use anonymous function inside lapply()\nlapply(list(1,2,3), function(x) { 3 * x })\nsplit_low is defined for you.\n\n\nInstructions 100 XP\n\nTransform the first call of lapply() such that it uses an anonymous function that does the same thing.\nIn a similar fashion, convert the second call of lapply to use an anonymous version of the select_second() function.\nRemove both the definitions of select_first() and select_second(), as they are no longer useful.\n\n\n\nex_033.R\n\n# split_low has been created for you\nsplit_low\n# Transform: use anonymous function inside lapply\nnames <- lapply(split_low, function(x){ x[1] })\n# Transform: use anonymous function inside lapply\nyears <- lapply(split_low, function(x){ x[2] })\n\n## Use lapply with additional arguments\nIn the video, the triple() function was transformed to the multiply() function to allow for a more generic approach. lapply() provides a way to handle functions that require more than one argument, such as the multiply() function:\nmultiply <- function(x, factor) {\n  x * factor\n}\nlapply(list(1,2,3), multiply, factor = 3)\nOn the right we’ve included a generic version of the select functions that you’ve coded earlier: select_el(). It takes a vector as its first argument, and an index as its second argument. It returns the vector’s element at the specified index.\n\n\nInstructions 100 XP\nUse lapply() twice to call select_el() over all elements in split_low: once with the index equal to 1 and a second time with the index equal to 2. Assign the result to names and years, respectively.\n\n\nex_034.R\n\n# Definition of split_low\npioneers <- \nc(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Generic select function\nselect_el <- function(x, index) {\n  x[index]\n}\n\n# Use lapply() twice on split_low: names and years\nnames <- lapply(split_low, select_el, 1)\nyears <- lapply(split_low, select_el, 2)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#apply-functions-that-return-null",
    "href": "intermediate_r_ch_03.html#apply-functions-that-return-null",
    "title": "3  Functions",
    "section": "3.17 Apply functions that return NULL",
    "text": "3.17 Apply functions that return NULL\nIn all of the previous exercises, it was assumed that the functions that were applied over vectors and lists actually returned a meaningful result. For example, the tolower() function simply returns the strings with the characters in lowercase. This won’t always be the case. Suppose you want to display the structure of every element of a list. You could use the str() function for this, which returns NULL:\nlapply(list(1, \"a\", TRUE), str)\nThis call actually returns a list, the same size as the input list, containing all NULL values. On the other hand calling\n  str(TRUE)\non its own prints only the structure of the logical to the console, not NULL. That’s because str() uses invisible() behind the scenes, which returns an invisible copy of the return value, NULL in this case. This prevents it from being printed when the result of str() is not assigned.\nWhat will the following code chunk return (split_low is already available in the workspace)? Try to reason about the result before simply executing it in the console!\nlapply(split_low, function(x) {\n  if (nchar(x[1]) > 5) {\n    return(NULL)\n  } else {\n    return(x[2])\n  }\n})"
  },
  {
    "objectID": "intermediate_r_ch_03.html#how-to-use-sapply",
    "href": "intermediate_r_ch_03.html#how-to-use-sapply",
    "title": "3  Functions",
    "section": "3.18 How to use sapply",
    "text": "3.18 How to use sapply\nYou can use sapply() similar to how you used lapply(). The first argument of sapply() is the list or vector X over which you want to apply a function, FUN. Potential additional arguments to this function are specified afterwards (...):\nsapply(X, FUN, ...)\nIn the next couple of exercises, you’ll be working with the variable temp, that contains temperature measurements for 7 days. temp is a list of length 7, where each element is a vector of length 5, representing 5 measurements on a given day. This variable has already been defined in the workspace: type str(temp) to see its structure.\n\n3.18.1 Instructions 100 XP\n\nUse lapply() to calculate the minimum (built-in function min()) of the temperature measurements for every day.\nDo the same thing but this time with sapply(). See how the output differs.\nUse lapply() to compute the the maximum (max()) temperature for each day. Again, use sapply() to solve the same question and see how lapply() and sapply() differ.\n\n\n\nex_035.R\n\n# temp has already been defined in the workspace\n\n# Use lapply() to find each day's minimum temperature\n\nlapply(temp, min)\n\n# Use sapply() to find each day's minimum temperature\nsapply(temp, min)\n\n# Use lapply() to find each day's maximum temperature\nlapply(temp, max)\n\n# Use sapply() to find each day's maximum temperature\nsapply(temp, max)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-your-own-function",
    "href": "intermediate_r_ch_03.html#sapply-with-your-own-function",
    "title": "3  Functions",
    "section": "3.19 sapply with your own function",
    "text": "3.19 sapply with your own function\nLike lapply(), sapply() allows you to use self-defined functions and apply them over a vector or a list:\nsapply(X, FUN, ...)\nHere, FUN can be one of R’s built-in functions, but it can also be a function you wrote. This self-written function can be defined before hand, or can be inserted directly as an anonymous function.\n\nInstructions 100 XP\n\nFinish the definition of extremes_avg(): it takes a vector of temperatures and calculates the average of the minimum and maximum temperatures of the vector.\nNext, use this function inside sapply() to apply it over the vectors inside temp.\nUse the same function over temp with lapply() and see how the outputs differ.\n\n\n\nex_036.R\n\n# temp is already defined in the workspace\n\n# Finish function definition of extremes_avg\nextremes_avg <- function(x) {\n  ( min(x) + max(x) ) / 2\n}\n\n# Apply extremes_avg() over temp using sapply()\nsapply(temp, extremes_avg)\n\n# Apply extremes_avg() over temp using lapply()\nlapply(temp, extremes_avg)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-function-returning-vector",
    "href": "intermediate_r_ch_03.html#sapply-with-function-returning-vector",
    "title": "3  Functions",
    "section": "3.20 sapply with function returning vector",
    "text": "3.20 sapply with function returning vector\nIn the previous exercises, you’ve seen how sapply() simplifies the list that lapply() would return by turning it into a vector. But what if the function you’re applying over a list or a vector returns a vector of length greater than 1? If you don’t remember from the video, don’t waste more time in the valley of ignorance and head over to the instructions!\n\nInstructions 100 XP\n\nFinish the definition of the extremes() function. It takes a vector of numerical values and returns a vector containing the minimum and maximum values of a given vector, with the names \"min\" and \"max\", respectively.\nApply this function over the vector temp using sapply().\nFinally, apply this function over the vector temp using lapply() as well.\n\n\n\nex_037.R\n\n# temp is already available in the workspace\n\n# Create a function that returns min and max of a vector: extremes\nextremes <- function(x) {\n  c(min = min(x), max = max(x))\n}\n\n# Apply extremes() over temp with sapply()\nsapply(temp, extremes)\n\n# Apply extremes() over temp with lapply()\nlapply(temp, extremes)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-cant-simplify-now-what",
    "href": "intermediate_r_ch_03.html#sapply-cant-simplify-now-what",
    "title": "3  Functions",
    "section": "3.21 sapply can’t simplify, now what?",
    "text": "3.21 sapply can’t simplify, now what?\nIt seems like we’ve hit the jackpot with sapply(). On all of the examples so far, sapply() was able to nicely simplify the rather bulky output of lapply(). But, as with life, there are things you can’t simplify. How does sapply() react?\nWe already created a function, below_zero(), that takes a vector of numerical values and returns a vector that only contains the values that are strictly below zero.\n\nInstructions 100 XP\n\nApply below_zero() over temp using sapply() and store the result in freezing_s.\nApply below_zero() over temp using lapply(). Save the resulting list in a variable freezing_l.\nCompare freezing_s to freezing_l using the identical() function.\n\n\n\nex_038.R\n\n# temp is already prepared for you in the workspace\n\n# Definition of below_zero()\nbelow_zero <- function(x) {\n  return(x[x < 0])\n}\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s <- sapply(temp, below_zero)\n\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l <- lapply(temp, below_zero)\n\n# Are freezing_s and freezing_l identical?\nidentical(freezing_s, freezing_s)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-functions-that-return-null",
    "href": "intermediate_r_ch_03.html#sapply-with-functions-that-return-null",
    "title": "3  Functions",
    "section": "3.22 sapply with functions that return NULL",
    "text": "3.22 sapply with functions that return NULL\nYou already have some apply tricks under your sleeve, but you’re surely hungry for some more, aren’t you? In this exercise, you’ll see how sapply() reacts when it is used to apply a function that returns NULL over a vector or a list.\nA function print_info(), that takes a vector and prints the average of this vector, has already been created for you. It uses the cat() function.\n\nInstructions 100 XP\n\nApply print_info() over the contents of temp with sapply().\nRepeat this process with lapply(). Do you notice the difference?\n\n\n\nex_039.R\n\n# temp is already available in the workspace\n\n# Definition of print_info()\nprint_info <- function(x) {\n  cat(\"The average temperature is\", mean(x), \"\\n\")\n}\n\n# Apply print_info() over temp using sapply()\nsapply(temp, print_info)\n\n# Apply print_info() over temp using lapply()\nlapply(temp, print_info)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function-1",
    "href": "intermediate_r_ch_03.html#use-a-function-1",
    "title": "3  Functions",
    "section": "3.23 Use a function",
    "text": "3.23 Use a function\nThe documentation on the mean() function gives us quite some information:\n\nThe mean() function computes the arithmetic mean.\nThe most general method takes multiple arguments: x and ....\nThe x argument should be a vector containing numeric, logical or time-related information.\n\nRemember that R can match arguments both by position and by name. Can you still remember the difference? You’ll find out in this exercise!\nOnce more, you’ll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been created for you.\n\nInstructions 100 XP\n\nCalculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!\nPrint out both avg_li and avg_fb.\n\n\n\nex_022.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate average number of views\navg_li <- mean(linkedin)\navg_fb <- mean(facebook)\n\n\n# Inspect avg_li and avg_fb\nprint(avg_li)\nprint(avg_fb)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function-2-1",
    "href": "intermediate_r_ch_03.html#use-a-function-2-1",
    "title": "3  Functions",
    "section": "3.24 Use a function (2)",
    "text": "3.24 Use a function (2)\nCheck the documentation on the mean() function again:\n?mean\nThe Usage section of the documentation includes two versions of the mean()function. The first usage,\nmean(x, ...)\nis the most general usage of the mean function. The ‘Default S3 method’, however, is:\nmean(x, trim = 0, na.rm = FALSE, ...)\nThe ... is called the ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly. The ellipsis will be treated in more detail in future courses.\nFor the remainder of this exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. This makes them optional arguments.\n\nInstructions 100 XP\n\nCalculate the mean of the element-wise sum of linkedin and facebook and store the result in a variable avg_sum.\nCalculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.\nPrint out both avg_sum and avg_sum_trimmed; can you spot the difference?\n\n\n\nex_023.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate the mean of the sum\navg_sum <- mean(linkedin + facebook)\n\n# Calculate the trimmed mean of the sum\n\navg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2)\n# Inspect both new variables\nprint(avg_sum)\nprint(avg_sum_trimmed)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-a-function-3-1",
    "href": "intermediate_r_ch_03.html#use-a-function-3-1",
    "title": "3  Functions",
    "section": "3.25 Use a function (3)",
    "text": "3.25 Use a function (3)\nIn the video, Filip guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.\nIf you’ve had a good look at the documentation, you’ll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the default S3 method shows:\nmean(x, trim = 0, na.rm = FALSE, ...)\nLet’s see what happens if your vectors linkedin and facebook contain missing values (NA).\n\nInstructions 100 XP\n\nCalculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.\nCalculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.\n\n\n\nex_024.R\n\n # The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Basic average of linkedin\n\nmean(linkedin)\n# Advanced average of linkedin\nmean(linkedin, na.rm = TRUE)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#functions-inside-functions-1",
    "href": "intermediate_r_ch_03.html#functions-inside-functions-1",
    "title": "3  Functions",
    "section": "3.26 Functions inside functions",
    "text": "3.26 Functions inside functions\nYou already know that R functions return objects that you can then use somewhere else. This makes it easy to use functions inside functions, as you’ve seen before:\nspeed <- 31\nprint(paste(\"Your speed is\", speed))\nNotice that both the print() and paste() functions use the ellipsis - ... - as an argument. Can you figure out how they’re used?\n\nInstructions 100 XP\nUse abs() on linkedin - facebook to get the absolute differences between the daily LinkedIn and Facebook profile views. Place the call to abs() inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!\n\n\nex_025.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Calculate the mean absolute deviation\nmean(abs(linkedin - facebook), na.rm = TRUE)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function-1",
    "href": "intermediate_r_ch_03.html#write-your-own-function-1",
    "title": "3  Functions",
    "section": "3.27 Write your own function",
    "text": "3.27 Write your own function\nWow, things are getting serious… you’re about to write your own function! Before you have a go at it, have a look at the following function template:\nmy_fun <- function(arg1, arg2) {\n  body\n}\nNotice that this recipe uses the assignment operator (<-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you’re creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function.\n\nInstructions 100 XP\n\nCreate a function pow_two(): it takes one argument and returns that number squared (that number times itself).\nCall this newly defined function with 12 as input.\nNext, create a function sum_abs(), that takes two arguments and returns the sum of the absolute values of both arguments.\nFinally, call the function sum_abs() with arguments -2 and 3 afterwards.\n\n\n\nex_026.R\n\n# Create a function pow_two()\n\npow_two <- function(x) {\n    x ^ 2 \n}\n\n# Use the function\npow_two(12)\n\n# Create a function sum_abs()\n\nsum_abs <- function(x1, x2){\n    abs(x1 + x2)\n}\n\n# Use the function\nsum_abs(-2, 3)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function-2-1",
    "href": "intermediate_r_ch_03.html#write-your-own-function-2-1",
    "title": "3  Functions",
    "section": "3.28 Write your own function (2)",
    "text": "3.28 Write your own function (2)\nThere are situations in which your function does not require an input. Let’s say you want to write a function that gives us the random outcome of throwing a fair die:\nthrow_die <- function() {\n  number <- sample(1:6, size = 1)\n  number\n}\nthrow_die()\nUp to you to code a function that doesn’t take any arguments!\n\nInstructions 100 XP\n\nDefine a function, hello(). It prints out “Hi there!” and returns TRUE. It has no arguments.\nCall the function hello(), without specifying arguments of course.\n\n\n\nex_027.R\n\n# Define the function hello()\nhello <- function(){\n    print(\"Hi there!\")\n    return TRUE\n}\n\n# Call the function hello()\nhello()"
  },
  {
    "objectID": "intermediate_r_ch_03.html#write-your-own-function-3-1",
    "href": "intermediate_r_ch_03.html#write-your-own-function-3-1",
    "title": "3  Functions",
    "section": "3.29 Write your own function (3)",
    "text": "3.29 Write your own function (3)\nDo you still remember the difference between an argument with and without default values? The usage section in the sd() documentation shows the following information:\nsd(x, na.rm = FALSE)\nThis tells us that x has to be defined for the sd() function to be called correctly, however, na.rm already has a default value. Not specifying this argument won’t cause an error.\nYou can define default argument values in your own R functions as well. You can use the following recipe to do so:\nmy_fun <- function(arg1, arg2 = val2) {\n  body\n}\nThe editor on the right already includes an extended version of the pow_two() function from before. Can you finish it?\n\nInstructions 100 XP\n\nAdd an optional argument, named print_info, that is TRUE by default.\nWrap an if construct around the print() function: this function should only be executed if print_info is TRUE.\nFeel free to experiment with the pow_two() function you’ve just coded.\n\n\n\nex_028.R\n\n# Finish the pow_two() function\npow_two <- function(x, print_info = TRUE) {\n  y <- x ^ 2\n  if(print_info){\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}"
  },
  {
    "objectID": "intermediate_r_ch_03.html#function-scoping-1",
    "href": "intermediate_r_ch_03.html#function-scoping-1",
    "title": "3  Functions",
    "section": "3.30 Function scoping",
    "text": "3.30 Function scoping\nAn issue that Filip did not discuss in the video is function scoping. It implies that variables that are defined inside a function are not accessible outside that function. Try running the following code and see if you understand the results:\npow_two <- function(x) {\n  y <- x ^ 2\n  return(y)\n}\npow_two(4)\ny\nx\ny was defined inside the pow_two() function and therefore it is not accessible outside of that function. This is also true for the function’s arguments of course - x in this case.\nWhich statement is correct about the following chunk of code? The function two_dice() is already available in the workspace.\ntwo_dice <- function() {\n  possibilities <- 1:6\n  dice1 <- sample(possibilities, size = 1)\n  dice2 <- sample(possibilities, size = 1)\n  dice1 + dice2\n}\n\nInstructions 50 XP\n\nWhatever the way of calling the two_dice() function, R won’t have access to dice1 and dice2 outside the function."
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-passes-arguments-by-value-1",
    "href": "intermediate_r_ch_03.html#r-passes-arguments-by-value-1",
    "title": "3  Functions",
    "section": "3.31 R passes arguments by value",
    "text": "3.31 R passes arguments by value\nThe title gives it away already: R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function. Let’s look at a simple example (try it in the console):\ntriple <- function(x) {\n  x <- 3*x\n  x\n}\na <- 5\ntriple(a)\na\nInside the triple() function, the argument x gets overwritten with its value times three. Afterwards this new x is returned. If you call this function with a variable a set equal to 5, you obtain 15. But did the value of a change? If R were to pass a to triple() by reference, the override of the x inside the R passes by value, so the R objects you pass to a function can never change unless you do an explicit assignment. a remains equal to 5, even after calling triple(a).\nCan you tell which one of the following statements is false about the following piece of code?\nincrement <- function(x, inc = 1) {\n  x <- x + inc\n  x\n}\ncount <- 5\na <- increment(count, 2)\nb <- increment(count)\ncount <- increment(count, 2)\n\nInstructions 50 XP\n\nIn the end, count will equal 10."
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-you-functional-1",
    "href": "intermediate_r_ch_03.html#r-you-functional-1",
    "title": "3  Functions",
    "section": "3.32 R you functional?",
    "text": "3.32 R you functional?\nNow that you’ve acquired some skills in defining functions with different types of arguments and return values, you should try to create more advanced functions. As you’ve noticed in the previous exercises, it’s perfectly possible to add control-flow constructs, loops and even other functions to your function body.\nRemember our social media example? The vectors linkedin and facebook are already defined in the workspace so you can get your hands dirty straight away. As a first step, you will be writing a function that can interpret a single value of this vector. In the next exercise, you will write another function that can handle an entire vector at once.\n\nInstructions 100 XP\n\nFinish the function definition for interpret(), that interprets the number of profile views on a single day:\nThe function takes one argument, num_views.\nIf num_views is greater than 15, the function prints out “You’re popular!” to the console and returns num_views.\nElse, the function prints out “Try to be more visible!” and returns 0. Finally, call the interpret() function twice: on the first value of the linkedin vector and on the second element of the facebook vector.\n\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\n\n# Define the interpret function\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Call the interpret function twice\ninterpret(linkedin[1])\ninterpret(facebook[1])"
  },
  {
    "objectID": "intermediate_r_ch_03.html#r-you-functional-2-1",
    "href": "intermediate_r_ch_03.html#r-you-functional-2-1",
    "title": "3  Functions",
    "section": "3.33 R you functional? (2)",
    "text": "3.33 R you functional? (2)\nA possible implementation of the interpret() function has been provided for you. In this exercise you’ll be writing another function that will use the interpret() function to interpret all the data from your daily profile views inside a vector. Furthermore, your function will return the sum of views on popular days, if asked for. A for loop is ideal for iterating over all the vector elements. The ability to return the sum of views on popular days is something you can code through a function argument with a default value.\n\n3.33.1 Instructions 100 XP\nFinish the template for the interpret_all() function:\n\nMake return_sum an optional argument, that is TRUE by default.\nInside the for loop, iterate over all views: on every iteration, add the result of interpret(v) to count. Remember that interpret(v) returns v for popular days, and 0 otherwise. At the same time, interpret(v) will also do some printouts.\nFinish the if construct:\nIf return_sum is TRUE, return count.\nElse, return NULL.\n\nCall this newly defined function on both linkedin and facebook.\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# The interpret() can be used inside interpret_all()\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all <- function(views, return_sum = TRUE) {\n  count <- 0\n\n  for (v in views) {\n    count <- count + interpret(v)\n  }\n\n  if (return_sum) {\n    return (count)\n  } else {\n    return (NULL)\n  }\n}\n\n# Call the interpret_all() function on both linkedin and facebook\n\ninterpret_all(linkedin)\ninterpret_all(facebook)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#load-an-r-package-1",
    "href": "intermediate_r_ch_03.html#load-an-r-package-1",
    "title": "3  Functions",
    "section": "3.34 Load an R Package",
    "text": "3.34 Load an R Package\nThere are basically two extremely important functions when it comes down to R packages:\n\ninstall.packages(), which as you can expect, installs a given package.\nlibrary() which loads packages, i.e. attaches them to the search list on your R workspace.\n\nTo install packages, you need administrator privileges. This means that install.packages() will thus not work in the DataCamp interface. However, almost all CRAN packages are installed on our servers. You can load them with library().\nIn this exercise, you’ll be learning how to load the ggplot2 package, a powerful package for data visualization. You’ll use it to create a plot of two variables of the mtcars data frame. The data has already been prepared for you in the workspace.\nBefore starting, execute the following commands in the console:\n\nsearch(), to look at the currently attached packages and\nqplot(mtcars\\(wt, mtcars\\)hp), to build a plot of two variables of the mtcars data frame. An error should occur, because you haven’t loaded the ggplot2 package yet!\n\n\nInstructions 100 XP\n\nTo fix the error you saw in the console, load the ggplot2 package. Make sure you are loading (and not installing) the package!\nNow, retry calling the qplot() function with the same arguments.\nFinally, check out the currently attached packages again.\n\n\n\nex_030.R\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Retry the qplot() function\nqplot(mtcars$wt, mtcars$hp)\n\n# Check out the currently attached packages again\nsearch()"
  },
  {
    "objectID": "intermediate_r_ch_03.html#different-ways-to-load-a-package-1",
    "href": "intermediate_r_ch_03.html#different-ways-to-load-a-package-1",
    "title": "3  Functions",
    "section": "3.35 Different ways to load a package",
    "text": "3.35 Different ways to load a package\nThe library() and require() functions are not very picky when it comes down to argument types: both library(rjson) and library(\"rjson\") work perfectly fine for loading a package.\nHave a look at some more code chunks that (attempt to) load one or more packages:\n# Chunk 1\nlibrary(data.table)\nrequire(rjson)\n\n# Chunk 2\nlibrary(\"data.table\")\nrequire(rjson)\n\n# Chunk 3\nlibrary(data.table)\nrequire(rjson, character.only = TRUE)\n\n# Chunk 4\nlibrary(c(\"data.table\", \"rjson\"))\nSelect the option that lists all of the chunks that do not generate an error. The console is yours to experiment in.\n\nInstructions 50 XP\nPossible Answers: (1) and (2)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-lapply-with-a-built-in-r-function-1",
    "href": "intermediate_r_ch_03.html#use-lapply-with-a-built-in-r-function-1",
    "title": "3  Functions",
    "section": "3.36 Use lapply with a built-in R function",
    "text": "3.36 Use lapply with a built-in R function\nBefore you go about solving the exercises below, have a look at the documentation of the lapply() function. The Usage section shows the following expression:\nlapply(X, FUN, ...)\nTo put it generally, lapply takes a vector or list X, and applies the function FUN to each of its members. If FUN requires additional arguments, you pass them after you’ve specified X and FUN (...). The output of lapply() is a list, the same length as X, where each element is the result of applying FUN on the corresponding element of X.\nNow that you are truly brushing up on your data science skills, let’s revisit some of the most relevant figures in data science history. We’ve compiled a vector of famous mathematicians/statisticians and the year they were born. Up to you to extract some information!\n\nInstructions 100 XP\n\nHave a look at the strsplit() calls, that splits the strings in pioneers on the : sign. The result, split_math is a list of 4 character vectors: the first vector element represents the name, the second element the birth year.\nUse lapply() to convert the character vectors in split_math to lowercase letters: apply tolower() on each of the elements in split_math. Assign the result, which is a list, to a new variable split_low.\nFinally, inspect the contents of split_low with str().\n\n\n\nex_031.R\n\n# The vector pioneers has already been created for you\npioneers <- \n  c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\n\n# Split names from birth year\nsplit_math <- strsplit(pioneers, split = \":\")\n\n# Convert to lowercase strings: split_low\nsplit_low <- lapply(split_math, tolower)\n\n# Take a look at the structure of split_low\nstr(split_low)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#use-lapply-with-your-own-function-1",
    "href": "intermediate_r_ch_03.html#use-lapply-with-your-own-function-1",
    "title": "3  Functions",
    "section": "3.37 Use lapply with your own function",
    "text": "3.37 Use lapply with your own function\nAs Filip explained in the instructional video, you can use lapply() on your own functions as well. You just need to code a new function and make sure it is available in the workspace. After that, you can use the function inside lapply() just as you did with base R functions.\nIn the previous exercise you already used lapply() once to convert the information about your favorite pioneering statisticians to a list of vectors composed of two character strings. Let’s write some code to select the names and the birth years separately.\nThe sample code already includes code that defined select_first(), that takes a vector as input and returns the first element of this vector.\n\nInstructions 100 XP\n\nApply select_first() over the elements of split_low with lapply() and assign the result to a new variable names.\nNext, write a function select_second() that does the exact same thing for the second element of an inputted vector.\nFinally, apply the select_second() function over split_low and assign the output to the variable years.\n\n\n\nex_0.32.R\n\n# Code from previous exercise:\npioneers <- \n c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n# Write function select_first()\nselect_first <- function(x) {\n x[1]\n}\n# Apply select_first() over split_low: names\nnames <- lapply(split_low, select_first)\n# Write function select_second()\nselect_second <- function(x) {\n x[2]\n}\n# Apply select_second() over split_low: years\nyears <- lapply(split_low, select_second)\n\n## lapply and anonymous functions Writing your own functions and then using them inside lapply() is quite an accomplishment! But defining functions to use them only once is kind of overkill, isn’t it? That’s why you can use so-called anonymous functions in R.\nPreviously, you learned that functions in R are objects in their own right. This means that they aren’t automatically bound to a name. When you create a function, you can use the assignment operator to give the function a name. It’s perfectly possible, however, to not give the function a name. This is called an anonymous function:\n# Named function\ntriple <- function(x) { 3 * x }\n\n# Anonymous function with same implementation\nfunction(x) { 3 * x }\n\n# Use anonymous function inside lapply()\nlapply(list(1,2,3), function(x) { 3 * x })\nsplit_low is defined for you.\n\n\nInstructions 100 XP\n\nTransform the first call of lapply() such that it uses an anonymous function that does the same thing.\nIn a similar fashion, convert the second call of lapply to use an anonymous version of the select_second() function.\nRemove both the definitions of select_first() and select_second(), as they are no longer useful.\n\n\n\nex_033.R\n\n# split_low has been created for you\nsplit_low\n# Transform: use anonymous function inside lapply\nnames <- lapply(split_low, function(x){ x[1] })\n# Transform: use anonymous function inside lapply\nyears <- lapply(split_low, function(x){ x[2] })\n\n## Use lapply with additional arguments\nIn the video, the triple() function was transformed to the multiply() function to allow for a more generic approach. lapply() provides a way to handle functions that require more than one argument, such as the multiply() function:\nmultiply <- function(x, factor) {\n  x * factor\n}\nlapply(list(1,2,3), multiply, factor = 3)\nOn the right we’ve included a generic version of the select functions that you’ve coded earlier: select_el(). It takes a vector as its first argument, and an index as its second argument. It returns the vector’s element at the specified index.\n\n\nInstructions 100 XP\nUse lapply() twice to call select_el() over all elements in split_low: once with the index equal to 1 and a second time with the index equal to 2. Assign the result to names and years, respectively.\n\n\nex_034.R\n\n# Definition of split_low\npioneers <- \nc(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Generic select function\nselect_el <- function(x, index) {\n  x[index]\n}\n\n# Use lapply() twice on split_low: names and years\nnames <- lapply(split_low, select_el, 1)\nyears <- lapply(split_low, select_el, 2)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#apply-functions-that-return-null-1",
    "href": "intermediate_r_ch_03.html#apply-functions-that-return-null-1",
    "title": "3  Functions",
    "section": "3.38 Apply functions that return NULL",
    "text": "3.38 Apply functions that return NULL\nIn all of the previous exercises, it was assumed that the functions that were applied over vectors and lists actually returned a meaningful result. For example, the tolower() function simply returns the strings with the characters in lowercase. This won’t always be the case. Suppose you want to display the structure of every element of a list. You could use the str() function for this, which returns NULL:\nlapply(list(1, \"a\", TRUE), str)\nThis call actually returns a list, the same size as the input list, containing all NULL values. On the other hand calling\n  str(TRUE)\non its own prints only the structure of the logical to the console, not NULL. That’s because str() uses invisible() behind the scenes, which returns an invisible copy of the return value, NULL in this case. This prevents it from being printed when the result of str() is not assigned.\nWhat will the following code chunk return (split_low is already available in the workspace)? Try to reason about the result before simply executing it in the console!\nlapply(split_low, function(x) {\n  if (nchar(x[1]) > 5) {\n    return(NULL)\n  } else {\n    return(x[2])\n  }\n})"
  },
  {
    "objectID": "intermediate_r_ch_03.html#how-to-use-sapply-1",
    "href": "intermediate_r_ch_03.html#how-to-use-sapply-1",
    "title": "3  Functions",
    "section": "3.39 How to use sapply",
    "text": "3.39 How to use sapply\nYou can use sapply() similar to how you used lapply(). The first argument of sapply() is the list or vector X over which you want to apply a function, FUN. Potential additional arguments to this function are specified afterwards (...):\nsapply(X, FUN, ...)\nIn the next couple of exercises, you’ll be working with the variable temp, that contains temperature measurements for 7 days. temp is a list of length 7, where each element is a vector of length 5, representing 5 measurements on a given day. This variable has already been defined in the workspace: type str(temp) to see its structure.\n\n3.39.1 Instructions 100 XP\n\nUse lapply() to calculate the minimum (built-in function min()) of the temperature measurements for every day.\nDo the same thing but this time with sapply(). See how the output differs.\nUse lapply() to compute the the maximum (max()) temperature for each day. Again, use sapply() to solve the same question and see how lapply() and sapply() differ.\n\n\n\nex_035.R\n\n# temp has already been defined in the workspace\n\n# Use lapply() to find each day's minimum temperature\n\nlapply(temp, min)\n\n# Use sapply() to find each day's minimum temperature\nsapply(temp, min)\n\n# Use lapply() to find each day's maximum temperature\nlapply(temp, max)\n\n# Use sapply() to find each day's maximum temperature\nsapply(temp, max)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-your-own-function-1",
    "href": "intermediate_r_ch_03.html#sapply-with-your-own-function-1",
    "title": "3  Functions",
    "section": "3.40 sapply with your own function",
    "text": "3.40 sapply with your own function\nLike lapply(), sapply() allows you to use self-defined functions and apply them over a vector or a list:\nsapply(X, FUN, ...)\nHere, FUN can be one of R’s built-in functions, but it can also be a function you wrote. This self-written function can be defined before hand, or can be inserted directly as an anonymous function.\n\nInstructions 100 XP\n\nFinish the definition of extremes_avg(): it takes a vector of temperatures and calculates the average of the minimum and maximum temperatures of the vector.\nNext, use this function inside sapply() to apply it over the vectors inside temp.\nUse the same function over temp with lapply() and see how the outputs differ.\n\n\n\nex_035.R\n\n# temp is already defined in the workspace\n\n# Finish function definition of extremes_avg\nextremes_avg <- function(x) {\n  ( min(x) + max(x) ) / 2\n}\n\n# Apply extremes_avg() over temp using sapply()\nsapply(temp, extremes_avg)\n\n# Apply extremes_avg() over temp using lapply()\nlapply(temp, extremes_avg)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-function-returning-vector-1",
    "href": "intermediate_r_ch_03.html#sapply-with-function-returning-vector-1",
    "title": "3  Functions",
    "section": "3.41 sapply with function returning vector",
    "text": "3.41 sapply with function returning vector\nIn the previous exercises, you’ve seen how sapply() simplifies the list that lapply() would return by turning it into a vector. But what if the function you’re applying over a list or a vector returns a vector of length greater than 1? If you don’t remember from the video, don’t waste more time in the valley of ignorance and head over to the instructions!\n\nInstructions 100 XP\n\nFinish the definition of the extremes() function. It takes a vector of numerical values and returns a vector containing the minimum and maximum values of a given vector, with the names \"min\" and \"max\", respectively.\nApply this function over the vector temp using sapply().\nFinally, apply this function over the vector temp using lapply() as well.\n\n\n\nex_035.r\n\n# temp is already available in the workspace\n\n# Create a function that returns min and max of a vector: extremes\nextremes <- function(x) {\n  c(min = min(x), max = max(x))\n}\n\n# Apply extremes() over temp with sapply()\nsapply(temp, extremes)\n\n# Apply extremes() over temp with lapply()\nlapply(temp, extremes)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-cant-simplify-now-what-1",
    "href": "intermediate_r_ch_03.html#sapply-cant-simplify-now-what-1",
    "title": "3  Functions",
    "section": "3.42 sapply can’t simplify, now what?",
    "text": "3.42 sapply can’t simplify, now what?\nIt seems like we’ve hit the jackpot with sapply(). On all of the examples so far, sapply() was able to nicely simplify the rather bulky output of lapply(). But, as with life, there are things you can’t simplify. How does sapply() react?\nWe already created a function, below_zero(), that takes a vector of numerical values and returns a vector that only contains the values that are strictly below zero.\n\nInstructions 100 XP\n\nApply below_zero() over temp using sapply() and store the result in freezing_s.\nApply below_zero() over temp using lapply(). Save the resulting list in a variable freezing_l.\nCompare freezing_s to freezing_l using the identical() function.\n\n# temp is already prepared for you in the workspace\n\n# Definition of below_zero()\nbelow_zero <- function(x) {\n  return(x[x < 0])\n}\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s <- sapply(temp, below_zero)\n\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l <- lapply(temp, below_zero)\n\n# Are freezing_s and freezing_l identical?\nidentical(freezing_s, freezing_s)"
  },
  {
    "objectID": "intermediate_r_ch_03.html#sapply-with-functions-that-return-null-1",
    "href": "intermediate_r_ch_03.html#sapply-with-functions-that-return-null-1",
    "title": "3  Functions",
    "section": "3.43 sapply with functions that return NULL",
    "text": "3.43 sapply with functions that return NULL\nYou already have some apply tricks under your sleeve, but you’re surely hungry for some more, aren’t you? In this exercise, you’ll see how sapply() reacts when it is used to apply a function that returns NULL over a vector or a list.\nA function print_info(), that takes a vector and prints the average of this vector, has already been created for you. It uses the cat() function.\n\nInstructions 100 XP\n\nApply print_info() over the contents of temp with sapply().\nRepeat this process with lapply(). Do you notice the difference?\n\n\n:::"
  },
  {
    "objectID": "intermediate_r_ch_03.html#reverse-engineering-sapply",
    "href": "intermediate_r_ch_03.html#reverse-engineering-sapply",
    "title": "3  Functions",
    "section": "3.23 Reverse engineering sapply",
    "text": "3.23 Reverse engineering sapply\nsapply(list(runif (10), runif (10)), \n       function(x) c(min = min(x), mean = mean(x), max = max(x)))\nWithout going straight to the console to run the code, try to reason through which of the following statements are correct and why.\n\nsapply() can’t simplify the result that lapply() would return, and thus returns a list of vectors.\nThis code generates a matrix with 3 rows and 2 columns.\nThe function that is used inside sapply() is anonymous.\nThe resulting data structure does not contain any names.\n\nSelect the option that lists all correct statements."
  }
]