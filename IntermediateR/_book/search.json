[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IntermediateR",
    "section": "",
    "text": "Preface\nCourse Description\nIntermediate R is the next stop on your journey in mastering the R programming language. In this R training, you will learn about conditional statements, loops, and functions to power your own R scripts. Next, make your R code more efficient and readable using the apply functions. Finally, the utilities chapter gets you up to speed with regular expressions in R, data structure manipulations, and times and dates. This course will allow you to take the next step in advancing your overall knowledge and capabilities while programming in R."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Grade Rubric\nThe course encloenses 81 excercise and 14 videos that results in 6950 xp.\n\n\n\n\nname\nXP\n\n\n\nEquality\n100\n\n\nGreater and less than\n100\n\n\nCompare Vectors\n100\n\n\nCompare Matrices\n100\n\n\n& and |\n100\n\n\n& and | (2)\n100\n\n\nBlend it all together\n100\n\n\nThe is statement\n100\n\n\nAdd and else\n100\n\n\nCustomize furhter: else if\n100\n\n\nTake Control\n100"
  },
  {
    "objectID": "intermediate_r_ch_01.html#equality",
    "href": "intermediate_r_ch_01.html#equality",
    "title": "1  Conditionals and Control Flow",
    "section": "1.1 Equality",
    "text": "1.1 Equality\nThe most basic form of comparison is equality. Let’s briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).\n3 == (2 + 1)\n\"intermediate\" != \"r\"\nTRUE != FALSE\n\"Rchitect\" != \"rchitect\"\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!\n\nInstructions 100 XP\n\nIn the editor on the right, write R code to see if TRUE equals FALSE.\nLikewise, check if -6 * 14 is not equal to 17 - 101.\nNext up: comparison of character strings. Ask R whether the strings “useR” and “user” are equal.\nFinally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\n\nex_001.R\n\n# Comparison of logicals\nTRUE == FALSE\n\n# Comparison of numerics\n\n-6 * 14 != 17 -101\n# Comparison of character strings\n\"useR\" == \"user\"\n\n# Compare a logical with a numeric\nTRUE == 1"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "intermediate_r_ch_01.html#greater-and-less-than",
    "href": "intermediate_r_ch_01.html#greater-and-less-than",
    "title": "1  Conditionals and Control Flow",
    "section": "1.2 Greater and less than",
    "text": "1.2 Greater and less than\nApart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:\n(1 + 2) > 4\n\"dog\" < \"Cats\"\nTRUE <= FALSE\nRemember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE is treated as 1 for arithmetic, and FALSE is treated as 0. Therefore, FALSE < TRUE is TRUE.\n\nInstructions 100 XP\n\nWrite R expressions to check whether:\n-6 * 5 + 2 is greater than or equal to -10 + 1.\n“raining” is less than or equal to “raining dogs”.\nTRUE is greater than FALSE.\n\n\n\nex_002.R\n\n# Comparison of numerics\n\n-6 * 5 + 2 >= -10 +1\n\n# Comparison of character strings\n\"raining\" <=  \"raining dogs\"\n\n# Comparison of logicals\n\nTRUE > FALSE"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-vectors",
    "href": "intermediate_r_ch_01.html#compare-vectors",
    "title": "1  Conditionals and Control Flow",
    "section": "1.3 Compare vectors",
    "text": "1.3 Compare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nLet’s go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.\n\n1.3.1 Instructions 100 XP\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:\n\nOn which days did the number of LinkedIn profile views exceed 15? When was your\nLinkedIn profile viewed only 5 times or fewer? When was your LinkedIn profile\nvisited more often than your Facebook profile?\n\n\n\nex003.R\n\n# The linkedin and facebook vectors have already been created for you\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Popular days\n\nlinkedin > 15\n# Quiet days\nlinkedin <= 5\n\n# LinkedIn more popular than Facebook\nlinkedin > facebook"
  },
  {
    "objectID": "intermediate_r_ch_01.html#compare-matrices",
    "href": "intermediate_r_ch_01.html#compare-matrices",
    "title": "1  Conditionals and Control Flow",
    "section": "1.4 Compare matrices",
    "text": "1.4 Compare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.\n\n1.4.1 Instructions 100 XP\nUsing the relational operators you’ve learned so far, try to discover the following:\n\nWhen were the views exactly equal to 13? Use the views matrix to return a logical matrix.\nFor which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\n\nex_004.R\n\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n# When does views equal 13?\n\nviews == 13\n# When is views less than or equal to 14?\n\nviews <= 14"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and",
    "href": "intermediate_r_ch_01.html#and",
    "title": "1  Conditionals and Control Flow",
    "section": "1.5 & and |",
    "text": "1.5 & and |\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\nTRUE & TRUE\nFALSE | TRUE\n5 <= 5 & 2 < 3\n3 < 4 | 7 < 6\nWatch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you’ll need 3 < x & x < 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have been pre-defined for you.\n\nInstructions 100 XP\nWrite R expressions to solve the following questions concerning the variable last:\n\nIs last under 5 or above 10?\nIs last between 15 and 20, excluding 15 but including 20?\n\n\n\nex_005.R\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n\n# Is last under 5 or above 10?\nlast < 5 | last > 10\n\n# Is last between 15 (exclusive) and 20 (inclusive)?\nlast > 15 | last < 20"
  },
  {
    "objectID": "intermediate_r_ch_01.html#and-2",
    "href": "intermediate_r_ch_01.html#and-2",
    "title": "1  Conditionals and Control Flow",
    "section": "1.6 & and | (2)",
    "text": "1.6 & and | (2)\nLike relational operators, logical operators work perfectly fine with vectors and matrices.\nBoth the vectors linkedin and facebook are available again. Also a matrix -views- has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?\n\nInstructions 100 XP\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?"
  }
]