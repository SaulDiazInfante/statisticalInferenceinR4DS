[
  {
    "objectID": "introduction_to_r_05.html#whats-a-data-frame",
    "href": "introduction_to_r_05.html#whats-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.1 What’s a data frame?",
    "text": "5.1 What’s a data frame?\nYou may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type. Back then, your dataset on Star Wars only contained numeric elements.\nWhen doing a market research survey, however, you often have questions such as:\n\n‘Are you married?’ or ‘yes/no’ questions (logical)\n‘How old are you?’ (numeric)\n‘What is your opinion on this product?’ or other ‘open-ended’ questions\n(character)\n… The output, namely the respondents’ answers to the questions formulated above, is a dataset of different data types. You will often find yourself working with datasets that contain different data types instead of only one.\n\nA data frame has the variables of a dataset as columns and the observations as rows. This will be a familiar concept for those coming from different statistical software packages such as SAS or SPSS.\nInstructions 100 XP\n\nSubmit the answer. The data from the built-in example data frame mtcars will be printed to the console.\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "href": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "title": "\n5  Data frames\n",
    "section": "\n5.2 Quick, have a look at your dataset",
    "text": "5.2 Quick, have a look at your dataset\nWow, that is a lot of cars!\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\nSo how to do this in R? Well, the function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your dataset.\nBoth head() and tail() print a top line called the ‘header’, which contains the names of the different variables in your dataset.\nInstructions 100 XP\n\nCall head() on the mtcars dataset to have a look at the header and the first observations.\n\n\nex_42.R\n\n# Call head() on mtcars\nhead(mtcars)"
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "title": "4  Factors",
    "section": "4.1 What’s a factor and why would you use it?",
    "text": "4.1 What’s a factor and why would you use it?\nIn this chapter you dive into the wonderful world of factors.\nThe term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.\nIt is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)\nA good example of a categorical variable is sex. In many circumstances you can limit the sex categories to “Male” or “Female”. (Sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphroditic animals, or different cultural norms, but you will always have a finite number of categories.)\n\nInstructions 100 XP\nAssign to variable theory the value “factors”.\n\n\nex_33.R\n\n# Assign to the variable theory what this chapter is about!\ntheory <- \"factors\""
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "title": "4  Factors",
    "section": "4.2 What’s a factor and why would you use it? (2)",
    "text": "4.2 What’s a factor and why would you use it? (2)\nTo create factors in R, you make use of the function factor(). First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example, sex_vector contains the sex of 5 different individuals:\nsex_vector <- c(\"Male\",\"Female\",\"Female\",\"Male\",\"Male\")\nIt is clear that there are two categories, or in R-terms ‘factor levels’, at work here: “Male” and “Female”.\nThe function factor() will encode the vector as a factor:\nfactor_sex_vector <- factor(sex_vector)\n\nInstructions 100 XP\n\nConvert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector\nPrint out factor_sex_vector and assert that R prints out the factor levels below the actual values.\n\n\n\nex_34.R\n\n# Sex vector\nsex_vector <- c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\")\n\n# Convert sex_vector to a factor\nfactor_sex_vector <- factor(sex_vector)\n\n# Print out factor_sex_vector\nprint(factor_sex_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "title": "4  Factors",
    "section": "4.3 What’s a factor and why would you use it? (3)",
    "text": "4.3 What’s a factor and why would you use it? (3)\nThere are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.\nA nominal variable is a categorical variable without an implied order. This means that it is impossible to say that ‘one is worth more than the other’. For example, think of the categorical variable animals_vector with the categories “Elephant”, “Giraffe”, “Donkey” and “Horse”. Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).\nIn contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: “Low”, “Medium” and “High”. Here it is obvious that “Medium” stands above “Low”, and “High” stands above “Medium”.\n\nInstructions 100 XP\nSubmit the answer to check how R constructs and prints nominal and ordinal variables. Do not worry if you do not understand all the code just yet, we will get to that.\n\n\nex_35.R\n\n# Animals\nanimals_vector <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n\n# Temperature\ntemperature_vector <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- \n    factor(\n        temperature_vector,\n        order = TRUE,\n        levels = c(\"Low\", \"Medium\", \"High\")\n    )\nfactor_temperature_vector"
  },
  {
    "objectID": "introduction_to_r_04.html#factor-levels",
    "href": "introduction_to_r_04.html#factor-levels",
    "title": "4  Factors",
    "section": "4.4 Factor levels",
    "text": "4.4 Factor levels\nWhen you first get a dataset, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels():\nlevels(factor_vector) <- c(\"name1\", \"name2\",...)\nA good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, “M” and “F”. (You usually need more categories for survey data; either way, you use a factor to store the categorical data.)\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nRecording the sex with the abbreviations \"M\" and \"F\" can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analyzing the data. At that point, you will often want to change the factor levels to \"Male\" and \"Female\" instead of \"M\" and \"F\" for clarity.\nWatch out: the order with which you assign the levels is important. If you type levels(factor_survey_vector), you’ll see that it outputs [1] \"F\" \"M\". If you don’t specify the levels of the factor when creating the vector, R will automatically assign them alphabetically. To correctly map \"F\" to \"Female\" and \"M\" to \"Male\", the levels should be set to c(\"Female\", \"Male\"), in this order.\n\nInstructions 100 XP\n\nCheck out the code that builds a factor vector from survey_vector. You should use factor_survey_vector in the next instruction.\nChange the factor levels of factor_survey_vector to c(\"Female\", \"Male\"). Mind the order of the vector elements here.\n\n\n\nex_36.R\n\n# Code to build factor_survey_vector\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n# Specify the levels of factor_survey_vector\nlevels(factor_survey_vector) <- c(\"F\", \"M\")\n\nlevels(factor_survey_vector) <-  c(\"Female\", \"Male\")"
  },
  {
    "objectID": "introduction_to_r_04.html#summarizing-a-factor",
    "href": "introduction_to_r_04.html#summarizing-a-factor",
    "title": "4  Factors",
    "section": "4.5 Summarizing a factor",
    "text": "4.5 Summarizing a factor\nAfter finishing this course, one of your favorite functions in R will be summary (). This will give you a quick overview of the contents of a variable:\nsummary(my_var)\nGoing back to our survey, you would like to know how many \"Male\" responses you have in your study, and how many \"Female\" responses. The summary() function gives you the answer to this question.\n\nInstructions 100 XP\nAsk a summary() of the survey_vector and factor_survey_vector. Interpret the results of both vectors. Are they both equally useful in this case?\n\n\nex_37.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\nfactor_survey_vector\n\n# Generate summary for survey_vector\nsummary(survey_vector)\n\n# Generate summary for factor_survey_vector\nsummary(factor_survey_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#battle-of-the-sexes",
    "href": "introduction_to_r_04.html#battle-of-the-sexes",
    "title": "4  Factors",
    "section": "4.6 Battle of the sexes",
    "text": "4.6 Battle of the sexes\nYou might wonder what happens when you try to compare elements of a factor. In factor_survey_vector you have a factor with two levels: \"Male\" and \"Female\". But how does R value these relative to each other?\n\nInstructions 100 XP\nRead the code in the editor and submit the answer to test if male is greater than (>) female.\n\n\nex_38.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\n# Male\nmale <- factor_survey_vector[1]\n\n# Female\nfemale <- factor_survey_vector[2]\n\n# Battle of the sexes: Male 'larger' than female?\nmale > female"
  },
  {
    "objectID": "introduction_to_r_04.html#ordered-factors",
    "href": "introduction_to_r_04.html#ordered-factors",
    "title": "4  Factors",
    "section": "4.7 Ordered factors",
    "text": "4.7 Ordered factors\nOrdered factors Since \"Male\" and \"Female\" are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.\nBut this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R…\nLet us say that you are leading a research team of five data analysts and that you want to evaluate their performance. To do this, you track their speed, evaluate each analyst as \"slow\", \"medium\" or \"fast\", and save the results in speed_vector.\n\nInstructions 100 XP\nAs a first step, assign speed_vector a vector with 5 entries, one for each analyst. Each entry should be either \"slow\", \"medium\", or \"fast\". Use the list below:\n\nAnalyst 1 is medium,\nAnalyst 2 is slow,\nAnalyst 3 is slow,\nAnalyst 4 is medium and\nAnalyst 5 is fast.\n\nNo need to specify these are factors yet.\n\n\nex_39.R\n\nspeed_vector <- c(\n    \"medium\",\n    \"slow\",\n    \"slow\",\n    \"medium\",\n    \"fast\"\n)"
  },
  {
    "objectID": "introduction_to_r_04.html#ordered-factors-2",
    "href": "introduction_to_r_04.html#ordered-factors-2",
    "title": "4  Factors",
    "section": "4.8 Ordered factors (2)",
    "text": "4.8 Ordered factors (2)\nspeed_vector should be converted to an ordinal factor since its categories have a natural ordering. By default, the function factor() transforms speed_vector into an unordered factor. To create an ordered factor, you have to add two additional arguments: ordered and levels.\nfactor(some_vector,\n       ordered = TRUE,\n       levels = c(\"lev1\", \"lev2\" ...))\nBy setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. With the argument levels you give the values of the factor in the correct order.\n\nInstructions 100 XP\nFrom speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c(\"slow\", \"medium\", \"fast\").\n\n\nex_40.R\n\n# Create speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\n\n# Convert speed_vector to ordered factor vector\nfactor_speed_vector <- \nfactor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n)\n\n\n# Print factor_speed_vector\nfactor_speed_vector\nsummary(factor_speed_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#comparing-ordered-factors",
    "href": "introduction_to_r_04.html#comparing-ordered-factors",
    "title": "4  Factors",
    "section": "4.9 Comparing ordered factors",
    "text": "4.9 Comparing ordered factors\nHaving a bad day at work, ‘data analyst number two’ enters your office and starts complaining that ‘data analyst number five’ is slowing down the entire project. Since you know that ‘data analyst number two’ has the reputation of being a smarty-pants, you first decide to check if his statement is true.\nThe fact that factor_speed_vector is now ordered enables us to compare different elements (the data analysts in this case). You can simply do this by using the well-known operators.\n\nInstructions 100 XP\n\nUse [2] to select from factor_speed_vector the factor value for the second data analyst. Store it as da2.\nUse [5] to select the factor_speed_vector factor value for the fifth data analyst. Store it as da5.\nCheck if da2 is greater than da5; simply print out the result. Remember that you can use the > operator to check whether one element is larger than the other.\n\n\n\nex_41.R\n\n# Create factor_speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\nfactor_speed_vector <- \n  factor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n  )\n\n# Factor value for second data analyst\nda2 <- factor_speed_vector[2]\n\n# Factor value for fifth data analyst\nda5 <- factor_speed_vector[5]\n\n# Is data analyst 2 faster than data analyst 5?\n print(da2 > da5)"
  },
  {
    "objectID": "introduction_to_r_05.html#have-a-look-at-the-structure",
    "href": "introduction_to_r_05.html#have-a-look-at-the-structure",
    "title": "\n5  Data frames\n",
    "section": "\n5.3 Have a look at the structure",
    "text": "5.3 Have a look at the structure\nAnother method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.\nFor a data frame it tells you:\n\nThe total number of observations (e.g. 32 car types)\nThe total number of variables (e.g. 11 car features)\nA full list of the variables names (e.g. mpg, cyl … )\nThe data type of each variable (e.g. num)\nThe first observations\n\nApplying the str() function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\nInstructions 100 XP\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\nex_43.R\n\nstr(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset-1",
    "href": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.13 Quick, have a look at your dataset",
    "text": "5.13 Quick, have a look at your dataset\nWow, that is a lot of cars!\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\nSo how to do this in R? Well, the function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your dataset.\nBoth head() and tail() print a top line called the ‘header’, which contains the names of the different variables in your dataset.\nInstructions 100 XP\n\nCall head() on the mtcars dataset to have a look at the header and the first observations.\n\n\nex_42.R\n\n# Call head() on mtcars\nhead(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#have-a-look-at-the-structure-1",
    "href": "introduction_to_r_05.html#have-a-look-at-the-structure-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.14 Have a look at the structure",
    "text": "5.14 Have a look at the structure\nAnother method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.\nFor a data frame it tells you:\n\nThe total number of observations (e.g. 32 car types)\nThe total number of variables (e.g. 11 car features)\nA full list of the variables names (e.g. mpg, cyl … )\nThe data type of each variable (e.g. num)\nThe first observations\n\nApplying the str() function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\nInstructions 100 XP\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\nex_43.R\n\nstr(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#section",
    "href": "introduction_to_r_05.html#section",
    "title": "\n5  Data frames\n",
    "section": "\n5.12 ",
    "text": "5.12"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame",
    "href": "introduction_to_r_05.html#creating-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.4 Creating a data frame",
    "text": "5.4 Creating a data frame\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\nThe type of planet (Terrestrial or Gas Giant).\nThe planet’s diameter relative to the diameter of the Earth.\nThe planet’s rotation across the sun relative to that of the Earth.\nIf the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\nYou construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don’t forget that it is possible (and likely) that they contain different types of data.\nInstructions 100 XP\n\nUse the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.\n\n\nex_44.R\n\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-1",
    "href": "introduction_to_r_05.html#creating-a-data-frame-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.15 Creating a data frame",
    "text": "5.15 Creating a data frame\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\nThe type of planet (Terrestrial or Gas Giant).\nThe planet’s diameter relative to the diameter of the Earth.\nThe planet’s rotation across the sun relative to that of the Earth.\nIf the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\nYou construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don’t forget that it is possible (and likely) that they contain different types of data.\nInstructions 100 XP\n\nUse the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.\n\n\nex_44.R\n\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-2",
    "href": "introduction_to_r_05.html#creating-a-data-frame-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.5 Creating a data frame (2)",
    "text": "5.5 Creating a data frame (2)\nThe planets_df data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\nInstructions 100 XP\n\nUse str() to investigate the structure of the new planets_df variable.\n\n\nex_45.R\n\nstr(planets_df)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-2-1",
    "href": "introduction_to_r_05.html#creating-a-data-frame-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.16 Creating a data frame (2)",
    "text": "5.16 Creating a data frame (2)\nThe planets_df data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\nInstructions 100 XP\n\nUse str() to investigate the structure of the new planets_df variable.\n\n\nex_45.R\n\nstr(planets_df)"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements",
    "title": "\n5  Data frames\n",
    "section": "\n5.6 Selection of data frame elements",
    "text": "5.6 Selection of data frame elements\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n\nmy_df[1,2] selects the value at the first row and second column in my_df.\n\nmy_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n\nSometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row. Let us now apply this technique on planets_df!\nInstructions 100 XP\n\n\nFrom planets_df, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\nFrom planets_df, select all data on Mars (the fourth row). Simply print out the result.\n\n\n\nex_46.R\n\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-1",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.17 Selection of data frame elements",
    "text": "5.17 Selection of data frame elements\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n\nmy_df[1,2] selects the value at the first row and second column in my_df.\n\nmy_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n\nSometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row. Let us now apply this technique on planets_df!\n\n5.17.1 Instructions 100 XP\n\n\nFrom planets_df, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\nFrom planets_df, select all data on Mars (the fourth row). Simply print out the result.\n\n\n\nex_46.R\n\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.7 Selection of data frame elements (2)",
    "text": "5.7 Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.\nSuppose you want to select the first three elements of the type column. One way to do this is\nplanets_df[1:3, 2]\nA possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\nplanets_df[1:3,\"type\"]\nInstructions 100 XP\n\nSelect and print out the first 5 values in the \"diameter\" column of planets_df.\n\n\nex_47.R\n\nprint(planets_df[1:5, \"diameter\"])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-2-1",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.18 Selection of data frame elements (2)",
    "text": "5.18 Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.\nSuppose you want to select the first three elements of the type column. One way to do this is\nplanets_df[1:3, 2]\nA possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\nplanets_df[1:3,\"type\"]\nInstructions 100 XP\n\nSelect and print out the first 5 values in the \"diameter\" column of planets_df.\n\n\nex_47.R\n\nprint(planets_df[1:5, \"diameter\"])"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings",
    "href": "introduction_to_r_05.html#only-planets-with-rings",
    "title": "\n5  Data frames\n",
    "section": "\n5.8 Only planets with rings",
    "text": "5.8 Only planets with rings\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:\nplanets_df[,3]\nplanets_df[,\"diameter\"]\nHowever, there is a short-cut. If your columns have names, you can use the $ sign:\nplanets_df$diameter\nInstructions 100 XP\n\n\nUse the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.\nPrint out rings_vector to see if you got it right.\n\n\n\nex_48.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.19 Only planets with rings",
    "text": "5.19 Only planets with rings\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:\nplanets_df[,3]\nplanets_df[,\"diameter\"]\nHowever, there is a short-cut. If your columns have names, you can use the $ sign:\nplanets_df$diameter\nInstructions 100 XP\n\n\nUse the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.\nPrint out rings_vector to see if you got it right.\n\n\n\nex_48.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)"
  },
  {
    "objectID": "introduction_to_r_05.html#instructions",
    "href": "introduction_to_r_05.html#instructions",
    "title": "\n5  Data frames\n",
    "section": "\n5.9 Instructions",
    "text": "5.9 Instructions\n100 XP Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector. Print out rings_vector to see if you got it right."
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-2",
    "href": "introduction_to_r_05.html#only-planets-with-rings-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.9 Only planets with rings (2)",
    "text": "5.9 Only planets with rings (2)\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\nIf you type rings_vector in the console, you get:\n\n[1] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE\n\nThis means that the first four observations (or planets) do not have a ring (FALSE), but the other four do (TRUE). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let’s try to use rings_vector to select the data for the four planets with rings.\nInstructions 100 XP\n\nThe code in the editor selects the name column of all planets that have rings. Adapt the code so that instead of only the name column, all columns for planets that have rings are selected.\n\n\nex_49.R\n\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-2-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.20 Only planets with rings (2)",
    "text": "5.20 Only planets with rings (2)\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\nIf you type rings_vector in the console, you get:\n\n[1] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE\n\nThis means that the first four observations (or planets) do not have a ring (FALSE), but the other four do (TRUE). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let’s try to use rings_vector to select the data for the four planets with rings.\nInstructions 100 XP\n\nThe code in the editor selects the name column of all planets that have rings. Adapt the code so that instead of only the name column, all columns for planets that have rings are selected.\n\n\nex_49.R\n\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "href": "introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "title": "\n5  Data frames\n",
    "section": "\n5.10 Only planets with rings but shorter",
    "text": "5.10 Only planets with rings but shorter\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (planets_df) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\nNow, let us move up one level and use the function subset(). You should see the subset() function as a short-cut to do exactly the same as what you did in the previous exercises.\nsubset(my_df, subset = some_condition)\nThe first argument of subset() specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn’t need the rings_vector!\nsubset(planets_df, subset = rings)\nInstructions 100 XP\n\nUse subset() on planets_df to select planets that have a diameter smaller than Earth. Because the diameter variable is a relative measure of the planet’s diameter w.r.t that of planet Earth, your condition is diameter < 1.\n\n\nex_50.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-but-shorter-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-but-shorter-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.21 Only planets with rings but shorter",
    "text": "5.21 Only planets with rings but shorter\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (planets_df) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\nNow, let us move up one level and use the function subset(). You should see the subset() function as a short-cut to do exactly the same as what you did in the previous exercises.\nsubset(my_df, subset = some_condition)\nThe first argument of subset() specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn’t need the rings_vector!\nsubset(planets_df, subset = rings)\nInstructions 100 XP\n\nUse subset() on planets_df to select planets that have a diameter smaller than Earth. Because the diameter variable is a relative measure of the planet’s diameter w.r.t that of planet Earth, your condition is diameter < 1.\n\n\nex_50.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting",
    "href": "introduction_to_r_05.html#sorting",
    "title": "\n5  Data frames\n",
    "section": "\n5.11 Sorting",
    "text": "5.11 Sorting\nMaking and creating rankings is one of mankind’s favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function order().\norder() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\na <- c(100, 10, 1000)\norder(a)\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).\nThis means we can use the output of order(a) to reshuffle a:\na[order(a)]\nInstructions 100 XP\n\nExperiment with the order() function in the console. Submit the answer when you are ready to continue.\n\n\nex_51.R\n\nx <- rnorm(10)\norder(x)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-1",
    "href": "introduction_to_r_05.html#sorting-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.22 Sorting",
    "text": "5.22 Sorting\nMaking and creating rankings is one of mankind’s favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function order().\norder() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\na <- c(100, 10, 1000)\norder(a)\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).\nThis means we can use the output of order(a) to reshuffle a:\na[order(a)]\nInstructions 100 XP\n\nExperiment with the order() function in the console. Submit the answer when you are ready to continue.\n\n\nex_51.R\n\nx <- rnorm(10)\norder(x)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-your-data-frame",
    "href": "introduction_to_r_05.html#sorting-your-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.12 Sorting your data frame",
    "text": "5.12 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column.\nInstructions 100 XP\n\n\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.\nNow reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n\nex_52.R\n\n# planets_df is pre-loaded in your workspace\n\n# Use order() to create positions\npositions <-  order(planets_df$diameter)\n\n# Use positions to sort planets_df\nplanets_df[positions, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-your-data-frame-1",
    "href": "introduction_to_r_05.html#sorting-your-data-frame-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.23 Sorting your data frame",
    "text": "5.23 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column.\n\n5.23.1 Instructions 100 XP\n\n\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.\nNow reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n\nex_52.R\n\n\n\n:::"
  }
]