[
  {
    "objectID": "introduction_to_r_05.html#whats-a-data-frame",
    "href": "introduction_to_r_05.html#whats-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.1 What’s a data frame?",
    "text": "5.1 What’s a data frame?\nYou may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type. Back then, your dataset on Star Wars only contained numeric elements.\nWhen doing a market research survey, however, you often have questions such as:\n\n‘Are you married?’ or ‘yes/no’ questions (logical)\n‘How old are you?’ (numeric)\n‘What is your opinion on this product?’ or other ‘open-ended’ questions\n(character)\n… The output, namely the respondents’ answers to the questions formulated above, is a dataset of different data types. You will often find yourself working with datasets that contain different data types instead of only one.\n\nA data frame has the variables of a dataset as columns and the observations as rows. This will be a familiar concept for those coming from different statistical software packages such as SAS or SPSS.\nInstructions 100 XP\n\nSubmit the answer. The data from the built-in example data frame mtcars will be printed to the console.\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "href": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "title": "\n5  Data frames\n",
    "section": "\n5.2 Quick, have a look at your dataset",
    "text": "5.2 Quick, have a look at your dataset\nWow, that is a lot of cars!\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\nSo how to do this in R? Well, the function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your dataset.\nBoth head() and tail() print a top line called the ‘header’, which contains the names of the different variables in your dataset.\nInstructions 100 XP\n\nCall head() on the mtcars dataset to have a look at the header and the first observations.\n\n\nex_42.R\n\n# Call head() on mtcars\nhead(mtcars)"
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "title": "4  Factors",
    "section": "4.1 What’s a factor and why would you use it?",
    "text": "4.1 What’s a factor and why would you use it?\nIn this chapter you dive into the wonderful world of factors.\nThe term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.\nIt is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)\nA good example of a categorical variable is sex. In many circumstances you can limit the sex categories to “Male” or “Female”. (Sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphroditic animals, or different cultural norms, but you will always have a finite number of categories.)\n\nInstructions 100 XP\nAssign to variable theory the value “factors”.\n\n\nex_33.R\n\n# Assign to the variable theory what this chapter is about!\ntheory <- \"factors\""
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "title": "4  Factors",
    "section": "4.2 What’s a factor and why would you use it? (2)",
    "text": "4.2 What’s a factor and why would you use it? (2)\nTo create factors in R, you make use of the function factor(). First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example, sex_vector contains the sex of 5 different individuals:\nsex_vector <- c(\"Male\",\"Female\",\"Female\",\"Male\",\"Male\")\nIt is clear that there are two categories, or in R-terms ‘factor levels’, at work here: “Male” and “Female”.\nThe function factor() will encode the vector as a factor:\nfactor_sex_vector <- factor(sex_vector)\n\nInstructions 100 XP\n\nConvert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector\nPrint out factor_sex_vector and assert that R prints out the factor levels below the actual values.\n\n\n\nex_34.R\n\n# Sex vector\nsex_vector <- c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\")\n\n# Convert sex_vector to a factor\nfactor_sex_vector <- factor(sex_vector)\n\n# Print out factor_sex_vector\nprint(factor_sex_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "href": "introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "title": "4  Factors",
    "section": "4.3 What’s a factor and why would you use it? (3)",
    "text": "4.3 What’s a factor and why would you use it? (3)\nThere are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.\nA nominal variable is a categorical variable without an implied order. This means that it is impossible to say that ‘one is worth more than the other’. For example, think of the categorical variable animals_vector with the categories “Elephant”, “Giraffe”, “Donkey” and “Horse”. Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).\nIn contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: “Low”, “Medium” and “High”. Here it is obvious that “Medium” stands above “Low”, and “High” stands above “Medium”.\n\nInstructions 100 XP\nSubmit the answer to check how R constructs and prints nominal and ordinal variables. Do not worry if you do not understand all the code just yet, we will get to that.\n\n\nex_35.R\n\n# Animals\nanimals_vector <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n\n# Temperature\ntemperature_vector <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- \n    factor(\n        temperature_vector,\n        order = TRUE,\n        levels = c(\"Low\", \"Medium\", \"High\")\n    )\nfactor_temperature_vector"
  },
  {
    "objectID": "introduction_to_r_04.html#factor-levels",
    "href": "introduction_to_r_04.html#factor-levels",
    "title": "4  Factors",
    "section": "4.4 Factor levels",
    "text": "4.4 Factor levels\nWhen you first get a dataset, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels():\nlevels(factor_vector) <- c(\"name1\", \"name2\",...)\nA good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, “M” and “F”. (You usually need more categories for survey data; either way, you use a factor to store the categorical data.)\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nRecording the sex with the abbreviations \"M\" and \"F\" can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analyzing the data. At that point, you will often want to change the factor levels to \"Male\" and \"Female\" instead of \"M\" and \"F\" for clarity.\nWatch out: the order with which you assign the levels is important. If you type levels(factor_survey_vector), you’ll see that it outputs [1] \"F\" \"M\". If you don’t specify the levels of the factor when creating the vector, R will automatically assign them alphabetically. To correctly map \"F\" to \"Female\" and \"M\" to \"Male\", the levels should be set to c(\"Female\", \"Male\"), in this order.\n\nInstructions 100 XP\n\nCheck out the code that builds a factor vector from survey_vector. You should use factor_survey_vector in the next instruction.\nChange the factor levels of factor_survey_vector to c(\"Female\", \"Male\"). Mind the order of the vector elements here.\n\n\n\nex_36.R\n\n# Code to build factor_survey_vector\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n# Specify the levels of factor_survey_vector\nlevels(factor_survey_vector) <- c(\"F\", \"M\")\n\nlevels(factor_survey_vector) <-  c(\"Female\", \"Male\")"
  },
  {
    "objectID": "introduction_to_r_04.html#summarizing-a-factor",
    "href": "introduction_to_r_04.html#summarizing-a-factor",
    "title": "4  Factors",
    "section": "4.5 Summarizing a factor",
    "text": "4.5 Summarizing a factor\nAfter finishing this course, one of your favorite functions in R will be summary (). This will give you a quick overview of the contents of a variable:\nsummary(my_var)\nGoing back to our survey, you would like to know how many \"Male\" responses you have in your study, and how many \"Female\" responses. The summary() function gives you the answer to this question.\n\nInstructions 100 XP\nAsk a summary() of the survey_vector and factor_survey_vector. Interpret the results of both vectors. Are they both equally useful in this case?\n\n\nex_37.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\nfactor_survey_vector\n\n# Generate summary for survey_vector\nsummary(survey_vector)\n\n# Generate summary for factor_survey_vector\nsummary(factor_survey_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#battle-of-the-sexes",
    "href": "introduction_to_r_04.html#battle-of-the-sexes",
    "title": "4  Factors",
    "section": "4.6 Battle of the sexes",
    "text": "4.6 Battle of the sexes\nYou might wonder what happens when you try to compare elements of a factor. In factor_survey_vector you have a factor with two levels: \"Male\" and \"Female\". But how does R value these relative to each other?\n\nInstructions 100 XP\nRead the code in the editor and submit the answer to test if male is greater than (>) female.\n\n\nex_38.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\n# Male\nmale <- factor_survey_vector[1]\n\n# Female\nfemale <- factor_survey_vector[2]\n\n# Battle of the sexes: Male 'larger' than female?\nmale > female"
  },
  {
    "objectID": "introduction_to_r_04.html#ordered-factors",
    "href": "introduction_to_r_04.html#ordered-factors",
    "title": "4  Factors",
    "section": "4.7 Ordered factors",
    "text": "4.7 Ordered factors\nOrdered factors Since \"Male\" and \"Female\" are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.\nBut this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R…\nLet us say that you are leading a research team of five data analysts and that you want to evaluate their performance. To do this, you track their speed, evaluate each analyst as \"slow\", \"medium\" or \"fast\", and save the results in speed_vector.\n\nInstructions 100 XP\nAs a first step, assign speed_vector a vector with 5 entries, one for each analyst. Each entry should be either \"slow\", \"medium\", or \"fast\". Use the list below:\n\nAnalyst 1 is medium,\nAnalyst 2 is slow,\nAnalyst 3 is slow,\nAnalyst 4 is medium and\nAnalyst 5 is fast.\n\nNo need to specify these are factors yet.\n\n\nex_39.R\n\nspeed_vector <- c(\n    \"medium\",\n    \"slow\",\n    \"slow\",\n    \"medium\",\n    \"fast\"\n)"
  },
  {
    "objectID": "introduction_to_r_04.html#ordered-factors-2",
    "href": "introduction_to_r_04.html#ordered-factors-2",
    "title": "4  Factors",
    "section": "4.8 Ordered factors (2)",
    "text": "4.8 Ordered factors (2)\nspeed_vector should be converted to an ordinal factor since its categories have a natural ordering. By default, the function factor() transforms speed_vector into an unordered factor. To create an ordered factor, you have to add two additional arguments: ordered and levels.\nfactor(some_vector,\n       ordered = TRUE,\n       levels = c(\"lev1\", \"lev2\" ...))\nBy setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. With the argument levels you give the values of the factor in the correct order.\n\nInstructions 100 XP\nFrom speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c(\"slow\", \"medium\", \"fast\").\n\n\nex_40.R\n\n# Create speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\n\n# Convert speed_vector to ordered factor vector\nfactor_speed_vector <- \nfactor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n)\n\n\n# Print factor_speed_vector\nfactor_speed_vector\nsummary(factor_speed_vector)"
  },
  {
    "objectID": "introduction_to_r_04.html#comparing-ordered-factors",
    "href": "introduction_to_r_04.html#comparing-ordered-factors",
    "title": "4  Factors",
    "section": "4.9 Comparing ordered factors",
    "text": "4.9 Comparing ordered factors\nHaving a bad day at work, ‘data analyst number two’ enters your office and starts complaining that ‘data analyst number five’ is slowing down the entire project. Since you know that ‘data analyst number two’ has the reputation of being a smarty-pants, you first decide to check if his statement is true.\nThe fact that factor_speed_vector is now ordered enables us to compare different elements (the data analysts in this case). You can simply do this by using the well-known operators.\n\nInstructions 100 XP\n\nUse [2] to select from factor_speed_vector the factor value for the second data analyst. Store it as da2.\nUse [5] to select the factor_speed_vector factor value for the fifth data analyst. Store it as da5.\nCheck if da2 is greater than da5; simply print out the result. Remember that you can use the > operator to check whether one element is larger than the other.\n\n\n\nex_41.R\n\n# Create factor_speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\nfactor_speed_vector <- \n  factor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n  )\n\n# Factor value for second data analyst\nda2 <- factor_speed_vector[2]\n\n# Factor value for fifth data analyst\nda5 <- factor_speed_vector[5]\n\n# Is data analyst 2 faster than data analyst 5?\n print(da2 > da5)"
  },
  {
    "objectID": "introduction_to_r_05.html#have-a-look-at-the-structure",
    "href": "introduction_to_r_05.html#have-a-look-at-the-structure",
    "title": "\n5  Data frames\n",
    "section": "\n5.3 Have a look at the structure",
    "text": "5.3 Have a look at the structure\nAnother method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.\nFor a data frame it tells you:\n\nThe total number of observations (e.g. 32 car types)\nThe total number of variables (e.g. 11 car features)\nA full list of the variables names (e.g. mpg, cyl … )\nThe data type of each variable (e.g. num)\nThe first observations\n\nApplying the str() function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\nInstructions 100 XP\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\nex_43.R\n\nstr(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset-1",
    "href": "introduction_to_r_05.html#quick-have-a-look-at-your-dataset-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.13 Quick, have a look at your dataset",
    "text": "5.13 Quick, have a look at your dataset\nWow, that is a lot of cars!\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\nSo how to do this in R? Well, the function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your dataset.\nBoth head() and tail() print a top line called the ‘header’, which contains the names of the different variables in your dataset.\nInstructions 100 XP\n\nCall head() on the mtcars dataset to have a look at the header and the first observations.\n\n\nex_42.R\n\n# Call head() on mtcars\nhead(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#have-a-look-at-the-structure-1",
    "href": "introduction_to_r_05.html#have-a-look-at-the-structure-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.14 Have a look at the structure",
    "text": "5.14 Have a look at the structure\nAnother method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.\nFor a data frame it tells you:\n\nThe total number of observations (e.g. 32 car types)\nThe total number of variables (e.g. 11 car features)\nA full list of the variables names (e.g. mpg, cyl … )\nThe data type of each variable (e.g. num)\nThe first observations\n\nApplying the str() function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\nInstructions 100 XP\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\nex_43.R\n\nstr(mtcars)"
  },
  {
    "objectID": "introduction_to_r_05.html#section",
    "href": "introduction_to_r_05.html#section",
    "title": "\n5  Data frames\n",
    "section": "\n5.12 ",
    "text": "5.12"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame",
    "href": "introduction_to_r_05.html#creating-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.4 Creating a data frame",
    "text": "5.4 Creating a data frame\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\nThe type of planet (Terrestrial or Gas Giant).\nThe planet’s diameter relative to the diameter of the Earth.\nThe planet’s rotation across the sun relative to that of the Earth.\nIf the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\nYou construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don’t forget that it is possible (and likely) that they contain different types of data.\nInstructions 100 XP\n\nUse the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.\n\n\nex_44.R\n\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-1",
    "href": "introduction_to_r_05.html#creating-a-data-frame-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.15 Creating a data frame",
    "text": "5.15 Creating a data frame\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\nThe type of planet (Terrestrial or Gas Giant).\nThe planet’s diameter relative to the diameter of the Earth.\nThe planet’s rotation across the sun relative to that of the Earth.\nIf the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\nYou construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don’t forget that it is possible (and likely) that they contain different types of data.\nInstructions 100 XP\n\nUse the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.\n\n\nex_44.R\n\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-2",
    "href": "introduction_to_r_05.html#creating-a-data-frame-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.5 Creating a data frame (2)",
    "text": "5.5 Creating a data frame (2)\nThe planets_df data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\nInstructions 100 XP\n\nUse str() to investigate the structure of the new planets_df variable.\n\n\nex_45.R\n\nstr(planets_df)"
  },
  {
    "objectID": "introduction_to_r_05.html#creating-a-data-frame-2-1",
    "href": "introduction_to_r_05.html#creating-a-data-frame-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.16 Creating a data frame (2)",
    "text": "5.16 Creating a data frame (2)\nThe planets_df data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\nInstructions 100 XP\n\nUse str() to investigate the structure of the new planets_df variable.\n\n\nex_45.R\n\nstr(planets_df)"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements",
    "title": "\n5  Data frames\n",
    "section": "\n5.6 Selection of data frame elements",
    "text": "5.6 Selection of data frame elements\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n\nmy_df[1,2] selects the value at the first row and second column in my_df.\n\nmy_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n\nSometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row. Let us now apply this technique on planets_df!\nInstructions 100 XP\n\n\nFrom planets_df, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\nFrom planets_df, select all data on Mars (the fourth row). Simply print out the result.\n\n\n\nex_46.R\n\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-1",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.17 Selection of data frame elements",
    "text": "5.17 Selection of data frame elements\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n\nmy_df[1,2] selects the value at the first row and second column in my_df.\n\nmy_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n\nSometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row. Let us now apply this technique on planets_df!\n\n5.17.1 Instructions 100 XP\n\n\nFrom planets_df, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\nFrom planets_df, select all data on Mars (the fourth row). Simply print out the result.\n\n\n\nex_46.R\n\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.7 Selection of data frame elements (2)",
    "text": "5.7 Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.\nSuppose you want to select the first three elements of the type column. One way to do this is\nplanets_df[1:3, 2]\nA possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\nplanets_df[1:3,\"type\"]\nInstructions 100 XP\n\nSelect and print out the first 5 values in the \"diameter\" column of planets_df.\n\n\nex_47.R\n\nprint(planets_df[1:5, \"diameter\"])"
  },
  {
    "objectID": "introduction_to_r_05.html#selection-of-data-frame-elements-2-1",
    "href": "introduction_to_r_05.html#selection-of-data-frame-elements-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.18 Selection of data frame elements (2)",
    "text": "5.18 Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.\nSuppose you want to select the first three elements of the type column. One way to do this is\nplanets_df[1:3, 2]\nA possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\nplanets_df[1:3,\"type\"]\nInstructions 100 XP\n\nSelect and print out the first 5 values in the \"diameter\" column of planets_df.\n\n\nex_47.R\n\nprint(planets_df[1:5, \"diameter\"])"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings",
    "href": "introduction_to_r_05.html#only-planets-with-rings",
    "title": "\n5  Data frames\n",
    "section": "\n5.8 Only planets with rings",
    "text": "5.8 Only planets with rings\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:\nplanets_df[,3]\nplanets_df[,\"diameter\"]\nHowever, there is a short-cut. If your columns have names, you can use the $ sign:\nplanets_df$diameter\nInstructions 100 XP\n\n\nUse the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.\nPrint out rings_vector to see if you got it right.\n\n\n\nex_48.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.19 Only planets with rings",
    "text": "5.19 Only planets with rings\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:\nplanets_df[,3]\nplanets_df[,\"diameter\"]\nHowever, there is a short-cut. If your columns have names, you can use the $ sign:\nplanets_df$diameter\nInstructions 100 XP\n\n\nUse the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.\nPrint out rings_vector to see if you got it right.\n\n\n\nex_48.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)"
  },
  {
    "objectID": "introduction_to_r_05.html#instructions",
    "href": "introduction_to_r_05.html#instructions",
    "title": "\n5  Data frames\n",
    "section": "\n5.9 Instructions",
    "text": "5.9 Instructions\n100 XP Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector. Print out rings_vector to see if you got it right."
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-2",
    "href": "introduction_to_r_05.html#only-planets-with-rings-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.9 Only planets with rings (2)",
    "text": "5.9 Only planets with rings (2)\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\nIf you type rings_vector in the console, you get:\n\n[1] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE\n\nThis means that the first four observations (or planets) do not have a ring (FALSE), but the other four do (TRUE). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let’s try to use rings_vector to select the data for the four planets with rings.\nInstructions 100 XP\n\nThe code in the editor selects the name column of all planets that have rings. Adapt the code so that instead of only the name column, all columns for planets that have rings are selected.\n\n\nex_49.R\n\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-2-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-2-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.20 Only planets with rings (2)",
    "text": "5.20 Only planets with rings (2)\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\nIf you type rings_vector in the console, you get:\n\n[1] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE\n\nThis means that the first four observations (or planets) do not have a ring (FALSE), but the other four do (TRUE). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let’s try to use rings_vector to select the data for the four planets with rings.\nInstructions 100 XP\n\nThe code in the editor selects the name column of all planets that have rings. Adapt the code so that instead of only the name column, all columns for planets that have rings are selected.\n\n\nex_49.R\n\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "href": "introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "title": "\n5  Data frames\n",
    "section": "\n5.10 Only planets with rings but shorter",
    "text": "5.10 Only planets with rings but shorter\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (planets_df) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\nNow, let us move up one level and use the function subset(). You should see the subset() function as a short-cut to do exactly the same as what you did in the previous exercises.\nsubset(my_df, subset = some_condition)\nThe first argument of subset() specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn’t need the rings_vector!\nsubset(planets_df, subset = rings)\nInstructions 100 XP\n\nUse subset() on planets_df to select planets that have a diameter smaller than Earth. Because the diameter variable is a relative measure of the planet’s diameter w.r.t that of planet Earth, your condition is diameter < 1.\n\n\nex_50.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)"
  },
  {
    "objectID": "introduction_to_r_05.html#only-planets-with-rings-but-shorter-1",
    "href": "introduction_to_r_05.html#only-planets-with-rings-but-shorter-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.21 Only planets with rings but shorter",
    "text": "5.21 Only planets with rings but shorter\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (planets_df) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\nNow, let us move up one level and use the function subset(). You should see the subset() function as a short-cut to do exactly the same as what you did in the previous exercises.\nsubset(my_df, subset = some_condition)\nThe first argument of subset() specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn’t need the rings_vector!\nsubset(planets_df, subset = rings)\nInstructions 100 XP\n\nUse subset() on planets_df to select planets that have a diameter smaller than Earth. Because the diameter variable is a relative measure of the planet’s diameter w.r.t that of planet Earth, your condition is diameter < 1.\n\n\nex_50.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting",
    "href": "introduction_to_r_05.html#sorting",
    "title": "\n5  Data frames\n",
    "section": "\n5.11 Sorting",
    "text": "5.11 Sorting\nMaking and creating rankings is one of mankind’s favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function order().\norder() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\na <- c(100, 10, 1000)\norder(a)\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).\nThis means we can use the output of order(a) to reshuffle a:\na[order(a)]\nInstructions 100 XP\n\nExperiment with the order() function in the console. Submit the answer when you are ready to continue.\n\n\nex_51.R\n\nx <- rnorm(10)\norder(x)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-1",
    "href": "introduction_to_r_05.html#sorting-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.22 Sorting",
    "text": "5.22 Sorting\nMaking and creating rankings is one of mankind’s favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function order().\norder() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\na <- c(100, 10, 1000)\norder(a)\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).\nThis means we can use the output of order(a) to reshuffle a:\na[order(a)]\nInstructions 100 XP\n\nExperiment with the order() function in the console. Submit the answer when you are ready to continue.\n\n\nex_51.R\n\nx <- rnorm(10)\norder(x)"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-your-data-frame",
    "href": "introduction_to_r_05.html#sorting-your-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.12 Sorting your data frame",
    "text": "5.12 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column.\nInstructions 100 XP\n\n\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.\nNow reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n\nex_52.R\n\n# planets_df is pre-loaded in your workspace\n\n# Use order() to create positions\npositions <-  order(planets_df$diameter)\n\n# Use positions to sort planets_df\nplanets_df[positions, ]"
  },
  {
    "objectID": "introduction_to_r_05.html#sorting-your-data-frame-1",
    "href": "introduction_to_r_05.html#sorting-your-data-frame-1",
    "title": "\n5  Data frames\n",
    "section": "\n5.23 Sorting your data frame",
    "text": "5.23 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column.\n\n5.23.1 Instructions 100 XP\n\n\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.\nNow reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n\nex_52.R\n\n\n\n:::"
  },
  {
    "objectID": "introduction_to_r_06.html",
    "href": "introduction_to_r_06.html",
    "title": "6  Lists",
    "section": "",
    "text": "7 Finish the code to build shining_list\nshining_list <- list( moviename = mov, actors = act, reviews = rev )\nThe arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, …\nshining_list <- list( moviename = mov, actors = act, reviews = rev )\n:::"
  },
  {
    "objectID": "introduction_to_r_06.html#section",
    "href": "introduction_to_r_06.html#section",
    "title": "6  Lists",
    "section": "6.7 ",
    "text": "6.7"
  },
  {
    "objectID": "introduction_to_r_06.html#lists-why-would-you-need-them",
    "href": "introduction_to_r_06.html#lists-why-would-you-need-them",
    "title": "6  Lists",
    "section": "6.1 Lists, why would you need them?",
    "text": "6.1 Lists, why would you need them?\nCongratulations! At this point in the course you are already familiar with:\n\n\nVectors (one dimensional array)\n\ncan hold numeric, character or logical values. The elements in a vector all have the same data type.\n\n\n\nMatrices (two dimensional array)\n\ncan hold numeric, character or logical values. The elements in a matrix all have the same data type.\n\n\n\nData frames (two-dimensional objects)\n\ncan hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type. Pretty sweet for an R newbie, right? ;-)\n\n\n\n\nInstructions 100 XP\nSubmit the answer to start learning everything about lists!"
  },
  {
    "objectID": "introduction_to_r_06.html#lists-why-would-you-need-them-2",
    "href": "introduction_to_r_06.html#lists-why-would-you-need-them-2",
    "title": "6  Lists",
    "section": "6.2 Lists, why would you need them? (2)",
    "text": "6.2 Lists, why would you need them? (2)\nA list in R is similar to your to-do list at work or school: the different items on that list most likely differ in length, characteristic, and type of activity that has to be done.\nA list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.\nYou could say that a list is some kind super data type: you can store practically any piece of information in it!\n\nInstructions 100 XP\nJust submit the answer to start the first exercise on lists."
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-list",
    "href": "introduction_to_r_06.html#creating-a-list",
    "title": "6  Lists",
    "section": "6.3 Creating a list",
    "text": "6.3 Creating a list\nLet us create our first list! To construct a list you use the function list():\nmy_list <- list(comp1, comp2 ...)\nThe arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, …\n\nInstructions 100 XP\nConstruct a list, named my_list, that contains the variables my_vector, my_matrix and my_df as list components.\n\n\nex_53.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Construct list with these different elements:\nmy_list <- list(my_vector, my_matrix, my_df)"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-named-list",
    "href": "introduction_to_r_06.html#creating-a-named-list",
    "title": "6  Lists",
    "section": "6.4 Creating a named list",
    "text": "6.4 Creating a named list\nWell done, you’re on a roll!\nJust like on your to-do list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them:\nmy_list <- list(name1 = your_comp1, name2 = your_comp2)\nThis creates a list with components that are named name1, name2, and so on. If you want to name your lists after you’ve created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:\nmy_list <- list(your_comp1, your_comp2) names(my_list) <- c(“name1”, “name2”)\n\nInstructions 100 XP\n\nChange the code of the previous exercise (see editor) by adding names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df.\nPrint out my_list so you can inspect the output.\n\n\n\nex_54.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Adapt list() call to give the components names\nmy_list <- list(my_vector, my_matrix, my_df)\nnames(my_list) <- c(\"vec\", \"mat\", \"df\")\n# Print out my_list\nprint(my_list)"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-named-list-1",
    "href": "introduction_to_r_06.html#creating-a-named-list-1",
    "title": "6  Lists",
    "section": "6.8 Creating a named list",
    "text": "6.8 Creating a named list\nWell done, you’re on a roll!\nJust like on your to-do list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them:\nmy_list <- list(name1 = your_comp1, name2 = your_comp2)\nThis creates a list with components that are named name1, name2, and so on. If you want to name your lists after you’ve created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:\nmy_list <- list(your_comp1, your_comp2) names(my_list) <- c(“name1”, “name2”)\n\nInstructions 100 XP\n\nChange the code of the previous exercise (see editor) by adding names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df.\nPrint out my_list so you can inspect the output.\n\n\n\nex_54.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Adapt list() call to give the components names\nmy_list <- list(my_vector, my_matrix, my_df)\nnames(my_list) <- c(\"vec\", \"mat\", \"df\")\n# Print out my_list\nprint(my_list)"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-named-list-2",
    "href": "introduction_to_r_06.html#creating-a-named-list-2",
    "title": "6  Lists",
    "section": "6.5 Creating a named list (2)",
    "text": "6.5 Creating a named list (2)\nBeing a huge movie fan (remember your job at LucasFilms), you decide to start storing information on good movies with the help of lists.\nStart by creating a list for the movie “The Shining”. We have already created the variables mov, act and rev in your R workspace. Feel free to check them out in the console.\n\nInstructions 100 XP\nComplete the code in the editor to create shining_list; it contains three elements:\n\nmoviename: a character string with the movie title (stored in mov)\nactors: a vector with the main actors’ names (stored in act)\nreviews: a data frame that contains some reviews (stored in rev)\n\nDo not forget to name the list components accordingly (names are moviename, actors and reviews).\n\n\nex_55.R\n\n# The variables mov, act and rev are available\n\n# Finish the code to build shining_list\nshining_list <- \n    list(\n        moviename = mov, \n        actors = act,\n        reviews = rev\n    )"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-named-list-2-1",
    "href": "introduction_to_r_06.html#creating-a-named-list-2-1",
    "title": "6  Lists",
    "section": "6.9 Creating a named list (2)",
    "text": "6.9 Creating a named list (2)\nBeing a huge movie fan (remember your job at LucasFilms), you decide to start storing information on good movies with the help of lists.\nStart by creating a list for the movie “The Shining”. We have already created the variables mov, act and rev in your R workspace. Feel free to check them out in the console.\n\nInstructions 100 XP\nComplete the code in the editor to create shining_list; it contains three elements:\n\nmoviename: a character string with the movie title (stored in mov)\nactors: a vector with the main actors’ names (stored in act)\nreviews: a data frame that contains some reviews (stored in rev)\n\nDo not forget to name the list components accordingly (names are moviename, actors and reviews).\n\n\nex_55.R\n\n# The variables mov, act and rev are available\n\n# Finish the code to build shining_list\nshining_list <- \n    list(\n        moviename = mov, \n        actors = act,\n        reviews = rev\n    )"
  },
  {
    "objectID": "introduction_to_r_06.html#selecting-elements-from-a-list",
    "href": "introduction_to_r_06.html#selecting-elements-from-a-list",
    "title": "6  Lists",
    "section": "6.6 Selecting elements from a list",
    "text": "6.6 Selecting elements from a list\nYour list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward.\nOne way to select a component is using the numbered position of that component. For example, to “grab” the first component of shining_list you type\nshining_list[[1]]\nA quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don’t mix them up!\nYou can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:\nshining_list[[\"reviews\"]]\nshining_list$reviews\nBesides selecting components, you often need to select specific elements out of these components. For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]). When you type this in the console, you will see the answer is Jack Nicholson.\n\n6.6.1 Instructions 100 XP\n\nSelect from shining_list the vector representing the actors. Simply print out this vector.\nSelect from shining_list the second element in the vector representing the actors. Do a printout like before.\n\n\n\nex_56.R\n\n# shining_list is already pre-loaded in the workspace\n\n# Print out the vector representing the actors\nprint(shining_list[[\"actors\"]])\n\n# Print the second element of the vector representing the actors\nprint(shining_list[[\"actors\"]][2])"
  },
  {
    "objectID": "introduction_to_r_06.html#selecting-elements-from-a-list-1",
    "href": "introduction_to_r_06.html#selecting-elements-from-a-list-1",
    "title": "6  Lists",
    "section": "6.10 Selecting elements from a list",
    "text": "6.10 Selecting elements from a list\nYour list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward.\nOne way to select a component is using the numbered position of that component. For example, to “grab” the first component of shining_list you type\nshining_list[[1]]\nA quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don’t mix them up!\nYou can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:\nshining_list[[\"reviews\"]]\nshining_list$reviews\nBesides selecting components, you often need to select specific elements out of these components. For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]). When you type this in the console, you will see the answer is Jack Nicholson.\n\n6.10.1 Instructions 100 XP\n\nSelect from shining_list the vector representing the actors. Simply print out this vector.\nSelect from shining_list the second element in the vector representing the actors. Do a printout like before.\n\n\n\nex_56.R\n\n# shining_list is already pre-loaded in the workspace\n\n# Print out the vector representing the actors\nprint(shining_list[[\"actors\"]])\n\n# Print the second element of the vector representing the actors\nprint(shining_list[[\"actors\"]][2])"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-new-list-for-another-movie",
    "href": "introduction_to_r_06.html#creating-a-new-list-for-another-movie",
    "title": "6  Lists",
    "section": "6.7 Creating a new list for another movie",
    "text": "6.7 Creating a new list for another movie\nYou found reviews of another, more recent, Jack Nicholson movie: The Departed!\n\n\n\nScores\nComments\n\n\n\n\n4.6\nI would watch it again\n\n\n5\nAmazing!\n\n\n4.8\nI liked it\n\n\n5\nOne of the best movies\n\n\n4.2\nFascinating plot\n\n\n\nIt would be useful to collect together all the pieces of information about the movie, like the title, actors, and reviews into a single variable. Since these pieces of data are different shapes, it is natural to combine them in a list variable.\nmovie_title, containing the title of the movie, and movie_actors, containing the names of some of the actors in the movie, are available in your workspace.\n\nInstructions 100 XP\n\nCreate two vectors, called scores and comments, that contain the information from the reviews shown in the table.\nFind the average of the scores vector and save it as avg_review.\nCombine the scores and comments vectors into a data frame called reviews_df.\nCreate a list, called departed_list, that contains the movie_title, movie_actors, reviews data frame as reviews_df, and the average review score as avg_review, and print it out.\n\n\n\nex_57.R\n\n# Use the table from the exercise to define the comments and scores vectors\nscores <- c(4.6, 5, 4.8, 5, 4.2)\ncomments <- \n    c(\n        \"I would watch it again\",\n        \"Amazing!\", \n        \"I liked it\",\n        \"One of the best movies\", \n        \"Fascinating plot\"\n    )\n\n# Save the average of the scores vector as avg_review\navg_review <- mean(scores)\n\n# Combine scores and comments into the reviews_df data frame\nreviews_df <- data.frame(scores, comments)\n\n# Create and print out a list, called departed_list\ndeparted_list <- list(\n    movie_title,\n    movie_actors,\n    reviews_df,\n    avg_review\n)\nprint(departed_list)"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n1  R Programmin\n",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n                                        names   xp\n1                           Introduction to R 6200\n2                              Intermediate R 6950\n3                   Writing Efficient R Code  3100\n4       Introduction to Writing Function in R 4350\n5 Object-Oriented Programming with S3 R6 in R 4200\n\n\n[1] 24800\n\n\n\n2 Importing & Cleaning Data with R\n\n3 Data Manipulation with R\n\n4 Tidyverse Fundamentals with R\n\n5 Intermediate Tidyverse Toolbox\n\n6 Data Visualization with R\n\n7 Interactive Data Visualization in R\nGrade rubric\n\n\n\n\n\nxp_ch_1\n\n\n\nHow it works\n100\n\n\nArithmetic with R\n100\n\n\nVariable assignment\n100\n\n\nVariable assignment (2)\n100\n\n\nVariable assignment (3)\n100\n\n\nApples and oranges\n100\n\n\nBasic data types in R\n100\n\n\n’What’s that data type?\n100\n\n\n\n\n\n\n\n\n\n\nxp_ch_2\n\n\n\nCreate a Vector\n100\n\n\nCreate a Vector (2)\n100\n\n\nCreate a Vector (3)\n100\n\n\nNaming a vector (2)\n100\n\n\nCalculating total winnings\n100\n\n\nCalculating total winnings (2)\n100\n\n\nCalculating total winnings (3)\n100\n\n\nComparing total winnings\n100\n\n\nVector selection: the good times\n100\n\n\nVector selection: the good times (2)\n100\n\n\nVector selection: the good times (3)\n100\n\n\nVector selection: the good times (4)\n100\n\n\nSelection by comparison - Step 1\n100\n\n\nselection by comparison - Step 2\n100\n\n\nAdvanced selection\n100\n\n\n\n\n\n\n\n\n\n\nxp_ch_3\n\n\n\nWhat’s a matrix\n100\n\n\nAnalyze matrices, you shall\n100\n\n\nNaming a matrix\n100\n\n\ncalculating the world box office\n100\n\n\nAdding a column for the Worldwide box office\n100\n\n\nAdding a row\n100\n\n\nThe total box office revenue for the entire saga\n100\n\n\nSelection of matrix elements\n100\n\n\nA little arithmetic with matrices\n100\n\n\nA little arithmetic with matrices (2)\n100\n\n\n\n\n\n\n\n\n\n\nxp_ch_4\n\n\n\nWhat’s a factor and why would you use it?\n100\n\n\nWhat’s a factor and why would you use it? (2)\n100\n\n\nWhat’s a factor and why would you use it? (3)\n100\n\n\nFactor levels\n100\n\n\nSummarizing a factor\n100\n\n\nBattle of the sexes\n100\n\n\nOrdered factors\n100\n\n\nOrdered factors (2)\n100\n\n\nComparing ordered factors\n100\n\n\n\n\n\n\n\n\n\n\nxp_ch_5\n\n\n\nWhat’s a data frame\n100\n\n\nQuick, have a look at you dataset\n100\n\n\nHave a look at the structure\n100\n\n\nCreating a data frame\n100\n\n\nCreating a data frame (2)\n100\n\n\nSelection of data frame elements\n100\n\n\nSelection of data frame elements(2)\n100\n\n\nOnly planets with rings\n100\n\n\nOnly planets with rings(2)\n100\n\n\nOnly planets with rings(2) but shorter\n100\n\n\nSorting\n100\n\n\nSorting your dataframe\n100\n\n\n\n\n\n\n\n\n\n\nxp_ch_6\n\n\n\nLists, why would you need them?\n100\n\n\nLists, why would you need them? (2)\n100\n\n\nCreating a list\n100\n\n\nCreating a named list\n100\n\n\nCreating a named list (2)\n100\n\n\nSelecting elements from a list\n100\n\n\nCreating a new list for another movie\n100"
  },
  {
    "objectID": "introduction_to_r_06.html#creating-a-new-list-for-another-movie-1",
    "href": "introduction_to_r_06.html#creating-a-new-list-for-another-movie-1",
    "title": "6  Lists",
    "section": "6.11 Creating a new list for another movie",
    "text": "6.11 Creating a new list for another movie\nYou found reviews of another, more recent, Jack Nicholson movie: The Departed!\n\n\n\nScores\nComments\n\n\n\n\n4.6\nI would watch it again\n\n\n5\nAmazing!\n\n\n4.8\nI liked it\n\n\n5\nOne of the best movies\n\n\n4.2\nFascinating plot\n\n\n\nIt would be useful to collect together all the pieces of information about the movie, like the title, actors, and reviews into a single variable. Since these pieces of data are different shapes, it is natural to combine them in a list variable.\nmovie_title, containing the title of the movie, and movie_actors, containing the names of some of the actors in the movie, are available in your workspace.\n\n6.11.1 Instructions 100 XP\n\nCreate two vectors, called scores and comments, that contain the information from the reviews shown in the table.\nFind the average of the scores vector and save it as avg_review.\nCombine the scores and comments vectors into a data frame called reviews_df.\nCreate a list, called departed_list, that contains the movie_title, movie_actors, reviews data frame as reviews_df, and the average review score as avg_review, and print it out.\n\n\n:::"
  },
  {
    "objectID": "introduction_to_r_03.html#whats-a-matrix",
    "href": "introduction_to_r_03.html#whats-a-matrix",
    "title": "3  Matrices",
    "section": "3.1 What’s a matrix?",
    "text": "3.1 What’s a matrix?\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional.\nYou can construct a matrix in R with the matrix() function. Consider the following example:\nmatrix(1:9, byrow = TRUE, nrow = 3)\nIn the matrix() function:\n\nThe first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).\nThe argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE.\nThe third argument nrow indicates that the matrix should have three rows.\n\n\nInstructions 100 XP\nConstruct a matrix with 3 rows containing the numbers 1 up to 9, filled row-wise.\n\n\nex_24.R\n\n# Construct a matrix with 3 rows that contain the numbers 1 up to 9\nmatrix(1:9, byrow = TRUE, nrow = 3)"
  },
  {
    "objectID": "introduction_to_r_03.html#analyze-matrices-you-shall",
    "href": "introduction_to_r_03.html#analyze-matrices-you-shall",
    "title": "3  Matrices",
    "section": "3.2 Analyze matrices, you shall",
    "text": "3.2 Analyze matrices, you shall\nIt is now time to get your hands dirty. In the following exercises you will analyze the box office numbers of the Star Wars franchise. May the force be with you!\nIn the editor, three vectors are defined. Each one represents the box office numbers from the first three Star Wars movies. The first element of each vector indicates the US box office revenue, the second element refers to the Non-US box office (source: Wikipedia).\nIn this exercise, you’ll combine all these figures into a single vector. Next, you’ll build a matrix from this vector.\n\nInstructions 100 XP\n\nUse c(new_hope, empire_strikes, return_jedi) to combine the three vectors into one vector. Call this vector box_office.\nConstruct a matrix with 3 rows, where each row represents a movie. Use the matrix() function to do this. The first argument is the vector box_office, containing all box office figures. Next, you’ll have to specify nrow = 3 and byrow = TRUE. Name the resulting matrix star_wars_matrix.\n\n\n\nex_25.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Create box_office\nbox_office <- c(new_hope, empire_strikes, return_jedi)\n\n# Construct star_wars_matrix\nstar_wars_matrix <- matrix (box_office, nrow = 3, byrow = TRUE)"
  },
  {
    "objectID": "introduction_to_r_03.html#naming-a-matrix",
    "href": "introduction_to_r_03.html#naming-a-matrix",
    "title": "3  Matrices",
    "section": "3.3 Naming a matrix",
    "text": "3.3 Naming a matrix\nTo help you remember what is stored in star_wars_matrix, you would like to add the names of the movies for the rows. Not only does this help you to read the data, but it is also useful to select certain elements from the matrix.\nSimilar to vectors, you can add names for the rows and the columns of a matrix\nrownames(my_matrix) <- row_names_vector\ncolnames(my_matrix) <- col_names_vector\nWe went ahead and prepared two vectors for you: region, and titles. You will need these vectors to name the columns and rows of star_wars_matrix, respectively.\n\nInstructions 100 XP\n\nUse colnames() to name the columns of star_wars_matrix with the region vector.\nUse rownames() to name the rows of star_wars_matrix with the titles vector.\nPrint out star_wars_matrix to see the result of your work.\n\n\n\nex_26.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Construct matrix\nstar_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3, byrow = TRUE)\n\n# Vectors region and titles, used for naming\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\")\n\n# Name the columns with region\ncolnames(star_wars_matrix) <- region\n\n# Name the rows with titles\nrownames(star_wars_matrix) <- titles\n\n# Print out star_wars_matrix\nprint(star_wars_matrix)"
  },
  {
    "objectID": "introduction_to_r_03.html#calculating-the-worldwide-box-office",
    "href": "introduction_to_r_03.html#calculating-the-worldwide-box-office",
    "title": "3  Matrices",
    "section": "3.4 Calculating the worldwide box office",
    "text": "3.4 Calculating the worldwide box office\nThe single most important thing for a movie in order to become an instant legend in Tinseltown is its worldwide box office figures.\nTo calculate the total box office revenue for the three Star Wars movies, you have to take the sum of the US revenue column and the non-US revenue column.\nIn R, the function rowSums() conveniently calculates the totals for each row of a matrix. This function creates a new vector:\nrowSums(my_matrix)\n\nInstructions 100 XP\nCalculate the worldwide box office figures for the three movies and put these in the vector named worldwide_vector.\n\n\nex_26.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n                \"The Empire Strikes Back\", \n                \"Return of the Jedi\")\n              \nstar_wars_matrix <- matrix(box_office, \n                     nrow = 3, byrow = TRUE,\n                     dimnames = list(titles, region))\n\n# Calculate worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)"
  },
  {
    "objectID": "introduction_to_r_03.html#adding-a-column-for-the-worldwide-box-office",
    "href": "introduction_to_r_03.html#adding-a-column-for-the-worldwide-box-office",
    "title": "3  Matrices",
    "section": "3.5 Adding a column for the Worldwide box office",
    "text": "3.5 Adding a column for the Worldwide box office\nIn the previous exercise you calculated the vector that contained the worldwide box office receipt for each of the three Star Wars movies. However, this vector is not yet part of star_wars_matrix.\nYou can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example:\n  big_matrix <- cbind(matrix1, matrix2, vector1 ...)\n\nInstructions 100 XP\nAdd worldwide_vector as a new column to the star_wars_matrix and assign the result to all_wars_matrix. Use the cbind() function.\n\n\nex_27.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n            \"The Empire Strikes Back\", \n            \"Return of the Jedi\")\n               \nstar_wars_matrix <- matrix(box_office, \n                      nrow = 3, byrow = TRUE,\n                      dimnames = list(titles, region))\n\n# The worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)\n\n# Bind the new variable worldwide_vector as a column to star_wars_matrix\nall_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)"
  },
  {
    "objectID": "introduction_to_r_03.html#adding-a-row",
    "href": "introduction_to_r_03.html#adding-a-row",
    "title": "3  Matrices",
    "section": "3.6 Adding a row",
    "text": "3.6 Adding a row\nJust like every action has a reaction, every cbind() has an rbind(). (We admit, we are pretty bad with metaphors.)\nYour R workspace, where all variables you defined ‘live’ (check out what a workspace is), has already been initialized and contains two matrices:\n\nstar_wars_matrix that we have used all along, with data on the original trilogy,\nstar_wars_matrix2, with similar data for the prequels trilogy.\n\nExplore these matrices in the console if you want to have a closer look. If you want to check out the contents of the workspace, you can type ls() in the console.\n\nInstructions 100 XP\nUse rbind() to paste together star_wars_matrix and star_wars_matrix2, in this order. Assign the resulting matrix to all_wars_matrix.\n\n\nex_28.R\n\n# star_wars_matrix and star_wars_matrix2 are available in your workspace\nstar_wars_matrix  \nstar_wars_matrix2 \n\n# Combine both Star Wars trilogies in one matrix\nall_wars_matrix <- rbind(star_wars_matrix, star_wars_matrix2)"
  },
  {
    "objectID": "introduction_to_r_03.html#the-total-box-office-revenue-for-the-entire-saga",
    "href": "introduction_to_r_03.html#the-total-box-office-revenue-for-the-entire-saga",
    "title": "3  Matrices",
    "section": "3.7 The total box office revenue for the entire saga",
    "text": "3.7 The total box office revenue for the entire saga\nJust like cbind() has rbind(), colSums() has rowSums(). Your R workspace already contains the all_wars_matrix that you constructed in the previous exercise; type all_wars_matrix to have another look. Let’s now calculate the total box office revenue for the entire saga.\n\nInstructions 100 XP\n\nCalculate the total revenue for the US and the non-US region and assign total_revenue_vector. You can use the colSums() function.\nPrint out total_revenue_vector to have a look at the results.\n\n\n\nex_29.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Total revenue for US and non-US\ntotal_revenue_vector <- colSums(all_wars_matrix)\n  \n# Print out total_revenue_vector\nprint(total_revenue_vector)"
  },
  {
    "objectID": "introduction_to_r_03.html#selection-of-matrix-elements",
    "href": "introduction_to_r_03.html#selection-of-matrix-elements",
    "title": "3  Matrices",
    "section": "3.8 Selection of matrix elements",
    "text": "3.8 Selection of matrix elements\nSimilar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate the rows you want to select from the columns. For example:\n\nmy_matrix[1,2] selects the element at the first row and second column.\nmy_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.\n\nIf you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:\n\nmy_matrix[,1] selects all elements of the first column.\nmy_matrix[1,] selects all elements of the first row.\n\nBack to Star Wars with this newly acquired knowledge! As in the previous exercise, all_wars_matrix is already available in your workspace.\n\nInstructions 100 XP\n\nSelect the non-US revenue for all movies (the entire second column of all_wars_matrix), store the result as non_us_all.\nUse mean() on non_us_all to calculate the average non-US revenue for all movies. Simply print out the result.\nThis time, select the non-US revenue for the first two movies in all_wars_matrix. Store the result as non_us_some.\nUse mean() again to print out the average of the values in non_us_some.\n\n\n\nex_30.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Select the non-US revenue for all movies\nnon_us_all <- all_wars_matrix[,2]\n  \n# Average non-US revenue\nprint(mean(non_us_all))\n  \n# Select the non-US revenue for first two movies\nnon_us_some <- all_wars_matrix[1:2, 2]\n  \n# Average non-US revenue for first two movies\nprint(mean(non_us_some))"
  },
  {
    "objectID": "introduction_to_r_03.html#a-little-arithmetic-with-matrices",
    "href": "introduction_to_r_03.html#a-little-arithmetic-with-matrices",
    "title": "3  Matrices",
    "section": "3.9 A little arithmetic with matrices",
    "text": "3.9 A little arithmetic with matrices\nSimilar to what you have learned with vectors, the standard operators like +, -,/, *, etc. work in an element-wise way on matrices in R.\nFor example, 2 * my_matrix multiplies each element of my_matrix by two.\nAs a newly-hired data analyst for Lucasfilm, it is your job to find out how many visitors went to each movie for each geographical area. You already have the total revenue figures in all_wars_matrix. Assume that the price of a ticket was 5 dollars. Simply dividing the box office numbers by this ticket price gives you the number of visitors.\n\n3.9.1 Instructions 100 XP\n\nDivide all_wars_matrix by 5, giving you the number of visitors in millions.\nAssign the resulting matrix to visitors.\nPrint out visitors so you can have a look.\n\n\n\nex_31.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Estimate the visitors\nvisitors <- all_wars_matrix / 5\n  \n# Print the estimate to the console\nprint(visitors)"
  },
  {
    "objectID": "introduction_to_r_03.html#a-little-arithmetic-with-matrices-2",
    "href": "introduction_to_r_03.html#a-little-arithmetic-with-matrices-2",
    "title": "3  Matrices",
    "section": "3.10 A little arithmetic with matrices (2)",
    "text": "3.10 A little arithmetic with matrices (2)\nJust like 2 * my_matrix multiplied every element of my_matrix by two, my_matrix1 * my_matrix2 creates a matrix where each element is the product of the corresponding elements in my_matrix1 and my_matrix2.\nAfter looking at the result of the previous exercise, big boss Lucas points out that the ticket prices went up over time. He asks to redo the analysis based on the prices you can find in ticket_prices_matrix (source: imagination).\nThose who are familiar with matrices should note that this is not the standard matrix multiplication for which you should use %*% in R.\n\n3.10.1 Instructions 100 XP\n\nDivide all_wars_matrix by ticket_prices_matrix to get the estimated number of US and non-US visitors for the six movies. Assign the result to visitors.\nFrom the visitors matrix, select the entire first column, representing the number of visitors in the US. Store this selection as us_visitors.\nCalculate the average number of US visitors; print out the result.\n\n\n\nex_32.R\n\n# all_wars_matrix and ticket_prices_matrix are available in your workspace\nall_wars_matrix\nticket_prices_matrix\n\n# Estimated number of visitors\nvisitors <- all_wars_matrix / ticket_prices_matrix\n\n# US visitors\nus_visitors <- visitors[, 1]\n\n# Average number of US visitors\nprint(mean(us_visitors))"
  },
  {
    "objectID": "introduction_to_r_02.html#create-a-vector",
    "href": "introduction_to_r_02.html#create-a-vector",
    "title": "\n2  Vectors\n",
    "section": "\n2.1 Create a vector",
    "text": "2.1 Create a vector\nFeeling lucky? You better, because this chapter takes you on a trip to the City of Sins, also known as Statisticians Paradise!\nThanks to R and your new data-analytical skills, you will learn how to uplift your performance at the tables and fire off your career as a professional gambler. This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions. Next stop, Vegas Baby… VEGAS!!\nInstructions 100 XP\n\n\nDo you still remember what you have learned in the first chapter? Assign the value \"Go!\" to the variable vegas. Remember: R is case sensitive!\n\n\n\nex_08.R\n\n# Define the variable vegas\nvegas <- \"Go!\""
  },
  {
    "objectID": "introduction_to_r_02.html#create-a-vector-2",
    "href": "introduction_to_r_02.html#create-a-vector-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.2 Create a vector (2)",
    "text": "2.2 Create a vector (2)\nLet us focus first!\nOn your way from rags to riches, you will make extensive use of vectors. Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.\nIn R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses.\n\n\n\n\n\n\nFor example:\n\n\n\nnumeric_vector <- c(1, 2, 3)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n\nOnce you have created these vectors in R, you can use them to do calculations.\nInstructions 100 XP\n\nComplete the code such that boolean_vector contains the three elements: TRUE,FALSEandTRUE` (in that order).\n\n\nex_09.R\n\nnumeric_vector <- c(1, 10, 49)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n# Complete the code for boolean_vector\nboolean_vector <-c(TRUE, FALSE, TRUE)\n\n\n2.2.1 Create a vector (3)\nAfter one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers.\nBefore doing a first analysis, you decide to first collect all the winnings and losses for the last week:\nFor poker_vector:\n\nOn Monday you won $140\n\nTuesday you lost $50\n\nWednesday you won $20\n\nThursday you lost $120\n\nFriday you won $240\n\n\nFor roulette_vector:\n\nOn Monday you lost $24\n\nTuesday you lost $50\n\nWednesday you won $100\n\nThursday you lost $350\n\nFriday you won $10\n\n\nYou only played poker and roulette, since there was a delegation of mediums that occupied the craps tables. To be able to use this data in R, you decide to create the variables poker_vector and roulette_vector.\nInstructions 100 XP\n\nAssign the winnings/losses for roulette to the variable roulette_vector. You lost $24, then lost $50 , won $100, lost $350, and won $10.\n\n\nex_10.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n\n2.2.2 Naming a vector\nAs a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential.\nIn the previous exercise, we created a vector with your winnings over the week. Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself.\nYou can give a name to the elements of a vector with the names() function. Have a look at this example:\n#| code-line-numbers: false\n#| code-fold: false\n#| code-summary: \"Show the code\"\n\nsome_vector <- c(\"John Doe\", \"poker player\")\nnames(some_vector) <- c(\"Name\", \"Profession\")\nThis code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession. Printing the contents to the console yields following output:\n\n\n\n\n\n\nOutput\n\n\n\n\n\n      Name     Profession\n\"John Doe\" \"poker player\"\n\n\n\nInstructions 100 XP\n\nThe code in the editor names the elements in poker_vector with the days of the week. Add code to do the same thing for roulette_vector.\n\n\nex_11.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# Assign days as names of poker_vector\nnames(poker_vector) <-\n  c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n# Assign days as names of roulette_vector\n\nnames(roulette_vector) <-\n  c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")"
  },
  {
    "objectID": "introduction_to_r_02.html#naming-a-vector-2",
    "href": "introduction_to_r_02.html#naming-a-vector-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.3 Naming a vector (2)",
    "text": "2.3 Naming a vector (2)\nIf you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.)\nIn the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a variable!\nJust like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it.\nInstructions 100 XP\n\n\nA variable days_vector that contains the days of the week has already been created for you.\nUse days_vector to set the names of poker_vector and roulette_vector.\n\n\n\nex_12.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# The variable days_vector\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n# Assign the names of the day to roulette_vector and poker_vector\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector"
  },
  {
    "objectID": "introduction_to_r_02.html#calculating-total-winnings",
    "href": "introduction_to_r_02.html#calculating-total-winnings",
    "title": "\n2  Vectors\n",
    "section": "\n2.4 Calculating total winnings",
    "text": "2.4 Calculating total winnings\nNow that you have the poker and roulette winnings nicely as named vectors, you can start doing some data analytical magic.\nYou want to find out the following type of information:\n\nHow much has been your overall profit or loss per day of the week?\nHave you lost money over the week in total?\nAre you winning/losing money on poker or on roulette? To get the answers, you have to do arithmetic calculations on vectors.\n\nIt is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:\n\n\n\nYou can also do the calculations with variables that represent vectors:\n\n\n\nInstructions 100 XP\n\n\nTake the sum of the variables A_vector and B_vector and assign it to total_vector.\nInspect the result by printing out total_vector.\n\n\n\nex_13.R\n\nA_vector <- c(1, 2, 3)\nB_vector <- c(4, 5, 6)\n\n# Take the sum of A_vector and B_vector\ntotal_vector <- A_vector + B_vector\n\n# Print out total_vector\nprint(total_vector)"
  },
  {
    "objectID": "introduction_to_r_02.html#calculating-total-winnings-2",
    "href": "introduction_to_r_02.html#calculating-total-winnings-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.5 Calculating total winnings (2)",
    "text": "2.5 Calculating total winnings (2)\nNow you understand how R does arithmetic with vectors, it is time to get those Ferraris in your garage! First, you need to understand what the overall profit or loss per day of the week was. The total daily profit is the sum of the profit / loss you realized on poker per day, and the profit / loss you realized on roulette per day.\nIn R, this is just the sum of roulette_vector and poker_vector.\nInstructions 100 XP\n\nAssign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined).\n\n\nex_14.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Assign to total_daily how much you won/lost on each day\ntotal_daily <- roulette_vector + poker_vector"
  },
  {
    "objectID": "introduction_to_r_02.html#calculating-total-winnings-3",
    "href": "introduction_to_r_02.html#calculating-total-winnings-3",
    "title": "\n2  Vectors\n",
    "section": "\n2.6 Calculating total winnings (3)",
    "text": "2.6 Calculating total winnings (3)\nBased on the previous analysis, it looks like you had a mix of good and bad days. This is not what your ego expected, and you wonder if there may be a very tiny chance you have lost money over the week in total?\nA function that helps you to answer this question is sum(). It calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do:\ntotal_poker <- sum(poker_vector)\nInstructions 100 XP\n\n\nCalculate the total amount of money that you have won/lost with roulette and assign to the variable total_roulette.\nNow that you have the totals for roulette and poker, you can easily calculate total_week (which is the sum of all gains and losses of the week).\nPrint out total_week.\n\n\n\nex_15.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Total winnings with poker\ntotal_poker <- sum(poker_vector)\n\n# Total winnings with roulette\ntotal_roulette <-  sum(roulette_vector)\n\n# Total winnings overall\ntotal_week <- total_poker + total_roulette\n\n# Print out total_week\nprint(total_week)"
  },
  {
    "objectID": "introduction_to_r_02.html#comparing-total-winnings",
    "href": "introduction_to_r_02.html#comparing-total-winnings",
    "title": "\n2  Vectors\n",
    "section": "\n2.7 Comparing total winnings",
    "text": "2.7 Comparing total winnings\nOops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis…\nAfter a short brainstorm in your hotel’s jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or > ) than in roulette.\nInstructions 100 XP\n\n\nCalculate total_poker and total_roulette as in the previous exercise. Use the sum() function twice.\nCheck if your total gains in poker are higher than for roulette by using a comparison. Simply print out the result of this comparison. What do you conclude, should you focus on roulette or on poker?\n\n\n\nex_16.R\n\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Calculate total gains for poker and roulette\ntotal_poker <- sum(poker_vector)\ntotal_roulette <- sum(roulette_vector)\n\n# Check if you realized higher total gains in poker than in roulette\n\nprint(total_poker > total_roulette)"
  },
  {
    "objectID": "introduction_to_r_02.html#vector-selection-the-good-times",
    "href": "introduction_to_r_02.html#vector-selection-the-good-times",
    "title": "\n2  Vectors\n",
    "section": "\n2.8 Vector selection: the good times",
    "text": "2.8 Vector selection: the good times\nYour hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette.\nAnother possible route for investigation is your performance at the beginning of the working week compared to the end of it. You did have a couple of Margarita cocktails at the end of the week…\nTo answer that question, you only want to focus on a selection of the total_vector. In other words, our goal is to select specific elements of the vector. To select elements of a vector (and later matrices, data frames, …), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1]. To select the second element of the vector, you type poker_vector[2], etc. Notice that the first element in a vector has index 1, not 0 as in many other programming languages.\nInstructions 100 XP\nAssign the poker results of Wednesday to the variable poker_wednesday.\n\n\nex_17.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_wednesday <- poker_vector[3]"
  },
  {
    "objectID": "introduction_to_r_02.html#vector-selection-the-good-times-2",
    "href": "introduction_to_r_02.html#vector-selection-the-good-times-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.9 Vector selection: the good times (2)",
    "text": "2.9 Vector selection: the good times (2)\nHow about analyzing your midweek results?\nTo select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected. For example: suppose you want to select the first and the fifth day of the week: use the vector c(1, 5) between the square brackets. For example, the code below selects the first and fifth element of poker_vector:\npoker_vector[c(1, 5)]\nInstructions 100 XP\n\nAssign the poker results of Tuesday, Wednesday and Thursday to the variable poker_midweek.\n\n\nex_18.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_midweek <- poker_vector[c(2, 3, 4)]"
  },
  {
    "objectID": "introduction_to_r_02.html#vector-selection-the-good-times-3",
    "href": "introduction_to_r_02.html#vector-selection-the-good-times-3",
    "title": "\n2  Vectors\n",
    "section": "\n2.10 Vector selection: the good times (3)",
    "text": "2.10 Vector selection: the good times (3)\nSelecting multiple elements of poker_vector with c(2, 3, 4) is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: c(2, 3, 4) can be abbreviated to 2:4, which generates a vector with all natural numbers from 2 up to 4.\nSo, another way to find the mid-week results is poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4.\nInstructions 100 XP\n\nAssign to roulette_selection_vector the roulette results from Tuesday up to Friday; make use of : if it makes things easier for you.\n\n\nex_19.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\nroulette_selection_vector <- roulette_vector[2:5]"
  },
  {
    "objectID": "introduction_to_r_02.html#vector-selection-the-good-times-4",
    "href": "introduction_to_r_02.html#vector-selection-the-good-times-4",
    "title": "\n2  Vectors\n",
    "section": "\n2.11 Vector selection: the good times (4)",
    "text": "2.11 Vector selection: the good times (4)\nAnother way to tackle the previous exercise is by using the names of the vector elements (Monday, Tuesday, …) instead of their numeric positions. For example,\npoker_vector[c(\"Monday\"]\nwill select the first element of poker_vector since “Monday” is the name of that first element.\nJust like you did in the previous exercise with numerics, you can also use the element names to select multiple elements, for example:\npoker_vector[c(\"Monday\",\"Tuesday\")]\nInstructions 100 XP\n\n\nSelect the first three elements in poker_vector by using their names: \"Monday\", \"Tuesday\" and \"Wednesday\". Assign the result of the selection to poker_start.\nCalculate the average of the values in poker_start with the mean() function. Simply print out the result so you can inspect it.\n\n\n\nex_20.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Select poker results for Monday, Tuesday and Wednesday\npoker_start <- poker_vector[c(\"Monday\", \"Tuesday\", \"Wednesday\")]\n  \n# Calculate the average of the elements in poker_start\nmean(poker_start)"
  },
  {
    "objectID": "introduction_to_r_02.html#selection-by-comparison---step-1",
    "href": "introduction_to_r_02.html#selection-by-comparison---step-1",
    "title": "\n2  Vectors\n",
    "section": "\n2.12 Selection by comparison - Step 1",
    "text": "2.12 Selection by comparison - Step 1\nBy making use of comparison operators, we can approach the previous question in a more proactive way.\nThe (logical) comparison operators known to R are:\n\n\n< for less than\n\n> for greater than\n\n<= for less than or equal to\n\n>= for greater than or equal to\n\n== for equal to each other\n\n!= not equal to each other\n\nAs seen in the previous chapter, stating 6 > 5 returns TRUE. The nice thing about R is that you can use these comparison operators also on vectors. For example:\n\n\n[1] FALSE FALSE  TRUE\n\n\nThis command tests for every element of the vector if the condition stated by the comparison operator is TRUE or FALSE.\nInstructions 100 XP\n\n\nCheck which elements in poker_vector are positive (i.e. > 0) and assign this to selection_vector.\nPrint out selection_vector so you can inspect it. The printout tells you whether you won (TRUE) or lost (FALSE) any money for each day.\n\n\n\nex_21.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- \n    poker_vector > 0\n  \n# Print out selection_vector\nprint(selection_vector)"
  },
  {
    "objectID": "introduction_to_r_02.html#selection-by-comparison---step-2",
    "href": "introduction_to_r_02.html#selection-by-comparison---step-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.13 Selection by comparison - Step 2",
    "text": "2.13 Selection by comparison - Step 2\nWorking with comparisons will make your data analytical life easier. Instead of selecting a subset of days to investigate yourself (like before), you can simply ask R to return only those days where you realized a positive return for poker.\nIn the previous exercises you used selection_vector <- poker_vector > 0 to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days.\nYou can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector:\npoker_vector[selection_vector]\nR knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector.\nInstructions 100 XP\n\nUse selection_vector in square brackets to assign the amounts that you won on the profitable days to the variable poker_winning_days.\n\n\nex_22.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- poker_vector > 0\n\n# Select from poker_vector these days\npoker_winning_days <- poker_vector[selection_vector]"
  },
  {
    "objectID": "introduction_to_r_02.html#advanced-selection",
    "href": "introduction_to_r_02.html#advanced-selection",
    "title": "\n2  Vectors\n",
    "section": "\n2.14 Advanced selection",
    "text": "2.14 Advanced selection\nJust like you did for poker, you also want to know those days where you realized a positive return for roulette.\n\n2.14.1 Instructions 100 XP\n\n\nCreate the variable selection_vector, this time to see if you made profit with roulette for different days.\nAssign the amounts that you made on the days that you ended positively for roulette to the variable roulette_winning_days. This vector thus contains the positive winnings of roulette_vector.\n\n\n\nex_23.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on roulette?\nselection_vector <- roulette_vector > 0\n\n# Select from roulette_vector these days\nroulette_winning_days <- roulette_vector[selection_vector]"
  }
]