# Random Numbers and Probability

In this chapter, you'll learn how to generate random samples and measure
chance using probability. You'll work with real-world sales data to 
calculate the probability of a salesperson being successful.
Finally, youâ€™ll use the binomial distribution to model events with binary 
outcomes.

## Calculating probabilities

You're in charge of the sales team, and it's time for performance 
reviews, starting with Amir. As part of the review, you want to 
randomly select a few of the deals that he's worked on over the past 
year so that you can look at them more deeply. Before you start 
selecting deals, you'll first figure out what the chances are of 
selecting certain deals.

Recall that the probability of an event can be calculated by
$$
P(event) = 
    \frac{
        \text{ways\# event can appen}
    }{
        \text{total \# of possible outcomes}
    }
$$
`dplyr` is loaded and amir_deals is available.
### Instuctions `100 xp` {.unnumbered}

- Count the number of deals Amir worked on for each product type.

- Create a new column called prob by dividing n by the total number of deals Amir worked on.
```{.r filename="ex_007.R"}
# Count the deals for each product
amir_deals %>%
  count(product)
# Calculate probability of picking a deal with each product
amir_deals %>%
  count(product) %>%
  mutate(prob = n / sum(n))
  
```
## Sampling deals

In the previous exercise, you counted the deals 
Amir worked on. Now it's time to randomly pick 
five deals so that you can reach out to each 
customer and ask if they were satisfied with the 
service they received. You'll try doing this both 
with and without replacement.

Additionally, you want to make sure this is done 
randomly and that it can be reproduced in case you 
get asked how you chose the deals, so you'll need 
to set the random seed before sampling from the 
deals.

`dplyr` is loaded and `amir_deals` is available.

### Instuctions `100 xp` {.unnumbered}
- Set the random seed to 31.
- Take a sample of 5 deals without replacement.

```{.r filename="ex_008.R"}
# Set random seed to 31
set.seed(31)

# Sample 5 deals without replacement
amir_deals %>%
  sample_n(5)

# Set random seed to 31
set.seed(31)

# Sample 5 deals with replacement
amir_deals %>%
  sample_n(5, replace = TRUE)
```
## Creatiing a probability distribution

A new restaurant opened a few months ago, and the 
restaurant's management wants to optimize its 
seating space based on the size of the groups that 
come most often. On one night, there are 10 groups 
of people waiting to be seated at the restaurant, 
but instead of being called in the order they 
arrived, they will be called randomly. In this 
exercise, you'll investigate the probability of 
groups of different sizes getting picked first.
Data on each of the ten groups is contained in the 
`restaurant_groups` data frame.

Remember that expected value can be calculated by 
multiplying each possible outcome with its 
corresponding probability and taking the sum. The 
`restaurant_groups` data is available and `dplyr` 
and `ggplot2` are loaded.

### Instuctions `100 xp` {.unnumbered}
- Create a histogram of `group_size`
- Count the number of each `group_size` in 
`restaurant_groups`, then add a column called 
probability that contains the probability of 
randomly selecting a group of each size. Store 
this in a new data frame called 
`size_distribution`.
- Calculate the expected value of the 
`size_distribution`, which represents the expected 
group size.
- Calculate the probability of randomly picking a 
group of 4 or more people by filtering and 
summarizing.

```{.r filename="ex_009.R"}
# Create a histogram of group_size
ggplot(data = restaurant_groups, aes(x=group_size)) +
  geom_histogram(bins=5)

# Create probability distribution
size_distribution <- restaurant_groups %>%
  # Count number of each group size
  count(group_size) %>%
  # Calculate probability
  mutate(probability = n / sum(n))

size_distribution
expected_val <- 
  sum(
    size_distribution$group_size *
    size_distribution$probability)
expected_val

# Create probability distribution
size_distribution <- restaurant_groups %>%
  count(group_size) %>%
  mutate(probability = n / sum(n))

# Calculate probability of picking group of 4 or more
size_distribution %>%
  # Filter for groups of 4 or larger
  filter(group_size >= 4) %>%
  # Calculate prob_4_or_more by taking sum of probabilities
  summarize(
    prob_4_or_more = 
    sum(probability)
  )

```
## Data back-ups

The sales software used at your company is set to automatically back 
itself up, but no one knows exactly what time the back-ups happen.
It is known, however, that back-ups happen exactly every 30 minutes.
Amir comes back from sales meetings at random times to update the data
on the client he just met with. He wants to know how long he'll have to
wait for his newly-entered data to get backed up. Use your new knowledge
of continuous uniform distributions to model this situation and answer 
Amir's questions.

### Instuctions `100 xp` {.unnumbered}

```{.r filename="ex_010.R"}
# Min and max wait times for back-up that happens every 30 min
min <- 0
max <- 30
# Min and max wait times for back-up that happens every 30 min
# Calculate probability of waiting less than 5 mins
prob_less_than_5 <- 5/30
prob_less_than_5

# Min and max wait times for back-up that happens every 30 min
min <- 0
max <- 30

# Calculate probability of waiting less than 5 mins
prob_less_than_5 <- 5/30
prob_less_than_5

# Min and max wait times for back-up that happens every 30 min
min <- 0
max <- 30

# Calculate probability of waiting less than 5 mins
prob_less_than_5 <- 5/30
prob_less_than_5
```
## Simulating wait times
To give Amir a better idea of how long he'll have to wait, you'll 
simulate Amir waiting 1000 times and create a histogram to show
him what he should expect. Recall from the last exercise that his
minimum wait time is 0 minutes and his maximum wait time is 30 minutes.

A data frame called  is available and `dplyr` and `ggplot2` are loaded.

### Instuctions `100 xp` {.unnumbered}

- Set the random seed to 334.
- Generate `1000` wait times from the continuous uniform distribution 
that models Amir's wait time. Add this as a new column called time in the
`wait_times` data frame.
- Create a histogram of the simulated wait times with 30 bins.

```{.r filename="ex_011.R"}
# Set random seed to 334
set.seed(334)
# Generate 1000 wait times between 0 and 30 mins, save in time column
wait_times %>%
  mutate(time = runif(1000, min = 0, max = 30)) %>%
  # Create a histogram of simulated times
  ggplot(aes(x = time)) +
    geom_histogram(n_bins=30)

```

## Simulating sales deals

Assume that Amir usually works on 3 deals per week, and overall,
he wins 30% of deals he works on. Each deal has a binary outcome:
it's either lost, or won, so you can model his sales deals with a binomial
distribution. In this exercise, you'll help Amir simulate a year's worth
of his deals so he can better understand his performance.

### Instuctions `100 xp` {.unnumbered}
- Set the random seed to 10 and simulate a single deal.
- Simulate a typical week of Amir's deals, or one week of 3 deals.
- Simulate a year's worth of Amir's deals, or 52 weeks of 3 deals each, 
and store in deals. Calculate the mean number of deals he won per week

```{.r filename="ex_012.R"}
# Set random seed to 10
set.seed(10)
# Simulate a single deal
rbinom(1, 1, 0.3)
rbinom(1, 3, 0.3)
# Set random seed to 10
# Simulate 52 weeks of 3 deals
deals <- rbinom(52, 3, 0.3)

# Calculate mean deals won per week
mean(deals)
```
## Calculating binomial probabilities

Just as in the last exercise, assume that Amir wins 30% of deals. He wants to
get an idea of how likely he is to close a certain number of deals each week.
In this exercise, you'll calculate what the chances are of him closing different
numbers of deals using the binomial distribution.

### Instuctions `100 xp` {.unnumbered}
- What's the probability that Amir closes all 3 deals in a week?


```{.r filename="ex_013.R"}
# Probability of closing 3 out of 3 deals
dbinom(3, 3, 0.3)

# Probability of closing <= 1 deal out of 3 deals
pbinom(1, 3, 0.3)

# Probability of closing > 1 deal out of 3 deals
1 - pbinom(1, 3, 0.3,m lower.tail=FALSE)

```
## How many sales will be won?

Now Amir wants to know how many deals he can expect to close each week 
if his win rate changes. Luckily, you can use your binomial distribution
knowledge to help him calculate the expected value in different situations.
Recall from the video that the expected value of a binomial distribution can
be calculated by $n \times p$.

### Instuctions `100 xp` {.unnumbered}

- Calculate the expected number of sales out of 
the 3 he works on that Amir will win each week if 
he maintains his 30% win rate.

- Calculate the expected number of sales out of 
the 3 he works on that he'll win if his win rate drops to 25%.

- Calculate the expected number of sales out of 
the 3 he works on that he'll win if his win rate 
rises to 35%.

```{.r filename="ex_014.R"}
# Expected number won with 30% win rate
won_30pct <- 3 * 0.3
won_30pct 

# Expected number won with 25% win rate
won_25pct <- 3 * 0.25
won_25pct

# Expected number won with 35% win rate
won_35pct <- 3 * 0.35
won_35pct
```