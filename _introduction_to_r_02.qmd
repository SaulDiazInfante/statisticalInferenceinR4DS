---
format:
  html: 
    highlight-style: dracula
    code-line-numbers: true
    code-block-border-left: true
    code-tools:
      source: true
      toggle: false
      caption: none

title: "Vectors"
---

### Create a vector

Feeling lucky? You better, because this chapter takes you on a trip to the City 
of Sins, also known as Statisticians Paradise!

Thanks to R and your new data-analytical skills, you will learn how to uplift 
your performance at the tables and fire off your career as a professional 
gambler. This chapter will show how you can easily keep track of your betting 
progress and how you can do some simple analyses on past actions. Next stop, 
Vegas Babyâ€¦ VEGAS!!

#### Instructions `100 XP`

* Do you still remember what you have learned in the first chapter? Assign the value `"Go!"` to the variable vegas. Remember: R is case sensitive!

```{.r filename="ex_08.R"}
# Define the variable vegas
vegas <- "Go!"
```

### Create a vector (2)

Let us focus first!

On your way from rags to riches, you will make extensive use of vectors. Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.

In R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses. 

:::{.callout-note}

## For example:

```{.r}
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c")
```
:::
Once you have created these vectors in R, you can use them to do calculations.

#### Instructions `100 XP`
Complete the code such that boolean_vector contains the three elements: 
`TRUE, `FALSE` and `TRUE` (in that order).

```{.r filename="ex_09.R"}
numeric_vector <- c(1, 10, 49)
character_vector <- c("a", "b", "c")

# Complete the code for boolean_vector
boolean_vector <-c(TRUE, FALSE, TRUE)
```
### Create a vector (3)

After one week in Las Vegas and still zero Ferraris in your garage, you decide 
that it is time to start using your data analytical superpowers.

Before doing a first analysis, you decide to first collect all the winnings and
losses for the last week:

For poker_vector:

* On Monday you won $140
* Tuesday you lost $50
* Wednesday you won $20
* Thursday you lost $120
* Friday you won $240

For roulette_vector:

* On Monday you lost $24
* Tuesday you lost $50
* Wednesday you won $100
* Thursday you lost $350
* Friday you won $10

You only played poker and roulette, since there was a delegation of mediums that 
occupied the craps tables. To be able to use this data in R, you decide to 
create the variables poker_vector and roulette_vector.

#### Instructions `100 XP`

Assign the winnings/losses for roulette to the variable roulette_vector. You lost $24, then lost $50, won $100, lost $350, and won $10.

```{.r filename="ex_10.R"}
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)  
```

### Naming a vector

As a data analyst, it is important to have a clear view on the data that you are 
using. Understanding what each element refers to is therefore essential.

In the previous exercise, we created a vector with your winnings over the week. 
Each vector element refers to a day of the week but it is hard to tell which 
element belongs to which day. It would be nice if you could show that in the 
vector itself.


You can give a name to the elements of a vector with the `names()` function. 
Have a look at this example:

```{.r}
#| code-line-numbers: false
#| code-fold: false
#| code-summary: "Show the code"

some_vector <- c("John Doe", "poker player")
names(some_vector) <- c("Name", "Profession")
```


This code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession. Printing the contents to the console yields following output:

:::{.callout-note collapse="true"}
## Output
          Name     Profession 
    "John Doe" "poker player" 
:::

#### Instructions `100 XP`

The code in the editor names the elements in `poker_vector` with the days of the 
week. Add code to do the same thing for `roulette_vector`.

```{.r filename="ex_11.R"}
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Assign days as names of poker_vector
names(poker_vector) <- 
  c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

# Assign days as names of roulette_vector

names(roulette_vector) <- 
  c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
```

### Naming a vector (2)

If you want to become a good statistician, you have to become lazy. 
(If you are already lazy, chances are high you are one of those exceptional, 
natural-born statistical talents.)

In the previous exercises you probably experienced that it is boring and 
frustrating to type and retype information such as the days of the week. 
However, when you look at it from a higher perspective, there is a more 
efficient way to do this, namely, to assign the days of the week vector to a
 **variable**!

Just like you did with your poker and roulette returns, you can also create a 
variable that contains the days of the week. This way you can use and re-use it.

#### Instructions `100 XP`

- A variable days_vector that contains the days of the week has already been 
created for you.

- Use `days_vector` to set the names of `poker_vector` and `roulette_vector`.

```{.r filename="ex_12.R"}
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# The variable days_vector
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
 
# Assign the names of the day to roulette_vector and poker_vector
names(poker_vector) <- days_vector  
names(roulette_vector) <- days_vector
```
###  Calculating total winnings

Now that you have the poker and roulette winnings nicely as named vectors, you
 can start doing some data analytical magic.

You want to find out the following type of information:

- How much has been your overall profit or loss per day of the week?
- Have you lost money over the week in total?
- Are you winning/losing money on poker or on roulette? To get the answers, you 
have to do arithmetic calculations on vectors.

It is important to know that if you sum two vectors in R, it takes the 
element-wise sum. For example, the following three statements are completely 
equivalent:

```{r}
#| output: false
#| code-line-numbers: false
#| code-fold: false
#| code-summary: "Show the code"
c(1, 2, 3) + c(4, 5, 6)
c(1 + 4, 2 + 5, 3 + 6)
c(5, 7, 9)
```

You can also do the calculations with variables that represent vectors:

```{r}
#| code-line-numbers: false
#| code-fold: false
#| code-summary: "Show the code"
#| output: false
a <- c(1, 2, 3) 
b <- c(4, 5, 6)
c <- a + b
```

#### Instructions `100 XP`

- Take the sum of the variables `A_vector` and `B_vector` and assign it to 
total_vector.
- Inspect the result by printing out `total_vector`.

```{.r filename="ex_13.R"}
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)

# Take the sum of A_vector and B_vector
total_vector <- A_vector + B_vector
  
# Print out total_vector
print(total_vector)
```

### Calculating total winnings (2)

Now you understand how R does arithmetic with vectors, it is time to get those 
Ferraris in your garage! First, you need to understand what the overall profit 
or loss per day of the week was. The total daily profit is the sum of the 
profit/loss you realized on poker per day, and the profit/loss you realized on 
roulette per day.

In R, this is just the sum of `roulette_vector` and `poker_vector`.

#### Instructions `100 XP`
Assign to the variable total_daily how much you won or lost on each day in 
total (poker and roulette combined).

```{r filename= "ex_14.R"}
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Assign to total_daily how much you won/lost on each day
total_daily <- roulette_vector + poker_vector
```

### Calculating total winnings (3)

Based on the previous analysis, it looks like you had a mix of good and bad 
days. This is not what your ego expected, and you wonder if there may be a very 
tiny chance you have lost money over the week in total?

A function that helps you to answer this question is `sum()`. It calculates the 
sum of all elements of a vector. For example, to calculate the total amount of 
money you have lost/won with poker you do:

```{r}
#| code-line-numbers: false
#| code-fold: false
#| code-summary: "Show the code"
#| output: false
total_poker <- sum(poker_vector)
```

#### Instructions `100 XP`

- Calculate the total amount of money that you have won/lost with roulette and 
assign to the variable `total_roulette`.
- Now that you have the totals for roulette and poker, you can easily calculate 
`total_week` (which is the sum of all gains and losses of the week).
- Print out `total_week`.

```{.r filename="ex_15.R"}
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Total winnings with poker
total_poker <- sum(poker_vector)

# Total winnings with roulette
total_roulette <-  sum(roulette_vector)

# Total winnings overall
total_week <- total_poker + total_roulette

# Print out total_week
print(total_week)
```
### Comparing total winnings

Oops, it seems like you are losing money. Time to rethink and adapt your 
strategy! This will require some deeper analysisâ€¦

After a short brainstorm in your hotel's jacuzzi, you realize that a possible 
explanation might be that your skills in roulette are not as well developed as 
your skills in poker. So maybe your total gains in poker are higher (or `>` ) 
than in roulette.

Instructions `100 XP`

- Calculate `total_poker` and `total_roulette` as in the previous exercise. 
Use the `sum()` function twice.
- Check if your total gains in poker are higher than for roulette by using a 
comparison. Simply print out the result of this comparison. What do you 
conclude, should you focus on roulette or on poker?

```{.r filename="ex_16.R"}

# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Calculate total gains for poker and roulette
total_poker <- sum(poker_vector)
total_roulette <- sum(roulette_vector)

# Check if you realized higher total gains in poker than in roulette

print(total_poker > total_roulette) 
```
