{
  "hash": "4a787e5e4f739b6954e7bcf693be413b",
  "result": {
    "markdown": "\n# Data frames\n\n## What's a data frame?\nYou may remember from the chapter about matrices that all the elements that you\nput in a matrix should be of the same type. Back then, your dataset on Star Wars \nonly contained numeric elements.\n\nWhen doing a market research survey, however, you often have questions such as:\n\n- 'Are you married?' or 'yes/no' questions (logical)\n- 'How old are you?' (numeric)\n- 'What is your opinion on this product?' or other 'open-ended' questions  \n(character)\n- …\nThe output, namely the respondents' answers to the questions formulated above,\nis a dataset of different data types. You will often find yourself working with\ndatasets that contain different data types instead of only one.\n\nA data frame has the variables of a dataset as columns and the observations as \nrows. This will be a familiar concept for those coming from different \nstatistical software packages such as SAS or SPSS.\n\n### Instructions `100 XP` {.unnumbered}\nSubmit the answer. The data from the built-in example data frame \n`mtcars` will be printed to the console.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n:::\n\n\n## Quick, have a look at your dataset\n\nWow, that is a lot of cars!\n\nWorking with large datasets is not uncommon in data analysis. When you work with\n(extremely) large datasets and data frames, your first task as a data analyst is\nto develop a clear understanding of its structure and main elements. Therefore, \nit is often useful to show only a small part of the entire dataset.\n\nSo how to do this in R? Well, the function `head()` enables you to show the \nfirst observations of a data frame. Similarly, the function `tail()` prints out \nthe last observations in your dataset.\n\nBoth `head()` and t`ail()` print a top line called the \n'header', which contains the names of the different variables in your dataset.\n\n### Instructions `100 XP` {.unnumbered}\n\nCall head() on the mtcars dataset to have a look at the header and the first \nobservations.\n```{.r filename=\"ex_42.R\"}\n# Call head() on mtcars\nhead(mtcars)\n``` \n## Have a look at the structure\n\nAnother method that is often used to get a rapid overview of your data is the\nfunction `str()`. The function `str()` shows you the structure of your dataset.\n\nFor a data frame it tells you:\n\n- The total number of observations (e.g. 32 car types)\n- The total number of variables (e.g. 11 car features)\n- A full list of the variables names (e.g. mpg, cyl … )\n- The data type of each variable (e.g. num)\n- The first observations\n\nApplying the `str()` function will often be the first thing that you do when \nreceiving a new dataset or data frame. It is a great way to get more insight in \nyour dataset before diving into the real analysis.\n\n### Instructions `100 XP` {.unnumbered}\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers,\nvariables and data types as mentioned above.\n\n```{.r filename=\"ex_43.R\"}\nstr(mtcars)\n```\n\n## Creating a data frame\n\nSince using built-in datasets is not even half the fun of creating your own \ndatasets, the rest of this chapter is based on your personally developed \ndataset. Put your jet pack on because it is time for some space exploration!\n\nAs a first goal, you want to construct a data frame that describes the main \ncharacteristics of eight planets in our solar system. \nAccording to your good friend Buzz, the main features of a planet are:\n\n- The type of planet (Terrestrial or Gas Giant).\n- The planet's diameter relative to the diameter of the Earth.\n- The planet's rotation across the sun relative to that of the Earth.\n- If the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough\nto create the necessary vectors: name, type, diameter, rotation and rings;\nthese vectors have already been coded up in the editor. The first element in\neach of these vectors correspond to the first observation.\n\nYou construct a data frame with the `data.frame()` function. As arguments,\nyou pass the vectors from before: they will become the different columns of your\ndata frame. Because every column has the same length, the vectors you pass \nshould also have the same length. But don't forget that it is possible \n(and likely) that they contain different types of data.\n\n### Instructions `100 XP` {.unnumbered}\n\nUse the function `data.frame()` to construct a data frame. \nPass the vectors `name`, `type`, `diameter`, `rotation` and `rings` as \narguments to `data.frame()`, in this order. Call the resulting data frame\n`planets_df`.\n\n```{.r filename=\"ex_44.R\"}\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)\n```\n\n## Creating a data frame (2)\n\nThe `planets_df` data frame should have 8 observations and 5 variables. \nIt has been made available in the workspace, so you can directly use it.\n\n### Instructions `100 XP` {.unnumbered}\n\nUse `str()` to investigate the structure of the new planets_df variable.\n\n```{.r filename=\"ex_45.R\"}\nstr(planets_df)\n```\n\n## Selection of data frame elements\n\nSimilar to vectors and matrices, you select elements from a data frame with\nthe help of square brackets `[ ]`. By using a comma, you can indicate what \nto select from the rows and the columns respectively. For example:\n\n- `my_df[1,2]` selects the value at the first row and second column in `my_df`.\n- `my_df[1:3,2:4]` selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n \nSometimes you want to select all elements of a row or column.\nFor example, `my_df[1, ]` selects all elements of the first row.\nLet us now apply this technique on `planets_df`!\n\n### Instructions `100 XP` {.unnumbered}\n\n- From `planets_df`, select the diameter of Mercury: this is the value at \nthe first row and the third column. Simply print out the result.\n- From `planets_df`, select all data on Mars (the fourth row).\n Simply print out the result.\n\n```{.r filename=\"ex_46.R\"}\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])\n```\n## Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also \nuse the variable names to select columns of a data frame.\n\nSuppose you want to select the first three elements of the type column.\nOne way to do this is\n```{.r }\nplanets_df[1:3, 2]\n```\nA possible disadvantage of this approach is that you have to know\n(or look up) the column number of type, which gets hard if you have a \nlot of variables. It is often easier to just make use of the variable name:\n\n```{.r }\nplanets_df[1:3,\"type\"]\n```\n### Instructions `100 XP` {.unnumbered}\n\nSelect and print out the first 5 values in the `\"diameter\"` \ncolumn of `planets_df`.\n\n```{.r filename=\"ex_47.R\"}\nprint(planets_df[1:5, \"diameter\"])\n```\n## Only planets with rings\n\nYou will often want to select an entire column, namely one specific \nvariable from a data frame. If you want to select all elements of the\n variable diameter, for example, both of these will do the trick:\n\n```{.r}\nplanets_df[,3]\nplanets_df[,\"diameter\"]\n```\nHowever, there is a short-cut. If your columns have names,\nyou can use the `$` sign:\n\n```{.r }\nplanets_df$diameter\n```\n### Instructions `100 XP` {.unnumbered}\n\n- Use the `$` sign to select the `rings` variable from `planets_df`.\nStore the vector that results as `rings_vector`.\n- Print out `rings_vector` to see if you got it right.\n\n```{.r filename=\"ex_48.R\"}\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)\n``` \n\n## Only planets with rings (2)\nYou probably remember from high school that some planets in our solar\nsystem have rings and others do not. Unfortunately you can not recall\n their names. Could R help you out?\n\nIf you type rings_vector in the console, you get:\n\n> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n\nThis means that the first four observations (or planets) do not have a\nring (`FALSE`), but the other four do (`TRUE`). However, you do not get\na nice overview of the names of these planets, their diameter, etc.\nLet's try to use `rings_vector` to select the data for the four planets\nwith rings.\n\n### Instructions `100 XP` {.unnumbered}\n\nThe code in the editor selects the `name` column of all planets that have rings.\nAdapt the code so that instead of only the `name` column, all columns \nfor planets that have rings are selected.\n\n```{.r filename=\"ex_49.R\"}\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]\n\n```\n\n## Only planets with rings but shorter\n\nSo what exactly did you learn in the previous exercises? \nYou selected a subset from a data frame (`planets_df`) based on whether or \nnot a certain condition was true (rings or no rings),\nand you managed to pull out all relevant data. Pretty awesome! By now,\nNASA is probably already flirting with your CV ;-).\n\nNow, let us move up one level and use the function `subset()`. \nYou should see the `subset()` function as a short-cut to do\n exactly the same as what you did in the previous exercises.\n\n```{.r}\nsubset(my_df, subset = some_condition)\n```\nThe first argument of subset() specifies the dataset for which\nyou want a subset. By adding the second argument, you give R the\nnecessary information and conditions to select the correct subset.\n\nThe code below will give the exact same result as you got in the \nprevious exercise, but this time, you didn't need the `rings_vector`!\n\n```{.r}\nsubset(planets_df, subset = rings)\n```\n### Instructions `100 XP` {.unnumbered}\n\nUse `subset()` on `planets_df` to select planets that have a \n`diameter` smaller than Earth. Because the \n`diameter` variable is a relative measure of the planet's diameter w.r.t \nthat of planet Earth, your condition is `diameter < 1`.\n\n```{.r filename=\"ex_50.R\"}\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)\n```\n## Sorting\nMaking and creating rankings is one of mankind's favorite affairs. \nThese rankings can be useful (best universities in the world),\nentertaining (most influential movie stars) or pointless\n(best 007 look-a-like).\n\nIn data analysis you can sort your data according to a certain variable\nin the dataset. In R, this is done with the help of the function `order()`.\n\n`order()` is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\n\n```{.r}\na <- c(100, 10, 1000)\norder(a)\n```\n\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of `order(a)`.\n\nThis means we can use the output of order(a) to reshuffle a:\n```{.r}\na[order(a)]\n```\n\n### Instructions `100 XP` {.unnumbered}\n\nExperiment with the `order()` function in the console. Submit the answer when\nyou are ready to continue.\n```{.r filename=\"ex_51.R\"}\nx <- rnorm(10)\norder(x)\n```\n## Sorting your data frame\n\nAlright, now that you understand the `order()` function, let us do \nsomething useful with it. You would like to rearrange your data frame\nsuch that it starts with the smallest planet and ends with the largest one.\nA sort on the `diameter` column.\n\n### Instructions `100 XP` {.unnumbered}\n\n- Call `order()` on `planets_df$diameter` (the `diameter` column of \n`planets_df`). Store the result as `positions`.\n\n- Now reshuffle `planets_df` with the positions \nvector as row indexes inside square brackets. \nKeep all columns. Simply print out the result.\n\n\n```{.r filename=\"ex_52.R\"}\n# planets_df is pre-loaded in your workspace\n\n# Use order() to create positions\npositions <-  order(planets_df$diameter)\n\n# Use positions to sort planets_df\nplanets_df[positions, ]\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}