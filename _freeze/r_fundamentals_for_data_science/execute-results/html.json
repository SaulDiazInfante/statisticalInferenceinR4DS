{
  "hash": "d5417fb4616e968e9243f42483af14cb",
  "result": {
    "markdown": "# Nuts and bolts: Data types {.unnumbered}\n\n## Entering Input: the assigment operator {.unnumbered}\n\nThe thing that we type on the R console prompt are expressions. The firs \nexpression we discuses here is the assignment operator, please watch the \nfollowing video <https://www.youtube.com/watch?v=vGY5i_J2c-c&t=283s>\n\nAt the R console, any executable typed text that we put a side of the prompt are\ncalled expressions. We start by the $\\texttt{<-}$ symbol is the assignment\noperator.\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"what's up\"\n```\n:::\n:::\n\nThe `[1]` shown in the output indicates that `x` is a \n`vector` and 0 is the element at position with `index` 1.\n\n\n\n<!-- #{{< include _introduction_to_r_01.qmd >}} -->\n\n<!-- {{< include _introduction_to_r_02.qmd >}} -->\n\n<!-- {{< include _introduction_to_r_03.qmd >}} -->\n\n<!-- {{< include _introduction_to_r_04.qmd >}} -->\n\n<!-- {{< include _introduction_to_r_05.qmd >}} -->\n\n<!-- {{< include _introduction_to_r_06.qmd >}} -->\n\n<!-- {{< include _intermediate_r_01.qmd >}} -->\n<!-- {{< include _intermediate_r_02.qmd >}} -->\n\n# Best Coding Practices for R\n\n## What we mean when say \"better coding practice\"\n\nR programmers have a bad reputation writing bad code. Perhaps the main reason is\nthat the people whose write much of the package are not programmers but\nscientific from other areas. Sometimes we overestimate crucial aspects from a\nprogramming standpoint. As R programmers we overcome to write the code for\nproduction. Mostly we write scripts and when we deploy it the same when we just\nwrap it in a function and perhaps a package. It is common to face poorly written\ncode---**columns were referred by numbers, functions were dependent upon global\nenvironment variables, 50+ lines functions without arguments and with over-sized\nlines code 100 characters or more, not indentation, poor naming, conventions**\netc,...,.\n\nWe strongly encourage to use a style. Yea I know, there is not a unique way to\ndo it, but the philosophy is to follow a consistent style. With respect to this\nregard made yourself a favor and read this great book for R\n\n<https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/>\n\n\n\n## Folder Structure\n\n## Code Structure\n\n## Sections\n\n## Structural Composition\n\n## Identation\n\n## Styling\n\n## Final Comments\n\n# Tidyverse Fundamentals with R {.unnumbered}\n\n## Introduction to Tidyverse\n\n## Reshaping Data with tidyr\n\n## Project\n\n## Modeling with Data in the Tidyverse\n\n## Communication with Data in the Tidyverse\n\n## Categorical Data in the Tydiverse\n\n# Data Manipulation {.unnumbered}\n\n## Data Manipulation with dplyr\n\n## Joining Data with dplyr\n\n## Case Study: Exploratory Data Analysis in R\n\n## Data Manipulation with data.table in R\n\n## Joining Data with data.table in R\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}