# From Wide to Long and Back
This chapter is all about pivoting data from a wide to long format and back 
again using the `pivot_longer()` and `pivot_wider()` functions. You'll need 
these functions when variables are hidden in messy column names or when 
variables are stored in rows instead of columns. You'll learn about space dogs,
nuclear bombs, and planet temperatures along the way.

## Nuclear bombs per country

You've been given a version of the Nuclear Explosion DataBase (NEDB) where
country names are specified in the column headers (nuke_df). You want to 
visualize how many nukes were detonated per year per country. You'll need to 
pivot the data and replace NA values first.

The ggplot2 package is needed.

### Instructions `100 XP` {.unnumbered}

Pivot all columns except for year to a longer format.
```{.r filename="ex_008.R"}
nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(-"year")

nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  )

nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  ) %>%
  # Replace NA values for n_bombs with 0L
  replace_na(list(n_bombs = 0L))

  nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  ) %>% 
  # Replace NA values for n_bombs with 0L
  replace_na(list(n_bombs = 0L)) %>% 
  # Plot the number of bombs per country over time
  ggplot(aes(x=year, y=n_bombs, group=country, color=country)) +
    geom_line()


```

## WHO obesity per country
According to the World Health Organization (WHO), worldwide obesity has nearly 
tripled since 1975. You're interested in the severity of this global health 
issue per country and whether males and females are affected differently. 
You'll use the WHO's obesity data (obesity_df) to investigate this issue. 
The data holds the percentage of females, males, and both sexes combined that
are considered obese (BMI > 30) per country.

You want to create a scatterplot where, per nation, you can see the obesity data 
colored differently for females and males. This implies that sex should become
 a variable with its own column.

Load the ggplot2 package.

### Instructions `100 XP` {.unnumbered}

- Pivot the male and female columns. The old column names should go in the
sex column, the original values should go in the pct_obese column.

```{.r filename="ex_009.R"}
obesity_df %>% 
  # Pivot the male and female columns
  pivot_longer(
    c("male", "female"),
    names_to = "sex",
    values_to = "pct_obese"
  )
obesity_df %>% 
  # Pivot the male and female columns
  pivot_longer(c(male, female),
               names_to = "sex",
               values_to = "pct_obese") %>% 
  # Create a scatter plot with pct_obese per country colored by sex
  ggplot(aes(x = country, color = sex,
             y = forcats::fct_reorder(country, both_sexes))) +
  geom_point() +
  scale_y_discrete(breaks = c("India", "Nauru", "Cuba", "Brazil",
                              "Pakistan", "Gabon", "Italy", "Oman",
                              "China", "United States of America")) +
  labs(x = "% Obese", y = "Country")

```

## Bond... James Bond

You've been given a James Bond movie dataset (`bond_df`) and want to visualize
the number of movies that Bond actors have featured in per decade. However,
the data is in an untidy format with the decade values captured in the column 
headers. You'll tidy this dataset to give each variable its own column.

The ggplot2 package is needed.

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_010.R"}
bond_df %>% 
  # Pivot the data to long format and set the column names
pivot_longer(
  c(
    `1960`,
    `1970`,
    `1980`,
    `1990`,
    `2000`,
    `2010`,
    `2020`
  ),
  names_to = "decade",
  values_to = "n_movies"
)
bond_df %>% 
  # Pivot the data to long format
  pivot_longer(
    -Bond, 
    # Overwrite the names of the two newly created columns
    names_to = "decade", 
    values_to = "n_movies", 
    # Drop na values
    values_drop_na = TRUE
  )
  bond_df %>% 
  # Pivot the data to long format
  pivot_longer(
    -Bond, 
    # Overwrite the names of the two newly created columns
    names_to = "decade", 
    values_to = "n_movies", 
    # Drop na values
    values_drop_na = TRUE, 
    # Transform the decade column data type to integer
    names_transform = list(decade = as.integer)  
  ) %>% 
  ggplot(aes(x = decade + 5, y = n_movies, fill = Bond))+
  geom_col()
```

## New-Zealand's bird of the year

Every year New Zealanders vote en masse to decide which species gets the bird 
of the year trophy. The contest is organized by the Forest & Bird agency which
allows each person to give points to up to five birds (first pick gets 
5 points, second 4, â€¦). Your job is to decide this year's winner from the 
messy dataset that's been pre-loaded for you as bird_df.

The dplyr package is needed.
### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_011.R"}
bird_df %>%
  # Pivot the data to create a two column data frame
  pivot_longer(
    c(points_5, points_4, points_3, points_2, points_1),
    names_to = "points",
    names_prefix = "points_",
    names_transform = list(points = as.integer),
    values_to = "species",
    values_drop_na = TRUE
  )
bird_df %>%
  # Pivot the data to create a 2 column data frame
  pivot_longer(
    starts_with("points_"),
    names_to = "points",
    names_prefix = "points_",
    names_transform = list(points = as.integer),
    values_to = "species",
    values_drop_na = TRUE
  ) %>%
  group_by(species) %>% 
  summarize(total_points=sum(points)) %>% 
  slice_max(total_points, n = 5)

```

## Big tech stock prices

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_012.R"}

```

## Soviet space dogs, the dogs perspective

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_013.R"}

```

## WHO obesity vs. life expectancy

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_014.R"}

```

## Unconting ovservations

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_015.R"}

```

## Soviet space dogs, the flight perspective

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_016.R"}

```

## Planet temperature & distance to the Sun

### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_017.R"}

```

## Transporting plantet data
 
### Instructions `100 XP` {.unnumbered}

```{.r filename="ex_018.R"}

```
