[
  {
    "objectID": "intro.html#introduction",
    "href": "intro.html#introduction",
    "title": "1  Airbnb listings in New York City",
    "section": "Introduction",
    "text": "Introduction\nIn this project, you will apply your data importing and cleaning skills to uncover insights about the Airbnb market in New York City.\nYou will import data from multiple file types and combine them to answer questions about the Airbnb market in New York. You will also use your string cleaning and date manipulation skills to extract accurate information from the datasets. The packages and tools used here are utilized by data scientists everyday since so much of the world’s data is stored in unconventional formats and is not clean or analysis-ready."
  },
  {
    "objectID": "intro.html#instructions",
    "href": "intro.html#instructions",
    "title": "1  Airbnb listings in New York City",
    "section": "1.1 Instructions",
    "text": "1.1 Instructions\nYou are a consultant working for a real estate start-up and have been asked to look into the short-term rental market in New York, so you’ve gathered Airbnb listing data from several different sources. You’ll examine this data to answer the following questions, but you’ll need to combine the different files from your three sources into one dataset and clean it in order to calculate the metrics you’re interested in.\nYour questions are as follows:\n\nWhat is the average listing price? Save your answer as a numeric variable, avg_price.\nHow many of the listings are private rooms? Save your answer as a numeric variable called nb_private_rooms.\n\nWhen were the earliest and most recent reviews in the dataset? Save these as Dates in a tibble called review_dates. It should contain two columns named first_reviewed, which contains the earliest date in the dataset, and last_reviewed, which contains the latest date in the dataset."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project: NYC Airbnb Data Analysis",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "_question_01.html",
    "href": "_question_01.html",
    "title": "\n2  What is the average listing price?\n",
    "section": "",
    "text": "Save your answer as a numeric variable, avg_price.\n\nCodelibrary(\"dplyr\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nCodelibrary(\"readr\")\nlibrary(\"stringr\")\n\npath <- file.path(\"datasets\", \"airbnb_price.csv\")\ndf_price <- read_csv(path)\n\nRows: 25209 Columns: 3\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): price, nbhood_full\ndbl (1): listing_id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeglimpse(df_price)\n\nRows: 25,209\nColumns: 3\n$ listing_id  <dbl> 2595, 3831, 5099, 5178, 5238, 5295, 5441, 5803, 6021, 6848…\n$ price       <chr> \"225 dollars\", \"89 dollars\", \"200 dollars\", \"79 dollars\", …\n$ nbhood_full <chr> \"Manhattan, Midtown\", \"Brooklyn, Clinton Hill\", \"Manhattan…\n\nCodeavg_price <- df_price %>%\n    mutate(price = as.numeric(str_remove(price, \" dollars\"))) %>%\n    summarize(mean_price = mean(price))\nprint(avg_price)\n\n# A tibble: 1 × 1\n  mean_price\n       <dbl>\n1       142."
  },
  {
    "objectID": "_question_02.html",
    "href": "_question_02.html",
    "title": "\n3  How many of the listings are private rooms?\n",
    "section": "",
    "text": "Save your answer as a numeric variable called nb_private_rooms.\n\nCodelibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nCodelibrary(\"readxl\")\nlibrary(\"stringr\")\n\npath <- file.path(\"datasets\", \"airbnb_room_type.xlsx\")\ndf_room_type <- read_excel(path, sheet = 1)\nglimpse(df_room_type)\n\nRows: 25,209\nColumns: 3\n$ listing_id  <dbl> 2595, 3831, 5099, 5178, 5238, 5295, 5441, 5803, 6021, 6848…\n$ description <chr> \"Skylit Midtown Castle\", \"Cozy Entire Floor of Brownstone\"…\n$ room_type   <chr> \"Entire home/apt\", \"Entire home/apt\", \"Entire home/apt\", \"…\n\nCodenb_private_rooms <- df_room_type %>%\n    mutate(room_type = str_to_lower(room_type)) %>%\n    filter(room_type == \"private room\") %>%\n    count()\n\nprint(nb_private_rooms)\n\n# A tibble: 1 × 1\n      n\n  <int>\n1 11356"
  },
  {
    "objectID": "_question_03.html",
    "href": "_question_03.html",
    "title": "4  When were the earliest and most recent reviews in the dataset?",
    "section": "",
    "text": "Save these as Dates in a tibble called review_dates. It should contain two columns named first_reviewed, which contains the earliest date in the dataset, and last_reviewed, which contains the latest date in the dataset."
  },
  {
    "objectID": "assesment.html#import-the-third-sheet-titled-chickwts-of-character_excel.",
    "href": "assesment.html#import-the-third-sheet-titled-chickwts-of-character_excel.",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.1 Import the third sheet, titled “chickwts” of character_excel.",
    "text": "5.1 Import the third sheet, titled “chickwts” of character_excel.\nSince the first row is skipped you must specify the column names as “weight” and “feed” in that order. Complete the code to return the output\nlibrary(readxl)\n\nread_excel(character_excel,\n    sheet = 3,\n    col_names = c(\"weight\", \"feed\"),\n    skip = 1\n)"
  },
  {
    "objectID": "assesment.html#section",
    "href": "assesment.html#section",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.2 ",
    "text": "5.2 \nThe sales data, previewed below, contains one column for each element of the date, however the day column contains numbers that are currently stored as character strings. Convert so that they are correctly stored as numbers.\n   month day year items_sold\n1    Oct  06 2019         26\n2    Oct  15 2019         12\n3    Oct  24 2019         82\n4    Oct  30 2019          6\n5    Nov  05 2019        101\n6    Nov  18 2019         18"
  },
  {
    "objectID": "assesment.html",
    "href": "assesment.html",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "",
    "text": "6 The survey_sav file is an SPSS file whose file extension is .sav.\nImport this file using an appropriate function. Complete the code to return the output"
  },
  {
    "objectID": "assesment.html#the-sales-data-previewed-below-contains-one-column-for-each",
    "href": "assesment.html#the-sales-data-previewed-below-contains-one-column-for-each",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.2 The sales data, previewed below, contains one column for each",
    "text": "5.2 The sales data, previewed below, contains one column for each\nelement of the date, however the day column contains numbers that are currently stored as character strings. Convert so that they are correctly stored as numbers.\n   month day year items_sold\n1    Oct  06 2019         26\n2    Oct  15 2019         12\n3    Oct  24 2019         82\n4    Oct  30 2019          6\n5    Nov  05 2019        101\n6    Nov  18 2019         18\nComplete the code to return the output\nsales %>% \n  mutate(day = as.numeric(day)) %>% \n  head()"
  },
  {
    "objectID": "assesment.html#following-is-a-preview-of-the-data-frames-df1-and-df2",
    "href": "assesment.html#following-is-a-preview-of-the-data-frames-df1-and-df2",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.3 Following is a preview of the data frames df1 and df2:",
    "text": "5.3 Following is a preview of the data frames df1 and df2:\n\n\n  customer_id order_id.x order_id.y\n1          20          5       Jane\n2          21          6       John\n3          22          7       <NA>"
  },
  {
    "objectID": "assesment.html#import-the-third-sheet-titled-chickwts-of-character_excel.-1",
    "href": "assesment.html#import-the-third-sheet-titled-chickwts-of-character_excel.-1",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n6.1 Import the third sheet, titled “chickwts” of character_excel.",
    "text": "6.1 Import the third sheet, titled “chickwts” of character_excel.\nSince the first row is skipped you must specify the column names as “weight” and “feed” in that order. Complete the code to return the output\nlibrary(readxl)\n\nread_excel(character_excel,\n    sheet = 3,\n    col_names = c(\"weight\", \"feed\"),\n    skip = 1\n)"
  },
  {
    "objectID": "assesment.html#the-sales-data-previewed-below-contains-one-column-for-each-1",
    "href": "assesment.html#the-sales-data-previewed-below-contains-one-column-for-each-1",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n6.2 The sales data, previewed below, contains one column for each",
    "text": "6.2 The sales data, previewed below, contains one column for each\nelement of the date, however the day column contains numbers that are currently stored as character strings. Convert so that they are correctly stored as numbers.\n   month day year items_sold\n1    Oct  06 2019         26\n2    Oct  15 2019         12\n3    Oct  24 2019         82\n4    Oct  30 2019          6\n5    Nov  05 2019        101\n6    Nov  18 2019         18\nComplete the code to return the output\nsales %>% \n  mutate(day = as.numeric(day)) %>% \n  head()"
  },
  {
    "objectID": "assesment.html#following-is-a-preview-of-the-data-frames-df1-and-df2-1",
    "href": "assesment.html#following-is-a-preview-of-the-data-frames-df1-and-df2-1",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n6.3 Following is a preview of the data frames df1 and df2:",
    "text": "6.3 Following is a preview of the data frames df1 and df2:\nquarto-executable-code-5450563D\ndf1 <- data.frame(\n    customer_id = c(20, 21, 22),\n    order_id = c(5, 6, 7)\n)\n\ndf2 <- data.frame(\n    customer_id = c(20, 21, 23),\n    order_id = c(\"Jane\", \"John\", \"Joe\")\n)\nleft_join(df1, df2, by = \"customer_id\")"
  },
  {
    "objectID": "assesment.html#the-survey_sav-file-is-an-spss-file-whose-file-extension-is-.sav.",
    "href": "assesment.html#the-survey_sav-file-is-an-spss-file-whose-file-extension-is-.sav.",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.4 The survey_sav file is an SPSS file whose file extension is .sav.",
    "text": "5.4 The survey_sav file is an SPSS file whose file extension is .sav.\nImport this file using an appropriate function. Complete the code to return the output\nlibrary(haven)\nread_sav(survey_sav)"
  },
  {
    "objectID": "assesment.html#the-preview-of-the-plants-data-frame-shows-that-the",
    "href": "assesment.html#the-preview-of-the-plants-data-frame-shows-that-the",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.5 The preview of the plants data frame shows that the",
    "text": "5.5 The preview of the plants data frame shows that the\nsales_price has been stored as a character string. Convert the sales_price to a numeric variable.\n# A tibble: 5 x 3\n  name     binomial_name      sales_price\n  <chr>    <chr>              <chr>      \n1 Alfredo  Monstera Deliciosa 24.95      \n2 Isabella Calathea Orbifolia 28.95      \n3 Marty    Areca              44.95      \n4 Ollie    Alocasia Zebrina   29.95      \n5 Howerd   Kentiapalm         49.95       \nComplete the code to return the output\nlibrary(dplyr)\n\nplants %>% \n  mutate(sales_price = as.numeric(sales_price))"
  },
  {
    "objectID": "assesment.html#convert-the-elements-in-the-vector-numbers_as_chars-into-numeric",
    "href": "assesment.html#convert-the-elements-in-the-vector-numbers_as_chars-into-numeric",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.6 Convert the elements in the vector numbers_as_chars into numeric",
    "text": "5.6 Convert the elements in the vector numbers_as_chars into numeric\ndata. Complete the code to return the output\nlibrary(readr)\n\nnumbers_as_chars <- c(\"1000\", \"10.2\", \"178\")\n\nas.numeric(numbers_as_chars)"
  },
  {
    "objectID": "assesment.html#the-costs-table-shown-below-contains-a-column-of-dates-in-character",
    "href": "assesment.html#the-costs-table-shown-below-contains-a-column-of-dates-in-character",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.7 The costs table shown below contains a column of dates in character",
    "text": "5.7 The costs table shown below contains a column of dates in character\nstring format.\n# A tibble: 3 x 2\n  date_chr   value   \n  <chr>      <chr>   \n1 2019-09-01 USD-1275\n2 2019-09-03 GBP-995 \n3 2019-08-30 EUR-1050\n\nComplete the code to return the output\nlibrary(dplyr)\nlibrary(lubridate)\n\ncosts %>%\n  mutate(\n    date_format = as_date(date_chr)\n  )"
  },
  {
    "objectID": "assesment.html#the-data-movie_reviews-has-been-imported-in-the-format-shown-below.",
    "href": "assesment.html#the-data-movie_reviews-has-been-imported-in-the-format-shown-below.",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.8 The data movie_reviews has been imported in the format shown below.",
    "text": "5.8 The data movie_reviews has been imported in the format shown below.\nConvert this to a suitable structure so that it can be used for plotting using ggplot2.\n# A tibble: 3 x 3\n  `Casino Royale` `Despicable Me` `Harry Potter`\n            <dbl>           <dbl>          <dbl>\n1              10               4              8\n2               2               9              8\n3      \nlibrary(tidyr)\n\nmovie_reviews %>% \n    pivot_longer(everything(), \n               names_to = \"movie\", \n               values_to = \"rating\")\nExpected Output\n# A tibble: 9 × 2\n  movie         rating\n  <chr>          <dbl>\n1 Casino Royale     10\n2 Despicable Me      4\n3 Harry Potter       8\n4 Casino Royale      2\n5 Despicable Me      9\n6 Harry Potter       8\n7 Casino Royale      5\n8 Despicable Me      8\n9 Harry Potter       6"
  },
  {
    "objectID": "assesment.html#before-each-of-the-strings-in-the-vector-x",
    "href": "assesment.html#before-each-of-the-strings-in-the-vector-x",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.9 Before each of the strings in the vector x,",
    "text": "5.9 Before each of the strings in the vector x,\nadd underscores (_) so they are all a width of 4 characters. Complete the code to return the output\nlibrary(stringr)\n\nx <- c(\"A\", \"BC\", \"DEF\")\n\nstr_pad(x, width = 4, \n    side = \"left\", pad = \"_\")\nExpected Output\n[1] \"___A\" \"__BC\" \"_DEF\""
  },
  {
    "objectID": "assesment.html#list-all-of-the-sheets-of-the-character_excel-excel-workbook.",
    "href": "assesment.html#list-all-of-the-sheets-of-the-character_excel-excel-workbook.",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.10 List all of the sheets of the character_excel excel workbook.",
    "text": "5.10 List all of the sheets of the character_excel excel workbook.\nComplete the code to return the output\nlibrary(readxl)\n\nexcel_sheets(character_excel)\nExpected Output\n[1] \"iris\"     \"mtcars\"   \"chickwts\" \"quakes\""
  },
  {
    "objectID": "assesment.html#some-mistakes-were-made-during-data-entry-of-plant-inventory-for",
    "href": "assesment.html#some-mistakes-were-made-during-data-entry-of-plant-inventory-for",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.11 Some mistakes were made during data entry of plant inventory for",
    "text": "5.11 Some mistakes were made during data entry of plant inventory for\nGreen Friend Nursery. Remove the leading spaces from all entries in the water_requirement column of the plants data.\n# A tibble: 5 x 3\n  name     binomial_name      water_requirement\n  <chr>    <chr>              <chr>            \n1 Alfredo  Monstera Deliciosa moderate         \n2 Isabella Calathea Orbifolia   moderate     \n3 Marty    Areca                high         \n4 Ollie    Alocasia Zebrina   high             \n5 Howerd   Kentiapalm         moderate  \nComplete the code to return the output\nlibrary(stringr)\nlibrary(dplyr)\n\nplants %>% \n  mutate(water_requirement = str_trim(water_requirement))\n# A tibble: 5 × 3\n  name     binomial_name      water_requirement\n  <chr>    <chr>              <chr>            \n1 Alfredo  Monstera Deliciosa moderate         \n2 Isabella Calathea Orbifolia moderate         \n3 Marty    Areca              high             \n4 Ollie    Alocasia Zebrina   high             \n5 Howerd   Kentiapalm         moderate"
  },
  {
    "objectID": "assesment.html#complete-the-code-to-import-the",
    "href": "assesment.html#complete-the-code-to-import-the",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.12 Complete the code to import the",
    "text": "5.12 Complete the code to import the\ncharacter_chart csv, using column headers “numbers”, “letters”, and “symbols” in that order.\nComplete the code to return the output\nlibrary(tidyverse)\nread_csv(character_chart, col_names =  c(\"numbers\", \"letters\", \"symbols\") )\nExpected Output\n# A tibble: 5 × 3\n  numbers letters symbols\n    <dbl> <chr>   <chr>  \n1       1 a       !      \n2       2 b       @      \n3       3 c       #      \n4       4 d       $      \n5       5 e       %"
  },
  {
    "objectID": "assesment.html#the-data-df-shown-below-contains-information-about-bmi-for-a",
    "href": "assesment.html#the-data-df-shown-below-contains-information-about-bmi-for-a",
    "title": "\n5  Convert the character strings in the vector colors to all upper case.\n",
    "section": "\n5.13 The data, df shown below, contains information about bmi for a",
    "text": "5.13 The data, df shown below, contains information about bmi for a\nnumber of countries over time. For presentation purposes you want to join the countries and iso columns into a single column, country_iso.\nComplete the code to return the output\nlibrary(tidyr)\nunite(df, country_iso, countries, iso, sep = \"/\")\nExpected Output\nyear    country_iso      bmi\n1 1980 Afghanistan/AF 21.48678\n2 1980     Albania/AL 25.22533\n3 1980     Algeria/DZ 22.25703"
  }
]