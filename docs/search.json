[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Inference For Data Science",
    "section": "",
    "text": "Preface\nWho I am. I am Saul Diaz Infante Velasco. I just starting as assistant professor at the Data Science graduate program of Universidad de Sonora at Hermosillo Mexico. My Background is related with numerical analysis and stochastic models. I’m are a enthusiastic of this treading topic called Data-Science, but perhaps at the moment I only have just intuition about what really it is. However, I have been programming almost 20 years an moved from old programming langues as FORTRAN, Pascal, Basic, Cobol, C, C++ to the new well established treading development workflows like R, Python and Julia. This is my firs attempt in R.\nMore of this book is work in progress. We aim to provide material as well we review and improve our basic skills to face the study of the most popular methods in Machine learning. Thus the book try to cover fundamentals in R programming as data types, flow control structures and put particular importance in the well practice of coding functions. Then we moves to the management of data whit dplyr and other packages. To finish this part we discuss some package to visualize data. Then, we face the problem o estimation and explore techniques based on bootstrap–and another sampling flavors.\nThis book has been started on January, 2023 as part of a course to the Master on Data Science from Universidad de Sonora.\nI’m writing this book to follow a path of self learning, understanding and and joy for this matter called Data Science. I’m not try to become and expert instead I just pursuit the joy of the interaction of math, computational sciences and the generosity of this virtuous learning-teaching process.\nhttps://sauldiazinfante.github.io/statisticalInferenceinR4DS/"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Rubrics for a Data Analyst (Associate and professional)\nWe also want to cover the fundamentals of a common Data Analyst hast to know according to the DataCamp’s rubrics at the current date (March-01, 2023).\nHere we also enclose the material to take the Skill Assessments for Data Analyst and Data Scientist certifications."
  },
  {
    "objectID": "intro.html#the-tidyverse",
    "href": "intro.html#the-tidyverse",
    "title": "Introduction",
    "section": "The tidyverse",
    "text": "The tidyverse\nWe need to install a R package. The majority of the packages that we will use are part of the so-called tidyverse package. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally.\nYou can install the complete tidyverse with the line of code:\n\n\n\nthen we can use it by loading in the preamble section with\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n✔ purrr   0.3.4      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nsee https://www.tidyverse.org/ documentation."
  },
  {
    "objectID": "background_00.html",
    "href": "background_00.html",
    "title": "R fundamentals in programming, data managment and visualization",
    "section": "",
    "text": "We dedicate this part to overview the basics to program in R. The aim of this part is building the basis for Machine learning, namely data types as, vectors, lists, factors and matrices"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html",
    "href": "r_fundamentals_for_data_science.html",
    "title": "Nuts and bolts: Data types",
    "section": "",
    "text": "Best Coding Practices for R"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#entering-input-the-assigment-operator",
    "href": "r_fundamentals_for_data_science.html#entering-input-the-assigment-operator",
    "title": "Nuts and bolts: Data types",
    "section": "Entering Input: the assigment operator",
    "text": "Entering Input: the assigment operator\nThe thing that we type on the R console prompt are expressions. The firs expression we discuses here is the assignment operator, please watch the following video https://www.youtube.com/watch?v=vGY5i_J2c-c&t=283s\nAt the R console, any executable typed text that we put a side of the prompt are called expressions. We start by the \\(\\texttt{<-}\\) symbol is the assignment operator.\n\n\n[1] 0\n\n\n[1] 0\n\n\n[1] \"what's up\"\n\n\nThe [1] shown in the output indicates that x is a vector and 0 is the element at position with index 1."
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#what-we-mean-when-say-better-coding-practice",
    "href": "r_fundamentals_for_data_science.html#what-we-mean-when-say-better-coding-practice",
    "title": "Nuts and bolts: Data types",
    "section": "What we mean when say “better coding practice”",
    "text": "What we mean when say “better coding practice”\nR programmers have a bad reputation writing bad code. Perhaps the main reason is that the people whose write much of the package are not programmers but scientific from other areas. Sometimes we overestimate crucial aspects from a programming standpoint. As R programmers we overcome to write the code for production. Mostly we write scripts and when we deploy it the same when we just wrap it in a function and perhaps a package. It is common to face poorly written code—columns were referred by numbers, functions were dependent upon global environment variables, 50+ lines functions without arguments and with over-sized lines code 100 characters or more, not indentation, poor naming, conventions etc,…,.\nWe strongly encourage to use a style. Yea I know, there is not a unique way to do it, but the philosophy is to follow a consistent style. With respect to this regard made yourself a favor and read this great book for R\nhttps://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#folder-structure",
    "href": "r_fundamentals_for_data_science.html#folder-structure",
    "title": "Nuts and bolts: Data types",
    "section": "Folder Structure",
    "text": "Folder Structure"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#code-structure",
    "href": "r_fundamentals_for_data_science.html#code-structure",
    "title": "Nuts and bolts: Data types",
    "section": "Code Structure",
    "text": "Code Structure"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#sections",
    "href": "r_fundamentals_for_data_science.html#sections",
    "title": "Nuts and bolts: Data types",
    "section": "Sections",
    "text": "Sections"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#structural-composition",
    "href": "r_fundamentals_for_data_science.html#structural-composition",
    "title": "Nuts and bolts: Data types",
    "section": "Structural Composition",
    "text": "Structural Composition"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#identation",
    "href": "r_fundamentals_for_data_science.html#identation",
    "title": "Nuts and bolts: Data types",
    "section": "Identation",
    "text": "Identation"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#styling",
    "href": "r_fundamentals_for_data_science.html#styling",
    "title": "Nuts and bolts: Data types",
    "section": "Styling",
    "text": "Styling"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#final-comments",
    "href": "r_fundamentals_for_data_science.html#final-comments",
    "title": "Nuts and bolts: Data types",
    "section": "Final Comments",
    "text": "Final Comments"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#introduction-to-tidyverse",
    "href": "r_fundamentals_for_data_science.html#introduction-to-tidyverse",
    "title": "Nuts and bolts: Data types",
    "section": "Introduction to Tidyverse",
    "text": "Introduction to Tidyverse"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#reshaping-data-with-tidyr",
    "href": "r_fundamentals_for_data_science.html#reshaping-data-with-tidyr",
    "title": "Nuts and bolts: Data types",
    "section": "Reshaping Data with tidyr",
    "text": "Reshaping Data with tidyr"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#project",
    "href": "r_fundamentals_for_data_science.html#project",
    "title": "Nuts and bolts: Data types",
    "section": "Project",
    "text": "Project"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#modeling-with-data-in-the-tidyverse",
    "href": "r_fundamentals_for_data_science.html#modeling-with-data-in-the-tidyverse",
    "title": "Nuts and bolts: Data types",
    "section": "Modeling with Data in the Tidyverse",
    "text": "Modeling with Data in the Tidyverse"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#communication-with-data-in-the-tidyverse",
    "href": "r_fundamentals_for_data_science.html#communication-with-data-in-the-tidyverse",
    "title": "Nuts and bolts: Data types",
    "section": "Communication with Data in the Tidyverse",
    "text": "Communication with Data in the Tidyverse"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#categorical-data-in-the-tydiverse",
    "href": "r_fundamentals_for_data_science.html#categorical-data-in-the-tydiverse",
    "title": "Nuts and bolts: Data types",
    "section": "Categorical Data in the Tydiverse",
    "text": "Categorical Data in the Tydiverse"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#data-manipulation-with-dplyr",
    "href": "r_fundamentals_for_data_science.html#data-manipulation-with-dplyr",
    "title": "Nuts and bolts: Data types",
    "section": "Data Manipulation with dplyr",
    "text": "Data Manipulation with dplyr"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#joining-data-with-dplyr",
    "href": "r_fundamentals_for_data_science.html#joining-data-with-dplyr",
    "title": "Nuts and bolts: Data types",
    "section": "Joining Data with dplyr",
    "text": "Joining Data with dplyr"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#case-study-exploratory-data-analysis-in-r",
    "href": "r_fundamentals_for_data_science.html#case-study-exploratory-data-analysis-in-r",
    "title": "Nuts and bolts: Data types",
    "section": "Case Study: Exploratory Data Analysis in R",
    "text": "Case Study: Exploratory Data Analysis in R"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#data-manipulation-with-data.table-in-r",
    "href": "r_fundamentals_for_data_science.html#data-manipulation-with-data.table-in-r",
    "title": "Nuts and bolts: Data types",
    "section": "Data Manipulation with data.table in R",
    "text": "Data Manipulation with data.table in R"
  },
  {
    "objectID": "r_fundamentals_for_data_science.html#joining-data-with-data.table-in-r",
    "href": "r_fundamentals_for_data_science.html#joining-data-with-data.table-in-r",
    "title": "Nuts and bolts: Data types",
    "section": "Joining Data with data.table in R",
    "text": "Joining Data with data.table in R"
  },
  {
    "objectID": "_introduction_to_r_01.html#how-it-works",
    "href": "_introduction_to_r_01.html#how-it-works",
    "title": "1  Intro to basics",
    "section": "1.1 How it works",
    "text": "1.1 How it works\nIn the text editor you should type R code to solve the exercises. When you hit ctrl + enter, every line of code is interpreted and executed by R and you get a message whether or not your code was correct.\nR makes use of the # sign to add comments, so that you and others can understand what the R code is about. Comments are not run as R code, so they will not influence your result. For example, Calculate 3 + 4 in the editor on the right is a comment.\nYou can also execute R commands straight in the console. This is a good way to experiment with R code.\n\nInstructions 100 XP\n- In the text editor on the right there is already some sample code. \n- Can you see which lines are actual R code and which are comments?\n- Add a line of code that calculates the sum of 6 and 12, \n    and hit the enter button\n\n\nex_01.R\n\n# Calculate 3 + 4\n3 + 4\n# Calculate 6 + 12\n6 + 12"
  },
  {
    "objectID": "_introduction_to_r_01.html#arithmetic-with-r",
    "href": "_introduction_to_r_01.html#arithmetic-with-r",
    "title": "1  Intro to basics",
    "section": "1.2 Arithmetic with R",
    "text": "1.2 Arithmetic with R\nIn its most basic form, R can be used as a simple calculator. Consider the following arithmetic operators:\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nExponentiation: ^\nModulo: %%\n\nThe last two might need some explaining:\n\nThe ^ operator raises the number to its left to the power of the number to its right: for example 3^2 is 9.\nThe modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or 5 %% 3 is 2.\n\n\nInstructions 100 XP\n- Type 2^5 in the editor to calculate 2 to the power 5.\n- Type 28 %% 6 to calculate 28 modulo 6.\n- Run the answer in the console and have a look at the R output .\n- Note how the # symbol is used to add comments on the R code.\n\n\nex_02.R\n\n# An addition\n5 + 5 \n\n# A subtraction\n5 - 5 \n\n# A multiplication\n3 * 5\n    # A division\n(5 + 5) / 2 \n# Exponentiation\n2 ^ 5\n# Modulo\n28 %% 6\n\n\n\n1.2.1 Variable assignment\nA basic concept in (statistical) programming is called a variable.\nA variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. You can then later use this variable’s name to easily access the value or the object that is stored within this variable.\n\n\n\n\n\n\nYou can assign a value 4 to a variable my_var with the command\n\n\n\n\nmy_var <- 4\n\n\n\n\n1.2.1.1 Instructions 100 XP\nOver to you: complete the code in the editor such that it assigns the value 42 to the variable x in the editor. Submit the answer. Notice that when you ask R to print x, the value 42 appears.\n\n\nex_03.R\n\n# Assign the value 42 to x\nx <- 42\n# Print out the value of the variable x\nprint (x)\n\n\n\n\n1.2.2 Variable assignment (2)\nSuppose you have a fruit basket with five apples. As a data analyst in training, you want to store the number of apples in a variable with the name my_apples.\n\n1.2.2.1 Instructions 100 XP\n\nType the following code in the editor: my_apples <- 5. This will assign the value 5 to my_apples.\nType: my_apples below the second comment. This will print out the value of my_apples.\nRun your answer, and look at the output: you see that the number 5 is printed. So R now links the variable my_apples to the value 5.\n\n\n\nex_04.R\n\n# Assign the value 5 to the variable my_apples\nmy_apples <- 5\n# Print out the value of the variable my_apples\nprint(my_apples)"
  },
  {
    "objectID": "_introduction_to_r_01.html#variable-assignment-3",
    "href": "_introduction_to_r_01.html#variable-assignment-3",
    "title": "1  Intro to basics",
    "section": "1.3 Variable assignment (3)",
    "text": "1.3 Variable assignment (3)\nEvery tasty fruit basket needs oranges, so you decide to add six oranges. As a data analyst, your reflex is to immediately create the variable my_oranges and assign the value 6 to it. Next, you want to calculate how many pieces of fruit you have in total. Since you have given meaningful names to these values,\n\n\n\n\n\n\nyou can now code this in a clear way:\n\n\n\nmy_apples + my_oranges\n\n\n\nInstructions 100 XP\n\nAssign to my_oranges the value 6.\nAdd the variables my_apples and my_oranges and have R simply print the result.\nAssign the result of adding my_apples and my_oranges to a new variable my_fruit.\n\n\n\nex_05.R\n\n# Assign a value to the variables my_apples and my_oranges\nmy_apples <- 5\nmy_oranges <- 6\n\n# Add these two variables together\nmy_apples + my_oranges\n\n# Create the variable my_fruit\nmy_fruit <- my_apples + my_oranges"
  },
  {
    "objectID": "_introduction_to_r_01.html#apples-and-oranges",
    "href": "_introduction_to_r_01.html#apples-and-oranges",
    "title": "1  Intro to basics",
    "section": "1.4 Apples and oranges",
    "text": "1.4 Apples and oranges\nCommon knowledge tells you not to add apples and oranges. But hey, that is what you just did, no :-)? The my_apples and my_oranges variables both contained a number in the previous exercise. The + operator works with numeric variables in R. If you really tried to add “apples” and “oranges”, and assigned a text value to the variable my_oranges (see the editor), you would be trying to assign the addition of a numeric and a character variable to the variable my_fruit. This is not possible.\n\nInstructions 100 XP\n\nRun the answer and read the error message. Make sure to understand why this did not work.\nAdjust the code so that R knows you have 6 oranges and thus a fruit basket with 11 pieces of fruit.\n\n\n\nex_06.R\n\n# Assign a value to the variable my_apples\nmy_apples <- 5 \n# Fix the assignment of my_oranges\nmy_oranges <- \"six\" \n# Create the variable my_fruit and print it out\nmy_fruit <- my_apples + my_oranges \nmy_fruit\n\nResponse\n\n\nex_06.R\n\n# Assign a value to the variable my_apples\nmy_apples <- 5 \n# Fix the assignment of my_oranges\nmy_oranges <- 6 \n# Create the variable my_fruit and print it out\nmy_fruit <- my_apples + my_oranges \nmy_fruit"
  },
  {
    "objectID": "_introduction_to_r_01.html#basic-data-types-in-r",
    "href": "_introduction_to_r_01.html#basic-data-types-in-r",
    "title": "1  Intro to basics",
    "section": "1.5 Basic data types in R",
    "text": "1.5 Basic data types in R\nR works with numerous data types. Some of the most basic types to get started are:\n\nDecimal values like 4.5 are called numerics.\nWhole numbers like 4 are called integers. Integers are also numerics.\nBoolean values (TRUE or FALSE) are called logical.\nText (or string) values are called characters.\n\nNote how the quotation marks in the editor indicate that “some text” is a string."
  },
  {
    "objectID": "_introduction_to_r_01.html#instructions-100-xp-6",
    "href": "_introduction_to_r_01.html#instructions-100-xp-6",
    "title": "1  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nChange the value of the:\n\nmy_numeric variable to 42.\nmy_character variable to \"universe\". Note that the quotation marks indicate that “universe” is a character.\nmy_logical variable to FALSE.\n\n\n\n\n\n\n\nNote that R is case sensitive!\n\n\n\nThus despite the varibales called var, Var, vAr, has the same fonetic characters, R understand each of these as different memory addresses.\n\n\n\n\nex_07.R\n\n# Change my_numeric to be 42\nmy_numeric <- 42.5\n\n# Change my_character to be \"universe\"\nmy_character <- \"some text\"\n\n# Change my_logical to be FALSE\nmy_logical <- TRUE\n\nResponse\n\n\nex_07.R\n\n# Change my_numeric to be 42\nmy_numeric <- 42\n\n# Change my_character to be \"universe\"\nmy_character <- \"universe\"\n\n# Change my_logical to be FALSE\nmy_logical <- FALSE"
  },
  {
    "objectID": "_introduction_to_r_01.html#whats-that-data-type",
    "href": "_introduction_to_r_01.html#whats-that-data-type",
    "title": "1  Intro to basics",
    "section": "1.6 What’s that data type?",
    "text": "1.6 What’s that data type?\nDo you remember that when you added 5 + “six”, you got an error due to a mismatch in data types? You can avoid such embarrassing situations by checking the data type of a variable beforehand. You can do this with the class() function, as the code in the editor shows.\n\nInstructions 100 XP\nComplete the code in the editor and also print out the classes of my_character and my_logical.\n\n\nex_08.R\n\n# Declare variables of different types\n\nmy_numeric <- 42\nmy_character <- \"universe\"\nmy_logical <- FALSE \n# Check class of my_numeric\nclass(my_numeric)\n\n# Check class of my_character\nclass(my_character)\n\n# Check class of my_logical\nclass(my_logical)"
  },
  {
    "objectID": "_introduction_to_r_02.html#create-a-vector",
    "href": "_introduction_to_r_02.html#create-a-vector",
    "title": "\n2  Vectors\n",
    "section": "\n2.1 Create a vector",
    "text": "2.1 Create a vector\nFeeling lucky? You better, because this chapter takes you on a trip to the City of Sins, also known as Statisticians Paradise!\nThanks to R and your new data-analytical skills, you will learn how to uplift your performance at the tables and fire off your career as a professional gambler. This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions. Next stop, Vegas Baby… VEGAS!!\nInstructions 100 XP\n\n\nDo you still remember what you have learned in the first chapter? Assign the value \"Go!\" to the variable vegas. Remember: R is case sensitive!\n\n\n\nex_08.R\n\n# Define the variable vegas\nvegas <- \"Go!\""
  },
  {
    "objectID": "_introduction_to_r_02.html#create-a-vector-2",
    "href": "_introduction_to_r_02.html#create-a-vector-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.2 Create a vector (2)",
    "text": "2.2 Create a vector (2)\nLet us focus first!\nOn your way from rags to riches, you will make extensive use of vectors. Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.\nIn R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses.\n\n\n\n\n\n\nFor example:\n\n\n\nnumeric_vector <- c(1, 2, 3)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n\nOnce you have created these vectors in R, you can use them to do calculations.\nInstructions 100 XP\n\nComplete the code such that boolean_vector contains the three elements: TRUE,FALSEandTRUE` (in that order).\n\n\nex_09.R\n\nnumeric_vector <- c(1, 10, 49)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n# Complete the code for boolean_vector\nboolean_vector <-c(TRUE, FALSE, TRUE)\n\n\n2.2.1 Create a vector (3)\nAfter one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers.\nBefore doing a first analysis, you decide to first collect all the winnings and losses for the last week:\nFor poker_vector:\n\nOn Monday you won $140\n\nTuesday you lost $50\n\nWednesday you won $20\n\nThursday you lost $120\n\nFriday you won $240\n\n\nFor roulette_vector:\n\nOn Monday you lost $24\n\nTuesday you lost $50\n\nWednesday you won $100\n\nThursday you lost $350\n\nFriday you won $10\n\n\nYou only played poker and roulette, since there was a delegation of mediums that occupied the craps tables. To be able to use this data in R, you decide to create the variables poker_vector and roulette_vector.\nInstructions 100 XP\n\nAssign the winnings/losses for roulette to the variable roulette_vector. You lost $24, then lost $50 , won $100, lost $350, and won $10.\n\n\nex_10.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n\n2.2.2 Naming a vector\nAs a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential.\nIn the previous exercise, we created a vector with your winnings over the week. Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself.\nYou can give a name to the elements of a vector with the names() function. Have a look at this example:\n#| code-line-numbers: false\n#| code-fold: false\n#| code-summary: \"Show the code\"\n\nsome_vector <- c(\"John Doe\", \"poker player\")\nnames(some_vector) <- c(\"Name\", \"Profession\")\nThis code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession. Printing the contents to the console yields following output:\n\n\n\n\n\n\nOutput\n\n\n\n\n\n      Name     Profession\n\"John Doe\" \"poker player\"\n\n\n\nInstructions 100 XP\n\nThe code in the editor names the elements in poker_vector with the days of the week. Add code to do the same thing for roulette_vector.\n\n\nex_11.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# Assign days as names of poker_vector\nnames(poker_vector) <-\n  c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n# Assign days as names of roulette_vector\n\nnames(roulette_vector) <-\n  c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")"
  },
  {
    "objectID": "_introduction_to_r_02.html#naming-a-vector-2",
    "href": "_introduction_to_r_02.html#naming-a-vector-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.3 Naming a vector (2)",
    "text": "2.3 Naming a vector (2)\nIf you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.)\nIn the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a variable!\nJust like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it.\nInstructions 100 XP\n\n\nA variable days_vector that contains the days of the week has already been created for you.\nUse days_vector to set the names of poker_vector and roulette_vector.\n\n\n\nex_12.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# The variable days_vector\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n# Assign the names of the day to roulette_vector and poker_vector\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector"
  },
  {
    "objectID": "_introduction_to_r_02.html#calculating-total-winnings",
    "href": "_introduction_to_r_02.html#calculating-total-winnings",
    "title": "\n2  Vectors\n",
    "section": "\n2.4 Calculating total winnings",
    "text": "2.4 Calculating total winnings\nNow that you have the poker and roulette winnings nicely as named vectors, you can start doing some data analytical magic.\nYou want to find out the following type of information:\n\nHow much has been your overall profit or loss per day of the week?\nHave you lost money over the week in total?\nAre you winning/losing money on poker or on roulette? To get the answers, you have to do arithmetic calculations on vectors.\n\nIt is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:\n\n\n\nYou can also do the calculations with variables that represent vectors:\n\n\n\nInstructions 100 XP\n\n\nTake the sum of the variables A_vector and B_vector and assign it to total_vector.\nInspect the result by printing out total_vector.\n\n\n\nex_13.R\n\nA_vector <- c(1, 2, 3)\nB_vector <- c(4, 5, 6)\n\n# Take the sum of A_vector and B_vector\ntotal_vector <- A_vector + B_vector\n\n# Print out total_vector\nprint(total_vector)"
  },
  {
    "objectID": "_introduction_to_r_02.html#calculating-total-winnings-2",
    "href": "_introduction_to_r_02.html#calculating-total-winnings-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.5 Calculating total winnings (2)",
    "text": "2.5 Calculating total winnings (2)\nNow you understand how R does arithmetic with vectors, it is time to get those Ferraris in your garage! First, you need to understand what the overall profit or loss per day of the week was. The total daily profit is the sum of the profit / loss you realized on poker per day, and the profit / loss you realized on roulette per day.\nIn R, this is just the sum of roulette_vector and poker_vector.\nInstructions 100 XP\n\nAssign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined).\n\n\nex_14.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Assign to total_daily how much you won/lost on each day\ntotal_daily <- roulette_vector + poker_vector"
  },
  {
    "objectID": "_introduction_to_r_02.html#calculating-total-winnings-3",
    "href": "_introduction_to_r_02.html#calculating-total-winnings-3",
    "title": "\n2  Vectors\n",
    "section": "\n2.6 Calculating total winnings (3)",
    "text": "2.6 Calculating total winnings (3)\nBased on the previous analysis, it looks like you had a mix of good and bad days. This is not what your ego expected, and you wonder if there may be a very tiny chance you have lost money over the week in total?\nA function that helps you to answer this question is sum(). It calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do:\ntotal_poker <- sum(poker_vector)\nInstructions 100 XP\n\n\nCalculate the total amount of money that you have won/lost with roulette and assign to the variable total_roulette.\nNow that you have the totals for roulette and poker, you can easily calculate total_week (which is the sum of all gains and losses of the week).\nPrint out total_week.\n\n\n\nex_15.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Total winnings with poker\ntotal_poker <- sum(poker_vector)\n\n# Total winnings with roulette\ntotal_roulette <-  sum(roulette_vector)\n\n# Total winnings overall\ntotal_week <- total_poker + total_roulette\n\n# Print out total_week\nprint(total_week)"
  },
  {
    "objectID": "_introduction_to_r_02.html#comparing-total-winnings",
    "href": "_introduction_to_r_02.html#comparing-total-winnings",
    "title": "\n2  Vectors\n",
    "section": "\n2.7 Comparing total winnings",
    "text": "2.7 Comparing total winnings\nOops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis…\nAfter a short brainstorm in your hotel’s jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or > ) than in roulette.\nInstructions 100 XP\n\n\nCalculate total_poker and total_roulette as in the previous exercise. Use the sum() function twice.\nCheck if your total gains in poker are higher than for roulette by using a comparison. Simply print out the result of this comparison. What do you conclude, should you focus on roulette or on poker?\n\n\n\nex_16.R\n\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Calculate total gains for poker and roulette\ntotal_poker <- sum(poker_vector)\ntotal_roulette <- sum(roulette_vector)\n\n# Check if you realized higher total gains in poker than in roulette\n\nprint(total_poker > total_roulette)"
  },
  {
    "objectID": "_introduction_to_r_02.html#vector-selection-the-good-times",
    "href": "_introduction_to_r_02.html#vector-selection-the-good-times",
    "title": "\n2  Vectors\n",
    "section": "\n2.8 Vector selection: the good times",
    "text": "2.8 Vector selection: the good times\nYour hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette.\nAnother possible route for investigation is your performance at the beginning of the working week compared to the end of it. You did have a couple of Margarita cocktails at the end of the week…\nTo answer that question, you only want to focus on a selection of the total_vector. In other words, our goal is to select specific elements of the vector. To select elements of a vector (and later matrices, data frames, …), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1]. To select the second element of the vector, you type poker_vector[2], etc. Notice that the first element in a vector has index 1, not 0 as in many other programming languages.\nInstructions 100 XP\nAssign the poker results of Wednesday to the variable poker_wednesday.\n\n\nex_17.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_wednesday <- poker_vector[3]"
  },
  {
    "objectID": "_introduction_to_r_02.html#vector-selection-the-good-times-2",
    "href": "_introduction_to_r_02.html#vector-selection-the-good-times-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.9 Vector selection: the good times (2)",
    "text": "2.9 Vector selection: the good times (2)\nHow about analyzing your midweek results?\nTo select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected. For example: suppose you want to select the first and the fifth day of the week: use the vector c(1, 5) between the square brackets. For example, the code below selects the first and fifth element of poker_vector:\npoker_vector[c(1, 5)]\nInstructions 100 XP\n\nAssign the poker results of Tuesday, Wednesday and Thursday to the variable poker_midweek.\n\n\nex_18.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_midweek <- poker_vector[c(2, 3, 4)]"
  },
  {
    "objectID": "_introduction_to_r_02.html#vector-selection-the-good-times-3",
    "href": "_introduction_to_r_02.html#vector-selection-the-good-times-3",
    "title": "\n2  Vectors\n",
    "section": "\n2.10 Vector selection: the good times (3)",
    "text": "2.10 Vector selection: the good times (3)\nSelecting multiple elements of poker_vector with c(2, 3, 4) is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: c(2, 3, 4) can be abbreviated to 2:4, which generates a vector with all natural numbers from 2 up to 4.\nSo, another way to find the mid-week results is poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4.\nInstructions 100 XP\n\nAssign to roulette_selection_vector the roulette results from Tuesday up to Friday; make use of : if it makes things easier for you.\n\n\nex_19.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\nroulette_selection_vector <- roulette_vector[2:5]"
  },
  {
    "objectID": "_introduction_to_r_02.html#vector-selection-the-good-times-4",
    "href": "_introduction_to_r_02.html#vector-selection-the-good-times-4",
    "title": "\n2  Vectors\n",
    "section": "\n2.11 Vector selection: the good times (4)",
    "text": "2.11 Vector selection: the good times (4)\nAnother way to tackle the previous exercise is by using the names of the vector elements (Monday, Tuesday, …) instead of their numeric positions. For example,\npoker_vector[c(\"Monday\"]\nwill select the first element of poker_vector since “Monday” is the name of that first element.\nJust like you did in the previous exercise with numerics, you can also use the element names to select multiple elements, for example:\npoker_vector[c(\"Monday\",\"Tuesday\")]\nInstructions 100 XP\n\n\nSelect the first three elements in poker_vector by using their names: \"Monday\", \"Tuesday\" and \"Wednesday\". Assign the result of the selection to poker_start.\nCalculate the average of the values in poker_start with the mean() function. Simply print out the result so you can inspect it.\n\n\n\nex_20.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Select poker results for Monday, Tuesday and Wednesday\npoker_start <- poker_vector[c(\"Monday\", \"Tuesday\", \"Wednesday\")]\n  \n# Calculate the average of the elements in poker_start\nmean(poker_start)"
  },
  {
    "objectID": "_introduction_to_r_02.html#selection-by-comparison---step-1",
    "href": "_introduction_to_r_02.html#selection-by-comparison---step-1",
    "title": "\n2  Vectors\n",
    "section": "\n2.12 Selection by comparison - Step 1",
    "text": "2.12 Selection by comparison - Step 1\nBy making use of comparison operators, we can approach the previous question in a more proactive way.\nThe (logical) comparison operators known to R are:\n\n\n< for less than\n\n> for greater than\n\n<= for less than or equal to\n\n>= for greater than or equal to\n\n== for equal to each other\n\n!= not equal to each other\n\nAs seen in the previous chapter, stating 6 > 5 returns TRUE. The nice thing about R is that you can use these comparison operators also on vectors. For example:\n\n\n[1] FALSE FALSE  TRUE\n\n\nThis command tests for every element of the vector if the condition stated by the comparison operator is TRUE or FALSE.\nInstructions 100 XP\n\n\nCheck which elements in poker_vector are positive (i.e. > 0) and assign this to selection_vector.\nPrint out selection_vector so you can inspect it. The printout tells you whether you won (TRUE) or lost (FALSE) any money for each day.\n\n\n\nex_21.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- \n    poker_vector > 0\n  \n# Print out selection_vector\nprint(selection_vector)"
  },
  {
    "objectID": "_introduction_to_r_02.html#selection-by-comparison---step-2",
    "href": "_introduction_to_r_02.html#selection-by-comparison---step-2",
    "title": "\n2  Vectors\n",
    "section": "\n2.13 Selection by comparison - Step 2",
    "text": "2.13 Selection by comparison - Step 2\nWorking with comparisons will make your data analytical life easier. Instead of selecting a subset of days to investigate yourself (like before), you can simply ask R to return only those days where you realized a positive return for poker.\nIn the previous exercises you used selection_vector <- poker_vector > 0 to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days.\nYou can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector:\npoker_vector[selection_vector]\nR knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector.\nInstructions 100 XP\n\nUse selection_vector in square brackets to assign the amounts that you won on the profitable days to the variable poker_winning_days.\n\n\nex_22.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- poker_vector > 0\n\n# Select from poker_vector these days\npoker_winning_days <- poker_vector[selection_vector]"
  },
  {
    "objectID": "_introduction_to_r_02.html#advanced-selection",
    "href": "_introduction_to_r_02.html#advanced-selection",
    "title": "\n2  Vectors\n",
    "section": "\n2.14 Advanced selection",
    "text": "2.14 Advanced selection\nJust like you did for poker, you also want to know those days where you realized a positive return for roulette.\n\n2.14.1 Instructions 100 XP\n\n\nCreate the variable selection_vector, this time to see if you made profit with roulette for different days.\nAssign the amounts that you made on the days that you ended positively for roulette to the variable roulette_winning_days. This vector thus contains the positive winnings of roulette_vector.\n\n\n\nex_23.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on roulette?\nselection_vector <- roulette_vector > 0\n\n# Select from roulette_vector these days\nroulette_winning_days <- roulette_vector[selection_vector]"
  },
  {
    "objectID": "_introduction_to_r_03.html#whats-a-matrix",
    "href": "_introduction_to_r_03.html#whats-a-matrix",
    "title": "3  Matrices",
    "section": "3.1 What’s a matrix?",
    "text": "3.1 What’s a matrix?\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional.\nYou can construct a matrix in R with the matrix() function. Consider the following example:\nmatrix(1:9, byrow = TRUE, nrow = 3)\nIn the matrix() function:\n\nThe first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).\nThe argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE.\nThe third argument nrow indicates that the matrix should have three rows.\n\n\nInstructions 100 XP\nConstruct a matrix with 3 rows containing the numbers 1 up to 9, filled row-wise.\n\n\nex_24.R\n\n# Construct a matrix with 3 rows that contain the numbers 1 up to 9\nmatrix(1:9, byrow = TRUE, nrow = 3)"
  },
  {
    "objectID": "_introduction_to_r_03.html#analyze-matrices-you-shall",
    "href": "_introduction_to_r_03.html#analyze-matrices-you-shall",
    "title": "3  Matrices",
    "section": "3.2 Analyze matrices, you shall",
    "text": "3.2 Analyze matrices, you shall\nIt is now time to get your hands dirty. In the following exercises you will analyze the box office numbers of the Star Wars franchise. May the force be with you!\nIn the editor, three vectors are defined. Each one represents the box office numbers from the first three Star Wars movies. The first element of each vector indicates the US box office revenue, the second element refers to the Non-US box office (source: Wikipedia).\nIn this exercise, you’ll combine all these figures into a single vector. Next, you’ll build a matrix from this vector.\n\nInstructions 100 XP\n\nUse c(new_hope, empire_strikes, return_jedi) to combine the three vectors into one vector. Call this vector box_office.\nConstruct a matrix with 3 rows, where each row represents a movie. Use the matrix() function to do this. The first argument is the vector box_office, containing all box office figures. Next, you’ll have to specify nrow = 3 and byrow = TRUE. Name the resulting matrix star_wars_matrix.\n\n\n\nex_25.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Create box_office\nbox_office <- c(new_hope, empire_strikes, return_jedi)\n\n# Construct star_wars_matrix\nstar_wars_matrix <- matrix (box_office, nrow = 3, byrow = TRUE)"
  },
  {
    "objectID": "_introduction_to_r_03.html#naming-a-matrix",
    "href": "_introduction_to_r_03.html#naming-a-matrix",
    "title": "3  Matrices",
    "section": "3.3 Naming a matrix",
    "text": "3.3 Naming a matrix\nTo help you remember what is stored in star_wars_matrix, you would like to add the names of the movies for the rows. Not only does this help you to read the data, but it is also useful to select certain elements from the matrix.\nSimilar to vectors, you can add names for the rows and the columns of a matrix\nrownames(my_matrix) <- row_names_vector\ncolnames(my_matrix) <- col_names_vector\nWe went ahead and prepared two vectors for you: region, and titles. You will need these vectors to name the columns and rows of star_wars_matrix, respectively.\n\nInstructions 100 XP\n\nUse colnames() to name the columns of star_wars_matrix with the region vector.\nUse rownames() to name the rows of star_wars_matrix with the titles vector.\nPrint out star_wars_matrix to see the result of your work.\n\n\n\nex_26.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Construct matrix\nstar_wars_matrix <- \n  matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3, byrow = TRUE)\n\n# Vectors region and titles, used for naming\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\")\n\n# Name the columns with region\ncolnames(star_wars_matrix) <- region\n\n# Name the rows with titles\nrownames(star_wars_matrix) <- titles\n\n# Print out star_wars_matrix\nprint(star_wars_matrix)"
  },
  {
    "objectID": "_introduction_to_r_03.html#calculating-the-worldwide-box-office",
    "href": "_introduction_to_r_03.html#calculating-the-worldwide-box-office",
    "title": "3  Matrices",
    "section": "3.4 Calculating the worldwide box office",
    "text": "3.4 Calculating the worldwide box office\nThe single most important thing for a movie in order to become an instant legend in Tinseltown is its worldwide box office figures.\nTo calculate the total box office revenue for the three Star Wars movies, you have to take the sum of the US revenue column and the non-US revenue column.\nIn R, the function rowSums() conveniently calculates the totals for each row of a matrix. This function creates a new vector:\nrowSums(my_matrix)\n\nInstructions 100 XP\nCalculate the worldwide box office figures for the three movies and put these in the vector named worldwide_vector.\n\n\nex_26.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n                \"The Empire Strikes Back\", \n                \"Return of the Jedi\")\n              \nstar_wars_matrix <- matrix(box_office, \n                     nrow = 3, byrow = TRUE,\n                     dimnames = list(titles, region))\n\n# Calculate worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)"
  },
  {
    "objectID": "_introduction_to_r_03.html#adding-a-column-for-the-worldwide-box-office",
    "href": "_introduction_to_r_03.html#adding-a-column-for-the-worldwide-box-office",
    "title": "3  Matrices",
    "section": "3.5 Adding a column for the Worldwide box office",
    "text": "3.5 Adding a column for the Worldwide box office\nIn the previous exercise you calculated the vector that contained the worldwide box office receipt for each of the three Star Wars movies. However, this vector is not yet part of star_wars_matrix.\nYou can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example:\n  big_matrix <- cbind(matrix1, matrix2, vector1 ...)\n\nInstructions 100 XP\nAdd worldwide_vector as a new column to the star_wars_matrix and assign the result to all_wars_matrix. Use the cbind() function.\n\n\nex_27.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n            \"The Empire Strikes Back\", \n            \"Return of the Jedi\")\n               \nstar_wars_matrix <- matrix(box_office, \n                      nrow = 3, byrow = TRUE,\n                      dimnames = list(titles, region))\n\n# The worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)\n\n# Bind the new variable worldwide_vector as a column to star_wars_matrix\nall_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)"
  },
  {
    "objectID": "_introduction_to_r_03.html#adding-a-row",
    "href": "_introduction_to_r_03.html#adding-a-row",
    "title": "3  Matrices",
    "section": "3.6 Adding a row",
    "text": "3.6 Adding a row\nJust like every action has a reaction, every cbind() has an rbind(). (We admit, we are pretty bad with metaphors.)\nYour R workspace, where all variables you defined ‘live’ (check out what a workspace is), has already been initialized and contains two matrices:\n\nstar_wars_matrix that we have used all along, with data on the original trilogy,\nstar_wars_matrix2, with similar data for the prequels trilogy.\n\nExplore these matrices in the console if you want to have a closer look. If you want to check out the contents of the workspace, you can type ls() in the console.\n\nInstructions 100 XP\nUse rbind() to paste together star_wars_matrix and star_wars_matrix2, in this order. Assign the resulting matrix to all_wars_matrix.\n\n\nex_28.R\n\n# star_wars_matrix and star_wars_matrix2 are available in your workspace\nstar_wars_matrix  \nstar_wars_matrix2 \n\n# Combine both Star Wars trilogies in one matrix\nall_wars_matrix <- rbind(star_wars_matrix, star_wars_matrix2)"
  },
  {
    "objectID": "_introduction_to_r_03.html#the-total-box-office-revenue-for-the-entire-saga",
    "href": "_introduction_to_r_03.html#the-total-box-office-revenue-for-the-entire-saga",
    "title": "3  Matrices",
    "section": "3.7 The total box office revenue for the entire saga",
    "text": "3.7 The total box office revenue for the entire saga\nJust like cbind() has rbind(), colSums() has rowSums(). Your R workspace already contains the all_wars_matrix that you constructed in the previous exercise; type all_wars_matrix to have another look. Let’s now calculate the total box office revenue for the entire saga.\n\nInstructions 100 XP\n\nCalculate the total revenue for the US and the non-US region and assign total_revenue_vector. You can use the colSums() function.\nPrint out total_revenue_vector to have a look at the results.\n\n\n\nex_29.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Total revenue for US and non-US\ntotal_revenue_vector <- colSums(all_wars_matrix)\n  \n# Print out total_revenue_vector\nprint(total_revenue_vector)"
  },
  {
    "objectID": "_introduction_to_r_03.html#selection-of-matrix-elements",
    "href": "_introduction_to_r_03.html#selection-of-matrix-elements",
    "title": "3  Matrices",
    "section": "3.8 Selection of matrix elements",
    "text": "3.8 Selection of matrix elements\nSimilar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate the rows you want to select from the columns. For example:\n\nmy_matrix[1,2] selects the element at the first row and second column.\nmy_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.\n\nIf you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:\n\nmy_matrix[,1] selects all elements of the first column.\nmy_matrix[1,] selects all elements of the first row.\n\nBack to Star Wars with this newly acquired knowledge! As in the previous exercise, all_wars_matrix is already available in your workspace.\n\nInstructions 100 XP\n\nSelect the non-US revenue for all movies (the entire second column of all_wars_matrix), store the result as non_us_all.\nUse mean() on non_us_all to calculate the average non-US revenue for all movies. Simply print out the result.\nThis time, select the non-US revenue for the first two movies in all_wars_matrix. Store the result as non_us_some.\nUse mean() again to print out the average of the values in non_us_some.\n\n\n\nex_30.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Select the non-US revenue for all movies\nnon_us_all <- all_wars_matrix[,2]\n  \n# Average non-US revenue\nprint(mean(non_us_all))\n  \n# Select the non-US revenue for first two movies\nnon_us_some <- all_wars_matrix[1:2, 2]\n  \n# Average non-US revenue for first two movies\nprint(mean(non_us_some))"
  },
  {
    "objectID": "_introduction_to_r_03.html#a-little-arithmetic-with-matrices",
    "href": "_introduction_to_r_03.html#a-little-arithmetic-with-matrices",
    "title": "3  Matrices",
    "section": "3.9 A little arithmetic with matrices",
    "text": "3.9 A little arithmetic with matrices\nSimilar to what you have learned with vectors, the standard operators like +, -,/, *, etc. work in an element-wise way on matrices in R.\nFor example, 2 * my_matrix multiplies each element of my_matrix by two.\nAs a newly-hired data analyst for Lucasfilm, it is your job to find out how many visitors went to each movie for each geographical area. You already have the total revenue figures in all_wars_matrix. Assume that the price of a ticket was 5 dollars. Simply dividing the box office numbers by this ticket price gives you the number of visitors.\n\n3.9.1 Instructions 100 XP\n\nDivide all_wars_matrix by 5, giving you the number of visitors in millions.\nAssign the resulting matrix to visitors.\nPrint out visitors so you can have a look.\n\n\n\nex_31.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Estimate the visitors\nvisitors <- all_wars_matrix / 5\n  \n# Print the estimate to the console\nprint(visitors)"
  },
  {
    "objectID": "_introduction_to_r_03.html#a-little-arithmetic-with-matrices-2",
    "href": "_introduction_to_r_03.html#a-little-arithmetic-with-matrices-2",
    "title": "3  Matrices",
    "section": "3.10 A little arithmetic with matrices (2)",
    "text": "3.10 A little arithmetic with matrices (2)\nJust like 2 * my_matrix multiplied every element of my_matrix by two, my_matrix1 * my_matrix2 creates a matrix where each element is the product of the corresponding elements in my_matrix1 and my_matrix2.\nAfter looking at the result of the previous exercise, big boss Lucas points out that the ticket prices went up over time. He asks to redo the analysis based on the prices you can find in ticket_prices_matrix (source: imagination).\nThose who are familiar with matrices should note that this is not the standard matrix multiplication for which you should use %*% in R.\n\n3.10.1 Instructions 100 XP\n\nDivide all_wars_matrix by ticket_prices_matrix to get the estimated number of US and non-US visitors for the six movies. Assign the result to visitors.\nFrom the visitors matrix, select the entire first column, representing the number of visitors in the US. Store this selection as us_visitors.\nCalculate the average number of US visitors; print out the result.\n\n\n\nex_32.R\n\n# all_wars_matrix and ticket_prices_matrix are available in your workspace\nall_wars_matrix\nticket_prices_matrix\n\n# Estimated number of visitors\nvisitors <- all_wars_matrix / ticket_prices_matrix\n\n# US visitors\nus_visitors <- visitors[, 1]\n\n# Average number of US visitors\nprint(mean(us_visitors))"
  },
  {
    "objectID": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "href": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it",
    "title": "4  Factors",
    "section": "4.1 What’s a factor and why would you use it?",
    "text": "4.1 What’s a factor and why would you use it?\nIn this chapter you dive into the wonderful world of factors.\nThe term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.\nIt is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)\nA good example of a categorical variable is sex. In many circumstances you can limit the sex categories to “Male” or “Female”. (Sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphroditic animals, or different cultural norms, but you will always have a finite number of categories.)\n\nInstructions 100 XP\nAssign to variable theory the value “factors”.\n\n\nex_33.R\n\n# Assign to the variable theory what this chapter is about!\ntheory <- \"factors\""
  },
  {
    "objectID": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "href": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-2",
    "title": "4  Factors",
    "section": "4.2 What’s a factor and why would you use it? (2)",
    "text": "4.2 What’s a factor and why would you use it? (2)\nTo create factors in R, you make use of the function factor(). First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example, sex_vector contains the sex of 5 different individuals:\nsex_vector <- c(\"Male\",\"Female\",\"Female\",\"Male\",\"Male\")\nIt is clear that there are two categories, or in R-terms ‘factor levels’, at work here: “Male” and “Female”.\nThe function factor() will encode the vector as a factor:\nfactor_sex_vector <- factor(sex_vector)\n\nInstructions 100 XP\n\nConvert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector\nPrint out factor_sex_vector and assert that R prints out the factor levels below the actual values.\n\n\n\nex_34.R\n\n# Sex vector\nsex_vector <- c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\")\n\n# Convert sex_vector to a factor\nfactor_sex_vector <- factor(sex_vector)\n\n# Print out factor_sex_vector\nprint(factor_sex_vector)"
  },
  {
    "objectID": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "href": "_introduction_to_r_04.html#whats-a-factor-and-why-would-you-use-it-3",
    "title": "4  Factors",
    "section": "4.3 What’s a factor and why would you use it? (3)",
    "text": "4.3 What’s a factor and why would you use it? (3)\nThere are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.\nA nominal variable is a categorical variable without an implied order. This means that it is impossible to say that ‘one is worth more than the other’. For example, think of the categorical variable animals_vector with the categories “Elephant”, “Giraffe”, “Donkey” and “Horse”. Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).\nIn contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: “Low”, “Medium” and “High”. Here it is obvious that “Medium” stands above “Low”, and “High” stands above “Medium”.\n\nInstructions 100 XP\nSubmit the answer to check how R constructs and prints nominal and ordinal variables. Do not worry if you do not understand all the code just yet, we will get to that.\n\n\nex_35.R\n\n# Animals\nanimals_vector <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n\n# Temperature\ntemperature_vector <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- \n    factor(\n        temperature_vector,\n        order = TRUE,\n        levels = c(\"Low\", \"Medium\", \"High\")\n    )\nfactor_temperature_vector"
  },
  {
    "objectID": "_introduction_to_r_04.html#factor-levels",
    "href": "_introduction_to_r_04.html#factor-levels",
    "title": "4  Factors",
    "section": "4.4 Factor levels",
    "text": "4.4 Factor levels\nWhen you first get a dataset, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels():\nlevels(factor_vector) <- c(\"name1\", \"name2\",...)\nA good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, “M” and “F”. (You usually need more categories for survey data; either way, you use a factor to store the categorical data.)\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nRecording the sex with the abbreviations \"M\" and \"F\" can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analyzing the data. At that point, you will often want to change the factor levels to \"Male\" and \"Female\" instead of \"M\" and \"F\" for clarity.\nWatch out: the order with which you assign the levels is important. If you type levels(factor_survey_vector), you’ll see that it outputs [1] \"F\" \"M\". If you don’t specify the levels of the factor when creating the vector, R will automatically assign them alphabetically. To correctly map \"F\" to \"Female\" and \"M\" to \"Male\", the levels should be set to c(\"Female\", \"Male\"), in this order.\n\nInstructions 100 XP\n\nCheck out the code that builds a factor vector from survey_vector. You should use factor_survey_vector in the next instruction.\nChange the factor levels of factor_survey_vector to c(\"Female\", \"Male\"). Mind the order of the vector elements here.\n\n\n\nex_36.R\n\n# Code to build factor_survey_vector\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n# Specify the levels of factor_survey_vector\nlevels(factor_survey_vector) <- c(\"F\", \"M\")\n\nlevels(factor_survey_vector) <-  c(\"Female\", \"Male\")"
  },
  {
    "objectID": "_introduction_to_r_04.html#summarizing-a-factor",
    "href": "_introduction_to_r_04.html#summarizing-a-factor",
    "title": "4  Factors",
    "section": "4.5 Summarizing a factor",
    "text": "4.5 Summarizing a factor\nAfter finishing this course, one of your favorite functions in R will be summary (). This will give you a quick overview of the contents of a variable:\nsummary(my_var)\nGoing back to our survey, you would like to know how many \"Male\" responses you have in your study, and how many \"Female\" responses. The summary() function gives you the answer to this question.\n\nInstructions 100 XP\nAsk a summary() of the survey_vector and factor_survey_vector. Interpret the results of both vectors. Are they both equally useful in this case?\n\n\nex_37.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\nfactor_survey_vector\n\n# Generate summary for survey_vector\nsummary(survey_vector)\n\n# Generate summary for factor_survey_vector\nsummary(factor_survey_vector)"
  },
  {
    "objectID": "_introduction_to_r_04.html#battle-of-the-sexes",
    "href": "_introduction_to_r_04.html#battle-of-the-sexes",
    "title": "4  Factors",
    "section": "4.6 Battle of the sexes",
    "text": "4.6 Battle of the sexes\nYou might wonder what happens when you try to compare elements of a factor. In factor_survey_vector you have a factor with two levels: \"Male\" and \"Female\". But how does R value these relative to each other?\n\nInstructions 100 XP\nRead the code in the editor and submit the answer to test if male is greater than (>) female.\n\n\nex_38.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\n# Male\nmale <- factor_survey_vector[1]\n\n# Female\nfemale <- factor_survey_vector[2]\n\n# Battle of the sexes: Male 'larger' than female?\nmale > female"
  },
  {
    "objectID": "_introduction_to_r_04.html#ordered-factors",
    "href": "_introduction_to_r_04.html#ordered-factors",
    "title": "4  Factors",
    "section": "4.7 Ordered factors",
    "text": "4.7 Ordered factors\nOrdered factors Since \"Male\" and \"Female\" are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.\nBut this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R…\nLet us say that you are leading a research team of five data analysts and that you want to evaluate their performance. To do this, you track their speed, evaluate each analyst as \"slow\", \"medium\" or \"fast\", and save the results in speed_vector.\n\nInstructions 100 XP\nAs a first step, assign speed_vector a vector with 5 entries, one for each analyst. Each entry should be either \"slow\", \"medium\", or \"fast\". Use the list below:\n\nAnalyst 1 is medium,\nAnalyst 2 is slow,\nAnalyst 3 is slow,\nAnalyst 4 is medium and\nAnalyst 5 is fast.\n\nNo need to specify these are factors yet.\n\n\nex_39.R\n\nspeed_vector <- c(\n    \"medium\",\n    \"slow\",\n    \"slow\",\n    \"medium\",\n    \"fast\"\n)"
  },
  {
    "objectID": "_introduction_to_r_04.html#ordered-factors-2",
    "href": "_introduction_to_r_04.html#ordered-factors-2",
    "title": "4  Factors",
    "section": "4.8 Ordered factors (2)",
    "text": "4.8 Ordered factors (2)\nspeed_vector should be converted to an ordinal factor since its categories have a natural ordering. By default, the function factor() transforms speed_vector into an unordered factor. To create an ordered factor, you have to add two additional arguments: ordered and levels.\nfactor(some_vector,\n       ordered = TRUE,\n       levels = c(\"lev1\", \"lev2\" ...))\nBy setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. With the argument levels you give the values of the factor in the correct order.\n\nInstructions 100 XP\nFrom speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c(\"slow\", \"medium\", \"fast\").\n\n\nex_40.R\n\n# Create speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\n\n# Convert speed_vector to ordered factor vector\nfactor_speed_vector <- \nfactor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n)\n\n\n# Print factor_speed_vector\nfactor_speed_vector\nsummary(factor_speed_vector)"
  },
  {
    "objectID": "_introduction_to_r_04.html#comparing-ordered-factors",
    "href": "_introduction_to_r_04.html#comparing-ordered-factors",
    "title": "4  Factors",
    "section": "4.9 Comparing ordered factors",
    "text": "4.9 Comparing ordered factors\nHaving a bad day at work, ‘data analyst number two’ enters your office and starts complaining that ‘data analyst number five’ is slowing down the entire project. Since you know that ‘data analyst number two’ has the reputation of being a smarty-pants, you first decide to check if his statement is true.\nThe fact that factor_speed_vector is now ordered enables us to compare different elements (the data analysts in this case). You can simply do this by using the well-known operators.\n\nInstructions 100 XP\n\nUse [2] to select from factor_speed_vector the factor value for the second data analyst. Store it as da2.\nUse [5] to select the factor_speed_vector factor value for the fifth data analyst. Store it as da5.\nCheck if da2 is greater than da5; simply print out the result. Remember that you can use the > operator to check whether one element is larger than the other.\n\n\n\nex_41.R\n\n# Create factor_speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\nfactor_speed_vector <- \n  factor(\n    speed_vector,\n    ordered = TRUE,\n    levels = c(\"slow\", \"medium\", \"fast\")\n  )\n\n# Factor value for second data analyst\nda2 <- factor_speed_vector[2]\n\n# Factor value for fifth data analyst\nda5 <- factor_speed_vector[5]\n\n# Is data analyst 2 faster than data analyst 5?\n print(da2 > da5)"
  },
  {
    "objectID": "_introduction_to_r_05.html#whats-a-data-frame",
    "href": "_introduction_to_r_05.html#whats-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.1 What’s a data frame?",
    "text": "5.1 What’s a data frame?\nYou may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type. Back then, your dataset on Star Wars only contained numeric elements.\nWhen doing a market research survey, however, you often have questions such as:\n\n‘Are you married?’ or ‘yes/no’ questions (logical)\n‘How old are you?’ (numeric)\n‘What is your opinion on this product?’ or other ‘open-ended’ questions\n(character)\n… The output, namely the respondents’ answers to the questions formulated above, is a dataset of different data types. You will often find yourself working with datasets that contain different data types instead of only one.\n\nA data frame has the variables of a dataset as columns and the observations as rows. This will be a familiar concept for those coming from different statistical software packages such as SAS or SPSS.\nInstructions 100 XP\n\nSubmit the answer. The data from the built-in example data frame mtcars will be printed to the console.\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "_introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "href": "_introduction_to_r_05.html#quick-have-a-look-at-your-dataset",
    "title": "\n5  Data frames\n",
    "section": "\n5.2 Quick, have a look at your dataset",
    "text": "5.2 Quick, have a look at your dataset\nWow, that is a lot of cars!\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\nSo how to do this in R? Well, the function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your dataset.\nBoth head() and tail() print a top line called the ‘header’, which contains the names of the different variables in your dataset.\nInstructions 100 XP\n\nCall head() on the mtcars dataset to have a look at the header and the first observations.\n\n\nex_42.R\n\n# Call head() on mtcars\nhead(mtcars)"
  },
  {
    "objectID": "_introduction_to_r_05.html#have-a-look-at-the-structure",
    "href": "_introduction_to_r_05.html#have-a-look-at-the-structure",
    "title": "\n5  Data frames\n",
    "section": "\n5.3 Have a look at the structure",
    "text": "5.3 Have a look at the structure\nAnother method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.\nFor a data frame it tells you:\n\nThe total number of observations (e.g. 32 car types)\nThe total number of variables (e.g. 11 car features)\nA full list of the variables names (e.g. mpg, cyl … )\nThe data type of each variable (e.g. num)\nThe first observations\n\nApplying the str() function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\nInstructions 100 XP\n\nInvestigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\nex_43.R\n\nstr(mtcars)"
  },
  {
    "objectID": "_introduction_to_r_05.html#creating-a-data-frame",
    "href": "_introduction_to_r_05.html#creating-a-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.4 Creating a data frame",
    "text": "5.4 Creating a data frame\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\nThe type of planet (Terrestrial or Gas Giant).\nThe planet’s diameter relative to the diameter of the Earth.\nThe planet’s rotation across the sun relative to that of the Earth.\nIf the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on Wikipedia, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\nYou construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don’t forget that it is possible (and likely) that they contain different types of data.\nInstructions 100 XP\n\nUse the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.\n\n\nex_44.R\n\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \n          \"Mars\", \"Jupiter\", \"Saturn\", \n          \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \n          \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, \n              11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, \n              0.41, 0.43, -0.72, 0.67)\nrings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\nplanets_df <- \n    data.frame(name, type, diameter, rotation, rings)"
  },
  {
    "objectID": "_introduction_to_r_05.html#creating-a-data-frame-2",
    "href": "_introduction_to_r_05.html#creating-a-data-frame-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.5 Creating a data frame (2)",
    "text": "5.5 Creating a data frame (2)\nThe planets_df data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\nInstructions 100 XP\n\nUse str() to investigate the structure of the new planets_df variable.\n\n\nex_45.R\n\nstr(planets_df)"
  },
  {
    "objectID": "_introduction_to_r_05.html#selection-of-data-frame-elements",
    "href": "_introduction_to_r_05.html#selection-of-data-frame-elements",
    "title": "\n5  Data frames\n",
    "section": "\n5.6 Selection of data frame elements",
    "text": "5.6 Selection of data frame elements\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n\nmy_df[1,2] selects the value at the first row and second column in my_df.\n\nmy_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.\n\nSometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row. Let us now apply this technique on planets_df!\nInstructions 100 XP\n\n\nFrom planets_df, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\nFrom planets_df, select all data on Mars (the fourth row). Simply print out the result.\n\n\n\nex_46.R\n\n# The planets_df data frame from the previous exercise is pre-loaded\n\n# Print out diameter of Mercury (row 1, column 3)\nprint(planets_df[1, 3])\n\n# Print out data for Mars (entire fourth row)\nprint(planets_df[4, ])"
  },
  {
    "objectID": "_introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "href": "_introduction_to_r_05.html#selection-of-data-frame-elements-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.7 Selection of data frame elements (2)",
    "text": "5.7 Selection of data frame elements (2)\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.\nSuppose you want to select the first three elements of the type column. One way to do this is\nplanets_df[1:3, 2]\nA possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\nplanets_df[1:3,\"type\"]\nInstructions 100 XP\n\nSelect and print out the first 5 values in the \"diameter\" column of planets_df.\n\n\nex_47.R\n\nprint(planets_df[1:5, \"diameter\"])"
  },
  {
    "objectID": "_introduction_to_r_05.html#only-planets-with-rings",
    "href": "_introduction_to_r_05.html#only-planets-with-rings",
    "title": "\n5  Data frames\n",
    "section": "\n5.8 Only planets with rings",
    "text": "5.8 Only planets with rings\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:\nplanets_df[,3]\nplanets_df[,\"diameter\"]\nHowever, there is a short-cut. If your columns have names, you can use the $ sign:\nplanets_df$diameter\nInstructions 100 XP\n\n\nUse the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.\nPrint out rings_vector to see if you got it right.\n\n\n\nex_48.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n# Print out rings_vector\nprint(rings_vector)"
  },
  {
    "objectID": "_introduction_to_r_05.html#only-planets-with-rings-2",
    "href": "_introduction_to_r_05.html#only-planets-with-rings-2",
    "title": "\n5  Data frames\n",
    "section": "\n5.9 Only planets with rings (2)",
    "text": "5.9 Only planets with rings (2)\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\nIf you type rings_vector in the console, you get:\n\n[1] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE\n\nThis means that the first four observations (or planets) do not have a ring (FALSE), but the other four do (TRUE). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let’s try to use rings_vector to select the data for the four planets with rings.\nInstructions 100 XP\n\nThe code in the editor selects the name column of all planets that have rings. Adapt the code so that instead of only the name column, all columns for planets that have rings are selected.\n\n\nex_49.R\n\n# planets_df and rings_vector are pre-loaded in your workspace\n\n# Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector, \"name\"]\nplanets_df[rings_vector, ]"
  },
  {
    "objectID": "_introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "href": "_introduction_to_r_05.html#only-planets-with-rings-but-shorter",
    "title": "\n5  Data frames\n",
    "section": "\n5.10 Only planets with rings but shorter",
    "text": "5.10 Only planets with rings but shorter\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (planets_df) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\nNow, let us move up one level and use the function subset(). You should see the subset() function as a short-cut to do exactly the same as what you did in the previous exercises.\nsubset(my_df, subset = some_condition)\nThe first argument of subset() specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn’t need the rings_vector!\nsubset(planets_df, subset = rings)\nInstructions 100 XP\n\nUse subset() on planets_df to select planets that have a diameter smaller than Earth. Because the diameter variable is a relative measure of the planet’s diameter w.r.t that of planet Earth, your condition is diameter < 1.\n\n\nex_50.R\n\n# planets_df is pre-loaded in your workspace\n\n# Select planets with diameter < 1\nsubset(planets_df, diameter < 1)"
  },
  {
    "objectID": "_introduction_to_r_05.html#sorting",
    "href": "_introduction_to_r_05.html#sorting",
    "title": "\n5  Data frames\n",
    "section": "\n5.11 Sorting",
    "text": "5.11 Sorting\nMaking and creating rankings is one of mankind’s favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function order().\norder() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\na <- c(100, 10, 1000)\norder(a)\n10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).\nThis means we can use the output of order(a) to reshuffle a:\na[order(a)]\nInstructions 100 XP\n\nExperiment with the order() function in the console. Submit the answer when you are ready to continue.\n\n\nex_51.R\n\nx <- rnorm(10)\norder(x)"
  },
  {
    "objectID": "_introduction_to_r_05.html#sorting-your-data-frame",
    "href": "_introduction_to_r_05.html#sorting-your-data-frame",
    "title": "\n5  Data frames\n",
    "section": "\n5.12 Sorting your data frame",
    "text": "5.12 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column.\nInstructions 100 XP\n\n\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.\nNow reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n\nex_52.R\n\n# planets_df is pre-loaded in your workspace\n\n# Use order() to create positions\npositions <-  order(planets_df$diameter)\n\n# Use positions to sort planets_df\nplanets_df[positions, ]"
  },
  {
    "objectID": "_introduction_to_r_06.html#lists-why-would-you-need-them",
    "href": "_introduction_to_r_06.html#lists-why-would-you-need-them",
    "title": "6  Lists",
    "section": "6.1 Lists, why would you need them?",
    "text": "6.1 Lists, why would you need them?\nCongratulations! At this point in the course you are already familiar with:\n\n\nVectors (one dimensional array)\n\ncan hold numeric, character or logical values. The elements in a vector all have the same data type.\n\n\n\nMatrices (two dimensional array)\n\ncan hold numeric, character or logical values. The elements in a matrix all have the same data type.\n\n\n\nData frames (two-dimensional objects)\n\ncan hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type. Pretty sweet for an R newbie, right? ;-)\n\n\n\n\nInstructions 100 XP\nSubmit the answer to start learning everything about lists!"
  },
  {
    "objectID": "_introduction_to_r_06.html#lists-why-would-you-need-them-2",
    "href": "_introduction_to_r_06.html#lists-why-would-you-need-them-2",
    "title": "6  Lists",
    "section": "6.2 Lists, why would you need them? (2)",
    "text": "6.2 Lists, why would you need them? (2)\nA list in R is similar to your to-do list at work or school: the different items on that list most likely differ in length, characteristic, and type of activity that has to be done.\nA list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.\nYou could say that a list is some kind super data type: you can store practically any piece of information in it!\n\nInstructions 100 XP\nJust submit the answer to start the first exercise on lists."
  },
  {
    "objectID": "_introduction_to_r_06.html#creating-a-list",
    "href": "_introduction_to_r_06.html#creating-a-list",
    "title": "6  Lists",
    "section": "6.3 Creating a list",
    "text": "6.3 Creating a list\nLet us create our first list! To construct a list you use the function list():\nmy_list <- list(comp1, comp2 ...)\nThe arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, …\n\nInstructions 100 XP\nConstruct a list, named my_list, that contains the variables my_vector, my_matrix and my_df as list components.\n\n\nex_53.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Construct list with these different elements:\nmy_list <- list(my_vector, my_matrix, my_df)"
  },
  {
    "objectID": "_introduction_to_r_06.html#creating-a-named-list",
    "href": "_introduction_to_r_06.html#creating-a-named-list",
    "title": "6  Lists",
    "section": "6.4 Creating a named list",
    "text": "6.4 Creating a named list\nWell done, you’re on a roll!\nJust like on your to-do list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them:\nmy_list <- list(name1 = your_comp1, name2 = your_comp2)\nThis creates a list with components that are named name1, name2, and so on. If you want to name your lists after you’ve created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:\nmy_list <- list(your_comp1, your_comp2) names(my_list) <- c(“name1”, “name2”)\n\nInstructions 100 XP\n\nChange the code of the previous exercise (see editor) by adding names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df.\nPrint out my_list so you can inspect the output.\n\n\n\nex_54.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Adapt list() call to give the components names\nmy_list <- list(my_vector, my_matrix, my_df)\nnames(my_list) <- c(\"vec\", \"mat\", \"df\")\n# Print out my_list\nprint(my_list)"
  },
  {
    "objectID": "_introduction_to_r_06.html#creating-a-named-list-2",
    "href": "_introduction_to_r_06.html#creating-a-named-list-2",
    "title": "6  Lists",
    "section": "6.5 Creating a named list (2)",
    "text": "6.5 Creating a named list (2)\nBeing a huge movie fan (remember your job at LucasFilms), you decide to start storing information on good movies with the help of lists.\nStart by creating a list for the movie “The Shining”. We have already created the variables mov, act and rev in your R workspace. Feel free to check them out in the console.\n\nInstructions 100 XP\nComplete the code in the editor to create shining_list; it contains three elements:\n\nmoviename: a character string with the movie title (stored in mov)\nactors: a vector with the main actors’ names (stored in act)\nreviews: a data frame that contains some reviews (stored in rev)\n\nDo not forget to name the list components accordingly (names are moviename, actors and reviews).\n\n\nex_55.R\n\n# The variables mov, act and rev are available\n\n# Finish the code to build shining_list\nshining_list <- \n    list(\n        moviename = mov, \n        actors = act,\n        reviews = rev\n    )"
  },
  {
    "objectID": "_introduction_to_r_06.html#selecting-elements-from-a-list",
    "href": "_introduction_to_r_06.html#selecting-elements-from-a-list",
    "title": "6  Lists",
    "section": "6.6 Selecting elements from a list",
    "text": "6.6 Selecting elements from a list\nYour list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward.\nOne way to select a component is using the numbered position of that component. For example, to “grab” the first component of shining_list you type\nshining_list[[1]]\nA quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don’t mix them up!\nYou can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:\nshining_list[[\"reviews\"]]\nshining_list$reviews\nBesides selecting components, you often need to select specific elements out of these components. For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]). When you type this in the console, you will see the answer is Jack Nicholson.\n\n6.6.1 Instructions 100 XP\n\nSelect from shining_list the vector representing the actors. Simply print out this vector.\nSelect from shining_list the second element in the vector representing the actors. Do a printout like before.\n\n\n\nex_56.R\n\n# shining_list is already pre-loaded in the workspace\n\n# Print out the vector representing the actors\nprint(shining_list[[\"actors\"]])\n\n# Print the second element of the vector representing the actors\nprint(shining_list[[\"actors\"]][2])"
  },
  {
    "objectID": "_introduction_to_r_06.html#creating-a-new-list-for-another-movie",
    "href": "_introduction_to_r_06.html#creating-a-new-list-for-another-movie",
    "title": "6  Lists",
    "section": "6.7 Creating a new list for another movie",
    "text": "6.7 Creating a new list for another movie\nYou found reviews of another, more recent, Jack Nicholson movie: The Departed!\n\n\n\nScores\nComments\n\n\n\n\n4.6\nI would watch it again\n\n\n5\nAmazing!\n\n\n4.8\nI liked it\n\n\n5\nOne of the best movies\n\n\n4.2\nFascinating plot\n\n\n\nIt would be useful to collect together all the pieces of information about the movie, like the title, actors, and reviews into a single variable. Since these pieces of data are different shapes, it is natural to combine them in a list variable.\nmovie_title, containing the title of the movie, and movie_actors, containing the names of some of the actors in the movie, are available in your workspace.\n\nInstructions 100 XP\n\nCreate two vectors, called scores and comments, that contain the information from the reviews shown in the table.\nFind the average of the scores vector and save it as avg_review.\nCombine the scores and comments vectors into a data frame called reviews_df.\nCreate a list, called departed_list, that contains the movie_title, movie_actors, reviews data frame as reviews_df, and the average review score as avg_review, and print it out.\n\n\n\nex_57.R\n\n# Use the table from the exercise to define the comments and scores vectors\nscores <- c(4.6, 5, 4.8, 5, 4.2)\ncomments <- \n    c(\n        \"I would watch it again\",\n        \"Amazing!\", \n        \"I liked it\",\n        \"One of the best movies\", \n        \"Fascinating plot\"\n    )\n\n# Save the average of the scores vector as avg_review\navg_review <- mean(scores)\n\n# Combine scores and comments into the reviews_df data frame\nreviews_df <- data.frame(scores, comments)\n\n# Create and print out a list, called departed_list\ndeparted_list <- list(\n    movie_title,\n    movie_actors,\n    reviews_df,\n    avg_review\n)\nprint(departed_list)"
  },
  {
    "objectID": "background_01.html",
    "href": "background_01.html",
    "title": "R fundamentals in programming, data managment and visualization",
    "section": "",
    "text": "We dedicate this part to overview the basics to program in R. The aim of this part is building the basis for Machine learning, namely control flow, loops, functional programming."
  },
  {
    "objectID": "_intermediate_r_01.html",
    "href": "_intermediate_r_01.html",
    "title": "Relational and logical operators, and conditional statements",
    "section": "",
    "text": "Conditionals and Control Flow\nIn this chapter, you’ll learn about relational operators for comparing R objects, and logical operators like “and” and “or” for combining TRUE and FALSE values. Then, you’ll use this knowledge to build conditional statements."
  },
  {
    "objectID": "_intermediate_r_01.html#equality",
    "href": "_intermediate_r_01.html#equality",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Equality",
    "text": "Equality\nThe most basic form of comparison is equality. Let’s briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).\n3 == (2 + 1)\n\"intermediate\" != \"r\"\nTRUE != FALSE\n\"Rchitect\" != \"rchitect\"\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!\n\nInstructions 100 XP\n\nIn the editor on the right, write R code to see if TRUE equals FALSE.\nLikewise, check if -6 * 14 is not equal to 17 - 101.\nNext up: comparison of character strings. Ask R whether the strings “useR” and “user” are equal.\nFinally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\n\nex_001.R\n\n# Comparison of logicals\nTRUE == FALSE\n\n# Comparison of numerics\n\n-6 * 14 != 17 -101\n# Comparison of character strings\n\"useR\" == \"user\"\n\n# Compare a logical with a numeric\nTRUE == 1"
  },
  {
    "objectID": "_intermediate_r_01.html#greater-and-less-than",
    "href": "_intermediate_r_01.html#greater-and-less-than",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Greater and less than",
    "text": "Greater and less than\nApart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:\n(1 + 2) > 4\n\"dog\" < \"Cats\"\nTRUE <= FALSE\nRemember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE is treated as 1 for arithmetic, and FALSE is treated as 0. Therefore, FALSE < TRUE is TRUE.\n\nInstructions 100 XP\n\nWrite R expressions to check whether:\n-6 * 5 + 2 is greater than or equal to -10 + 1.\n“raining” is less than or equal to “raining dogs”.\nTRUE is greater than FALSE.\n\n\n\nex_002.R\n\n# Comparison of numerics\n\n-6 * 5 + 2 >= -10 +1\n\n# Comparison of character strings\n\"raining\" <=  \"raining dogs\"\n\n# Comparison of logicals\n\nTRUE > FALSE"
  },
  {
    "objectID": "_intermediate_r_01.html#compare-vectors",
    "href": "_intermediate_r_01.html#compare-vectors",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Compare vectors",
    "text": "Compare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nLet’s go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.\n\nInstructions 100 XP\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:\n\nOn which days did the number of LinkedIn profile views exceed 15? When was your\nLinkedIn profile viewed only 5 times or fewer? When was your LinkedIn profile\nvisited more often than your Facebook profile?\n\n\n\nex003.R\n\n# The linkedin and facebook vectors have already been created for you\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Popular days\n\nlinkedin > 15\n# Quiet days\nlinkedin <= 5\n\n# LinkedIn more popular than Facebook\nlinkedin > facebook"
  },
  {
    "objectID": "_intermediate_r_01.html#compare-matrices",
    "href": "_intermediate_r_01.html#compare-matrices",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Compare matrices",
    "text": "Compare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.\n\nInstructions 100 XP\nUsing the relational operators you’ve learned so far, try to discover the following:\n\nWhen were the views exactly equal to 13? Use the views matrix to return a logical matrix.\nFor which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\n\nex_004.R\n\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n# When does views equal 13?\n\nviews == 13\n# When is views less than or equal to 14?\n\nviews <= 14"
  },
  {
    "objectID": "_intermediate_r_01.html#and",
    "href": "_intermediate_r_01.html#and",
    "title": "Relational and logical operators, and conditional statements",
    "section": "& and |",
    "text": "& and |\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\nTRUE & TRUE\nFALSE | TRUE\n5 <= 5 & 2 < 3\n3 < 4 | 7 < 6\nWatch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you’ll need 3 < x & x < 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have been pre-defined for you.\n\nInstructions 100 XP\nWrite R expressions to solve the following questions concerning the variable last:\n\nIs last under 5 or above 10?\nIs last between 15 and 20, excluding 15 but including 20?\n\n\n\nex_005.R\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n\n# Is last under 5 or above 10?\nlast < 5 | last > 10\n\n# Is last between 15 (exclusive) and 20 (inclusive)?\nlast > 15 | last < 20"
  },
  {
    "objectID": "_intermediate_r_01.html#and-2",
    "href": "_intermediate_r_01.html#and-2",
    "title": "Relational and logical operators, and conditional statements",
    "section": "& and | (2)",
    "text": "& and | (2)\nLike relational operators, logical operators work perfectly fine with vectors and matrices.\nBoth the vectors linkedin and facebook are available again. Also a matrix -views- has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?\n\nInstructions 100 XP\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?\n\n\n\nex_006.R\n\n# The social data (linkedin, facebook, views) has been created for you\n\n# linkedin exceeds 10 but facebook below 10\nlinkedin > 10 & facebook < 10\n\n\n# When were one or both visited at least 12 times?\nlinkedin >= 12 | facebook >= 12\n\n# When is views between 11 (exclusive) and 14 (inclusive)?\n\nviews > 11 & views <= 14"
  },
  {
    "objectID": "_intermediate_r_01.html#blend-it-all-together",
    "href": "_intermediate_r_01.html#blend-it-all-together",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Blend it all together",
    "text": "Blend it all together\nWith the things you’ve learned by now, you’re able to solve pretty cool problems.\nInstead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you’re working for. You’ve asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out.\n\nInstructions 100 XP\n\nSelect the entire second column, named day2, from the li_df data frame as a vector and assign it to second.\n\nUse second to create a logical vector, thatcontains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.\n\nUse sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.\n\n\n\nex_007.R\n\n# li_df is pre-loaded in your workspace\n\n# Select the second column, named day2, from li_df: second\nsecond <- li_df$day2\n\n# Build a logical vector, TRUE if value in second is extreme: extremes\nextremes <- second > 25 | second < 5\n\n# Count the number of TRUEs in extremes\nprint(sum(extremes))"
  },
  {
    "objectID": "_intermediate_r_01.html#the-if-statement",
    "href": "_intermediate_r_01.html#the-if-statement",
    "title": "Relational and logical operators, and conditional statements",
    "section": "The if statement",
    "text": "The if statement\nBefore diving into some exercises on the if statement, have another look at its syntax:\nif (condition) {\n  expr\n}\nRemember your vectors with social profile views? Let’s look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both variables have been pre- defined for you.\n\nInstructions 100 XP\n\nExamine the if statement that prints out “Showing LinkedIn information” if the medium variable equals \"LinkedIn\". -Code an if statement that prints “You are popular!” to the console if the num_views variable exceeds 15.\n\n\n\nex_008.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Examine the if statement for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n}\n\n# Write the if statement for num_views\n\nif (num_views > 15) {\n  print(\"You are popular!\")\n}"
  },
  {
    "objectID": "_intermediate_r_01.html#add-an-else",
    "href": "_intermediate_r_01.html#add-an-else",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Add an else",
    "text": "Add an else\nYou can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Here’s a recipe for its usage:\nif (condition) {\n  expr1\n} else {\n  expr2\n}\nIt’s important that the else keyword comes on the same line as the closing bracket of the if part!\nBoth if statements that you coded in the previous exercises are already available to use. It’s now up to you to extend them with the appropriate else statements!\n\nInstructions 100 XP\nAdd an else statement to both control structures, such that\n\n“Unknown medium” gets printed out to the console when the if-condition on medium does not hold.\n-R prints out “Try to be more visible!” when the if-condition on num_views is not met.\n\n\n\nex_009.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else{\n  print(\"Unknown medium\" )\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else{\n  print( \"Try to be more visible!\" )\n}"
  },
  {
    "objectID": "_intermediate_r_01.html#customize-further-else-if",
    "href": "_intermediate_r_01.html#customize-further-else-if",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Customize further: else if",
    "text": "Customize further: else if\nThe else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here’s an overview of the syntax to freshen your memory:\nif (condition1) {\n  expr1\n} else if (condition2) {\n  expr2\n} else if (condition3) {\n  expr3\n} else {\n  expr4\n}\nAgain, It’s important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!\n\nInstructions 100 XP\nAdd code to both control structures such that:\n\nR prints out “Showing Facebook information” if medium is equal to “Facebook”. Remember that R is case sensitive!\n“Your number of views is average” is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variables medium and num_views to see how the control structure respond. In both cases, the existing code should be extended in the else if statement. No existing code should be modified.\n\n\n\nex_010.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  # Add code to print correct string when condition is TRUE\n  print(\"Showing Facebook information\" )\n} else {\n  print(\"Unknown medium\")\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else if (num_views <= 15 & num_views > 10) {\n  # Add code to print correct string when condition is TRUE\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}"
  },
  {
    "objectID": "_intermediate_r_01.html#else-if-2.0",
    "href": "_intermediate_r_01.html#else-if-2.0",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Else if 2.0",
    "text": "Else if 2.0\nYou can do anything you want inside if-else constructs. You can even put in another set of conditional statements. Examine the following code chunk:\nif (number < 10) {\n  if (number < 5) {\n    result <- \"extra small\"\n  } else {\n    result <- \"small\"\n  }\n} else if (number < 100) {\n  result <- \"medium\"\n} else {\n  result <- \"large\"\n}\nprint(result)\nHave a look at the following statements:\n\nIf number is set to 6, “small” gets printed to the console.\nIf number is set to 100, R prints out “medium”.\nIf number is set to 4, “extra small” gets printed out to the console.\nIf number is set to 2500, R will generate an error, as result will not be defined.\n\nSelect the option that lists all the true statements.\n\nRun the code or a handwrite test (1, 3)."
  },
  {
    "objectID": "_intermediate_r_01.html#take-control",
    "href": "_intermediate_r_01.html#take-control",
    "title": "Relational and logical operators, and conditional statements",
    "section": "Take control!",
    "text": "Take control!\nIn this exercise, you will combine everything that you’ve learned so far: relational operators, logical operators and control constructs. You’ll need it all!\nWe’ve pre-defined two values for you: li and fb, denoting the number of profile views your LinkedIn and Facebook profile had on the last day of recordings. Go through the instructions to create R code that generates a ‘social media score’, sms, based on the values of li and fb.\n\nInstructions 100 XP\nFinish the control-flow construct with the following behavior:\n\nIf both li and fb are 15 or higher, set sms equal to double the sum of li and fb.\nIf both li and fb are strictly below 10, set sms equal to half the sum of li and fb.\nIn all other cases, set sms equal to li + fb.\nFinally, print the resulting sms variable.\n\n\n\nex_011.R\n\n# Variables related to your last day of recordings\nli <- 15\nfb <- 9\n\n# Code the control-flow construct\nif (li >= 15 & fb >= 15) {\n  sms <- 2 * (li + fb)\n} else if (li < 10 & fb < 10) {\n  sms <- 0.5 * (li + fb)\n} else {\n  sms <- li + fb\n}\n\n# Print the resulting sms to the console\nprint(sms)"
  },
  {
    "objectID": "_intermediate_r_02.html#write-a-while-loop",
    "href": "_intermediate_r_02.html#write-a-while-loop",
    "title": "7  Loops",
    "section": "7.1 Write a while loop",
    "text": "7.1 Write a while loop\nLet’s get you started with building a while loop from the ground up. Have another look at its recipe:\nwhile (condition) {\n  expr\n}\nRemember that the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely.\nIf your session expires when you run your code, check the body of your while loop carefully.\nHave a look at the sample code provided; it initializes the speed variables and already provides a while loop template to get you started.\n\nInstructions 100 XP\nCode a while loop with the following characteristics:\n\nThe condition of the while loop should check if speed is higher than 30.\nInside the body of the while loop, print out “Slow down!”.\nInside the body of the while loop, decrease the speed by 7 units and assign\nthis new value to speed again. This step is crucial; otherwise your while loop will never stop and your session will expire.\n\nIf your session expires when you run your code, check the body of your while loop carefully: it’s likely that you made a mistake.\n\n\nex_012.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Code the while loop\nwhile (speed >30) {\n  print(\"Slow down!\")\n  speed <- speed - 7\n}\n\n# Print out the speed variable\nspeed"
  },
  {
    "objectID": "_intermediate_r_02.html#throw-in-more-conditionals",
    "href": "_intermediate_r_02.html#throw-in-more-conditionals",
    "title": "7  Loops",
    "section": "7.2 Throw in more conditionals",
    "text": "7.2 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nInstructions 100 XP\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6. If the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed.\n\n\nex_013.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Extend/adapt the while loop\nwhile (speed > 30) {\n  print(paste(\"Your speed is\",speed))\n  if (speed > 48 ) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11 \n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6 \n  }\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#stop-the-while-loop-break",
    "href": "_intermediate_r_02.html#stop-the-while-loop-break",
    "title": "7  Loops",
    "section": "7.3 Stop the while loop: break",
    "text": "7.3 Stop the while loop: break\nThere are some very rare situations in which severe speeding is necessary: what if a hurricane is approaching and you have to get away as quickly as possible? You don’t want the driver’s assistant sending you speeding notifications in that scenario, right?\nThis seems like a great opportunity to include the break statement in the while loop you’ve been working on. Remember that the break statement is a control statement. When R encounters it, the while loop is abandoned completely.\n\nInstructions 100 XP\nAdapt the while loop such that it is abandoned when the speed of the vehicle is greater than 80. This time, the speed variable has been initialized to 88; keep it that way.\n\n\nex_014.R\n\n# Initialize the speed variable\nspeed <- 88\n\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  \n  # Break the while loop when speed exceeds 80\n  if (speed > 80) {\n    break\n  }\n  \n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#build-a-while-loop-from-scratch",
    "href": "_intermediate_r_02.html#build-a-while-loop-from-scratch",
    "title": "7  Loops",
    "section": "7.4 Build a while loop from scratch",
    "text": "7.4 Build a while loop from scratch\nThe previous exercises guided you through developing a pretty advanced while loop, containing a break statement and different messages and updates as determined by control flow constructs. If you manage to solve this comprehensive exercise using a while loop, you’re totally ready for the next topic: the for loop."
  },
  {
    "objectID": "_intermediate_r_02.html#instructions-100-xp-3",
    "href": "_intermediate_r_02.html#instructions-100-xp-3",
    "title": "7  Loops",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the while loop so that it:\n\nprints out the triple of i, so 3 * i, at each run.\nis abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.\n\n\n\nex_015.R\n\n# Initialize i as 1 \ni <- 1\n\n# Code the while loop\nwhile (i <= 10) {\n  print(3 * i)\n  if (i %% 8 ==0 ) {\n    break\n  }\n  i <- i + 1\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#loop-over-a-vector",
    "href": "_intermediate_r_02.html#loop-over-a-vector",
    "title": "7  Loops",
    "section": "7.5 Loop over a vector",
    "text": "7.5 Loop over a vector\nIn the previous video, Filip told you about two different strategies for using the for loop. To refresh your memory, consider the following loops that are equivalent in R:\nprimes <- c(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes)) {\n  print(primes[i])\n}\nRemember our linkedin vector? It’s a vector that contains the number of views your LinkedIn profile had in the last seven days. The linkedin vector has been pre-defined so that you can fully focus on the instructions!\n\nInstructions 100 XP\nWrite a for loop that iterates over all the elements of linkedin and prints out every element separately. Do this in two ways: using the loop version 1 and the loop version 2 in the example code above.\n\n\nex_016.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (element in linkedin) {\n\n    print(element)\n}\n\n# Loop version 2\nfor (i in 1:length(linkedin)){\n    print(linkedin[i])\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#loop-over-a-list",
    "href": "_intermediate_r_02.html#loop-over-a-list",
    "title": "7  Loops",
    "section": "7.6 Loop over a list",
    "text": "7.6 Loop over a list\nLooping over a list is just as easy and convenient as looping over a vector. There are again two different approaches here:\nprimes_list <- list(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes_list) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes_list)) {\n  print(primes_list[[i]])\n}\nNotice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.\nSuppose you have a list of all sorts of information on New York City: its population size, the names of the boroughs, and whether it is the capital of the United States. We’ve already defined a list nyc containing this information (source: Wikipedia).\n\nInstructions 100 XP\nAs in the previous exercise, loop over the nyc list in two different ways to print its elements:\n\nLoop directly over the nyc list (loop version 1).\nDefine a looping index and do subsetting using double brackets (loop version 2).\n\n\n\nex_017.R\n\n# The nyc list is already specified\nnyc <- list(pop = 8405837, \n            boroughs = c(\n              \"Manhattan\",\n              \"Bronx\",\n              \"Brooklyn\",\n              \"Queens\",\n              \"Staten Island\"\n            ), \n            capital = FALSE)\n\n# Loop version 1\nfor(i in nyc){\n    print(i)\n}\n\n# Loop version 2\nfor(i in 1:length(nyc)){\n    print(nyc[[i]])\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#loop-over-a-matrix",
    "href": "_intermediate_r_02.html#loop-over-a-matrix",
    "title": "7  Loops",
    "section": "7.7 Loop over a matrix",
    "text": "7.7 Loop over a matrix\nIn your workspace, there’s a matrix ttt, that represents the status of a tic-tac-toe game. It contains the values “X”, “O” and “NA”. Print out ttt to get a closer look. On row 1 and column 1, there’s “O”, while on row 3 and column 2 there’s “NA”.\nTo solve this exercise, you’ll need a for loop inside a for loop, often called a nested loop. Doing this in R is a breeze! Simply use the following recipe:\nfor (var1 in seq1) {\n  for (var2 in seq2) {\n    expr\n  }\n}\n\nInstructions 100 XP\nFinish the nested for loops to go over the elements in ttt:\n\nThe outer loop should loop over the rows, with loop index i (use 1:nrow(ttt)).\nThe inner loop should loop over the columns, with loop index j (use 1:ncol(ttt)).\nInside the inner loop, make use of print() and paste() to print out information in the following format: “On row i and column j the board contains x”, where x is the value on that position.\n\n\n\nex_018.R\n\n# The tic-tac-toe matrix ttt has already been defined for you\n\n# define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(\n      paste(\n        \"On row\",\n        i,\n        \" and column\",\n        j,\n        \"the board contains\",\n        ttt[i, j]\n      )\n    )\n  }\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#mix-it-up-with-control-flow",
    "href": "_intermediate_r_02.html#mix-it-up-with-control-flow",
    "title": "7  Loops",
    "section": "7.8 Mix it up with control flow",
    "text": "7.8 Mix it up with control flow\nLet’s return to the LinkedIn profile views data, stored in a vector linkedin. In the first exercise on for loops you already did a simple printout of each element in this vector. A little more in-depth interpretation of this data wouldn’t hurt, right? Time to throw in some conditionals! As with the while loop, you can use the if and else statements inside the for loop.\n\nInstructions 100 XP\nAdd code to the for loop that loops over the elements of the linkedin vector:\n\nIf the vector element’s value exceeds 10, print out “You’re popular!”.\nIf the vector element’s value does not exceed 10, print out “Be more visible!”\n\n\n\nex_019.r\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if ( li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#next-you-break-it",
    "href": "_intermediate_r_02.html#next-you-break-it",
    "title": "7  Loops",
    "section": "7.9 Next, you break it",
    "text": "7.9 Next, you break it\nA possible solution to the previous exercise has been provided for you. The code loops over the linkedin vector and prints out different messages depending on the values of li.\nIn this exercise, you will use the break and next statements:\nThe break statement abandons the active loop: the remaining code in the loop is skipped and the loop is not iterated over anymore. The next statement skips the remainder of the code in the loop, but continues the iteration.\nInstructions 100 XP Extend the for loop with two new, separate if tests as follows:\n\nIf the vector element’s value exceeds 16, print out “This is ridiculous, I’m outta here!” and have R abandon the for loop (break).\nIf the value is lower than 5, print out “This is too embarrassing!” and fast-forward to the next iteration (next).\n\n\n\nex_019.R\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Adapt/extend the for loop\nfor (li in linkedin) {\n  if (li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  \n  # Add if statement with break\n  if (li > 16 ){\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  \n  # Add if statement with next\n  \n  if (li < 5){\n      print(\"This is too embarrassing!\")    \n      next\n  }\n  \n  print(li)\n}"
  },
  {
    "objectID": "_intermediate_r_02.html#build-a-for-loop-from-scratch",
    "href": "_intermediate_r_02.html#build-a-for-loop-from-scratch",
    "title": "7  Loops",
    "section": "7.10 Build a for loop from scratch",
    "text": "7.10 Build a for loop from scratch\nThis exercise will not introduce any new concepts on for loops.\nWe already went ahead and defined a variable rquote. This variable has been split up into a vector that contains separate letters and has been stored in a vector chars with the strsplit() function.\nCan you write code that counts the number of r’s that come before the first u in rquote?\n\nInstructions 100 XP\n\nInitialize the variable rcount, as 0.\nFinish the for loop:\n\nif char equals “r”, increase the value of rcount by 1.\nif char equals “u”, leave the for loop entirely with a break.\n\nFinally, print out the variable rcount to the console to see if your code is correct.\n\n\n\nex_020.R\n\n# Pre-defined variables\nrquote <- \"r's internals are irrefutably intriguing\"\nchars <- strsplit(rquote, split = \"\")[[1]]\n\n# Initialize rcount\nrcount <- 0\n\n# Finish the for loop\nfor (char in chars) {\n  if (char == \"r\"){\n      rcount <- rcount + 1\n  }\n  \n  if (char == \"u\"){\n      break\n  }\n  \n}\n\n# Print out rcount\nprint(rcount)"
  },
  {
    "objectID": "_intermediate_r_03.html#function-documentation",
    "href": "_intermediate_r_03.html#function-documentation",
    "title": "8  Functions",
    "section": "8.1 Function documentation",
    "text": "8.1 Function documentation\nBefore even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sample() function, for example, you can use one of following R commands:\nhelp(sample)\n?sample\nIf you execute these commands, you’ll be redirected to <www.rdocumentation.org.>\nA quick hack to see the arguments of the sample() function is the args() function. Try it out in the console:\nargs(sample)\nIn the next exercises, you’ll be learning how to use the mean() function with increasing complexity. The first thing you’ll have to do is get acquainted with the mean() function.\n\nInstructions 100 XP\n\nConsult the documentation on the mean() function: ?mean or help(mean).\nInspect the arguments of the mean() function using the args() function.\n\n\n\nex_021.R\n\n# Consult the documentation on the mean() function\n\nhelp(mean)\n# Inspect the arguments of the mean() function\nargs(mean)"
  },
  {
    "objectID": "_intermediate_r_03.html#use-a-function",
    "href": "_intermediate_r_03.html#use-a-function",
    "title": "8  Functions",
    "section": "8.2 Use a function",
    "text": "8.2 Use a function\nThe documentation on the mean() function gives us quite some information:\n\nThe mean() function computes the arithmetic mean.\nThe most general method takes multiple arguments: x and ....\nThe x argument should be a vector containing numeric, logical or time-related information.\n\nRemember that R can match arguments both by position and by name. Can you still remember the difference? You’ll find out in this exercise!\nOnce more, you’ll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been created for you.\n\nInstructions 100 XP\n\nCalculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!\n\n-Print out both avg_li and avg_fb.\n\n\nex_022.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate average number of views\navg_li <- mean(linkedin)\navg_fb <- mean(facebook)\n\n\n# Inspect avg_li and avg_fb\nprint(avg_li)\nprint(avg_fb)"
  },
  {
    "objectID": "_intermediate_r_03.html#use-a-function-2",
    "href": "_intermediate_r_03.html#use-a-function-2",
    "title": "8  Functions",
    "section": "8.3 Use a function (2)",
    "text": "8.3 Use a function (2)\nCheck the documentation on the mean() function again:\n?mean\nThe Usage section of the documentation includes two versions of the mean()function. The first usage,\nmean(x, ...)\nis the most general usage of the mean function. The ‘Default S3 method’, however, is:\nmean(x, trim = 0, na.rm = FALSE, ...)\nThe ... is called the ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly. The ellipsis will be treated in more detail in future courses.\nFor the remainder of this exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. This makes them optional arguments.\n\nInstructions 100 XP\n\nCalculate the mean of the element-wise sum of linkedin and facebook and store the result in a variable avg_sum.\nCalculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.\nPrint out both avg_sum and avg_sum_trimmed; can you spot the difference?\n\n\n\nex_023.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate the mean of the sum\navg_sum <- mean(linkedin + facebook)\n\n# Calculate the trimmed mean of the sum\n\navg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2)\n# Inspect both new variables\nprint(avg_sum)\nprint(avg_sum_trimmed)"
  },
  {
    "objectID": "_intermediate_r_03.html#use-a-function-3",
    "href": "_intermediate_r_03.html#use-a-function-3",
    "title": "8  Functions",
    "section": "8.4 Use a function (3)",
    "text": "8.4 Use a function (3)\nIn the video, Filip guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.\nIf you’ve had a good look at the documentation, you’ll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the default S3 method shows:\nmean(x, trim = 0, na.rm = FALSE, ...)\nLet’s see what happens if your vectors linkedin and facebook contain missing values (NA).\n\nInstructions 100 XP\n\nCalculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.\nCalculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.\n\n\n\nex_024.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Basic average of linkedin\n\nmean(linkedin)\n# Advanced average of linkedin\nmean(linkedin, na.rm = TRUE)"
  },
  {
    "objectID": "_intermediate_r_03.html#functions-inside-functions",
    "href": "_intermediate_r_03.html#functions-inside-functions",
    "title": "8  Functions",
    "section": "8.5 Functions inside functions",
    "text": "8.5 Functions inside functions\nYou already know that R functions return objects that you can then use somewhere else. This makes it easy to use functions inside functions, as you’ve seen before:\nspeed <- 31\nprint(paste(\"Your speed is\", speed))\nNotice that both the print() and paste() functions use the ellipsis - ... - as an argument. Can you figure out how they’re used?\n\nInstructions 100 XP\nUse abs() on linkedin - facebook to get the absolute differences between the daily LinkedIn and Facebook profile views. Place the call to abs() inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!\n\n\nex_025.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Calculate the mean absolute deviation\nmean(abs(linkedin - facebook), na.rm = TRUE)"
  },
  {
    "objectID": "_intermediate_r_03.html#write-your-own-function",
    "href": "_intermediate_r_03.html#write-your-own-function",
    "title": "8  Functions",
    "section": "8.6 Write your own function",
    "text": "8.6 Write your own function\nWow, things are getting serious… you’re about to write your own function! Before you have a go at it, have a look at the following function template:\nmy_fun <- function(arg1, arg2) {\nbody\n}\nNotice that this recipe uses the assignment operator (<-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you’re creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function.\n\nInstructions 100 XP\n\nCreate a function pow_two(): it takes one argument and returns that number squared (that number times itself).\nCall this newly defined function with 12 as input.\nNext, create a function sum_abs(), that takes two arguments and returns the sum of the absolute values of both arguments.\nFinally, call the function sum_abs() with arguments -2 and 3 afterwards.\n\n\n\nex_026.R\n\n# Create a function pow_two()\n\npow_two <- function(x) {\n  x ^ 2 \n}\n\n# Use the function\npow_two(12)\n\n# Create a function sum_abs()\n\nsum_abs <- function(x1, x2){\n  abs(x1 + x2)\n}\n\n# Use the function\nsum_abs(-2, 3)"
  },
  {
    "objectID": "_intermediate_r_03.html#write-your-own-function-2",
    "href": "_intermediate_r_03.html#write-your-own-function-2",
    "title": "8  Functions",
    "section": "8.7 Write your own function (2)",
    "text": "8.7 Write your own function (2)\nThere are situations in which your function does not require an input. Let’s say you want to write a function that gives us the random outcome of throwing a fair die:\nthrow_die <- function() {\nnumber <- sample(1:6, size = 1)\nnumber\n}\n\nthrow_die()\nUp to you to code a function that doesn’t take any arguments!\n\nInstructions 100 XP\n\nDefine a function, hello(). It prints out “Hi there!” and returns TRUE. It has no arguments.\nCall the function hello(), without specifying arguments of course.\n\n\n\nex_027.R\n\n# Define the function hello()\nhello <- function(){\n  print(\"Hi there!\")\n  return TRUE\n}\n\n# Call the function hello()\nhello()"
  },
  {
    "objectID": "_intermediate_r_03.html#write-your-own-function-3",
    "href": "_intermediate_r_03.html#write-your-own-function-3",
    "title": "8  Functions",
    "section": "8.8 Write your own function (3)",
    "text": "8.8 Write your own function (3)\nDo you still remember the difference between an argument with and without default values? The usage section in the sd() documentation shows the following information:\nsd(x, na.rm = FALSE)\nThis tells us that x has to be defined for the sd() function to be called correctly, however, na.rm already has a default value. Not specifying this argument won’t cause an error.\nYou can define default argument values in your own R functions as well. You can use the following recipe to do so:\nmy_fun <- function(arg1, arg2 = val2) {\nbody\n}\nThe editor on the right already includes an extended version of the pow_two() function from before. Can you finish it?\n\nInstructions 100 XP\n\nAdd an optional argument, named print_info, that is TRUE by default.\nWrap an if construct around the print() function: this function should only be executed if print_info is TRUE.\nFeel free to experiment with the pow_two() function you’ve just coded.\n\n\n\nex_028.R\n\n# Finish the pow_two() function\npow_two <- function(x, print_info = TRUE) {\ny <- x ^ 2\nif(print_info){\n  print(paste(x, \"to the power two equals\", y))\n}\nreturn(y)\n}"
  },
  {
    "objectID": "_intermediate_r_03.html#function-scoping",
    "href": "_intermediate_r_03.html#function-scoping",
    "title": "8  Functions",
    "section": "8.9 Function scoping",
    "text": "8.9 Function scoping\nAn issue that Filip did not discuss in the video is function scoping. It implies that variables that are defined inside a function are not accessible outside that function. Try running the following code and see if you understand the results:\npow_two <- function(x) {\ny <- x ^ 2\nreturn(y)\n}\npow_two(4)\ny\nx\ny was defined inside the pow_two() function and therefore it is not accessible outside of that function. This is also true for the function’s arguments of course - x in this case.\nWhich statement is correct about the following chunk of code? The function two_dice() is already available in the workspace.\ntwo_dice <- function() {\npossibilities <- 1:6\ndice1 <- sample(possibilities, size = 1)\ndice2 <- sample(possibilities, size = 1)\ndice1 + dice2\n}\n\nInstructions 50 XP\n\nWhatever the way of calling the two_dice() function, R won’t have access to dice1 and dice2 outside the function."
  },
  {
    "objectID": "_intermediate_r_03.html#r-passes-arguments-by-value",
    "href": "_intermediate_r_03.html#r-passes-arguments-by-value",
    "title": "8  Functions",
    "section": "8.10 R passes arguments by value",
    "text": "8.10 R passes arguments by value\nThe title gives it away already: R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function. Let’s look at a simple example (try it in the console):\ntriple <- function(x) {\nx <- 3*x\nx\n}\na <- 5\ntriple(a)\na\nInside the triple() function, the argument x gets overwritten with its value times three. Afterwards this new x is returned. If you call this function with a variable a set equal to 5, you obtain 15. But did the value of a change? If R were to pass a to triple() by reference, the override of the x inside the R passes by value, so the R objects you pass to a function can never change unless you do an explicit assignment. a remains equal to 5, even after calling triple(a).\nCan you tell which one of the following statements is false about the following piece of code?\nincrement <- function(x, inc = 1) {\nx <- x + inc\nx\n}\ncount <- 5\na <- increment(count, 2)\nb <- increment(count)\ncount <- increment(count, 2)\n\nInstructions 50 XP\n\nIn the end, count will equal 10."
  },
  {
    "objectID": "_intermediate_r_03.html#r-you-functional",
    "href": "_intermediate_r_03.html#r-you-functional",
    "title": "8  Functions",
    "section": "8.11 R you functional?",
    "text": "8.11 R you functional?\nNow that you’ve acquired some skills in defining functions with different types of arguments and return values, you should try to create more advanced functions. As you’ve noticed in the previous exercises, it’s perfectly possible to add control-flow constructs, loops and even other functions to your function body.\nRemember our social media example? The vectors linkedin and facebook are already defined in the workspace so you can get your hands dirty straight away. As a first step, you will be writing a function that can interpret a single value of this vector. In the next exercise, you will write another function that can handle an entire vector at once.\n\nInstructions 100 XP\n\nFinish the function definition for interpret(), that interprets the number of profile views on a single day:\nThe function takes one argument, num_views.\nIf num_views is greater than 15, the function prints out “You’re popular!” to the console and returns num_views.\nElse, the function prints out “Try to be more visible!” and returns 0. Finally, call the interpret() function twice: on the first value of the linkedin vector and on the second element of the facebook vector.\n\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\n\n# Define the interpret function\ninterpret <- function(num_views) {\nif (num_views > 15) {\n  print(\"You're popular!\")\n  return(num_views)\n} else {\n  print(\"Try to be more visible!\")\n  return(0)\n}\n}\n\n# Call the interpret function twice\ninterpret(linkedin[1])\ninterpret(facebook[1])"
  },
  {
    "objectID": "_intermediate_r_03.html#r-you-functional-2",
    "href": "_intermediate_r_03.html#r-you-functional-2",
    "title": "8  Functions",
    "section": "8.12 R you functional? (2)",
    "text": "8.12 R you functional? (2)\nA possible implementation of the interpret() function has been provided for you. In this exercise you’ll be writing another function that will use the interpret() function to interpret all the data from your daily profile views inside a vector. Furthermore, your function will return the sum of views on popular days, if asked for. A for loop is ideal for iterating over all the vector elements. The ability to return the sum of views on popular days is something you can code through a function argument with a default value.\n\n8.12.1 Instructions 100 XP\nFinish the template for the interpret_all() function:\n\nMake return_sum an optional argument, that is TRUE by default.\nInside the for loop, iterate over all views: on every iteration, add the result of interpret(v) to count. Remember that interpret(v) returns v for popular days, and 0 otherwise. At the same time, interpret(v) will also do some printouts.\nFinish the if construct:\nIf return_sum is TRUE, return count.\nElse, return NULL.\n\nCall this newly defined function on both linkedin and facebook.\n\n\nex_029.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# The interpret() can be used inside interpret_all()\ninterpret <- function(num_views) {\nif (num_views > 15) {\n  print(\"You're popular!\")\n  return(num_views)\n} else {\n  print(\"Try to be more visible!\")\n  return(0)\n}\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all <- function(views, return_sum = TRUE) {\ncount <- 0\n\nfor (v in views) {\n  count <- count + interpret(v)\n}\n\nif (return_sum) {\n  return (count)\n} else {\n  return (NULL)\n}\n}\n\n# Call the interpret_all() function on both linkedin and facebook\n\ninterpret_all(linkedin)\ninterpret_all(facebook)"
  },
  {
    "objectID": "_intermediate_r_03.html#load-an-r-package",
    "href": "_intermediate_r_03.html#load-an-r-package",
    "title": "8  Functions",
    "section": "8.13 Load an R Package",
    "text": "8.13 Load an R Package\nThere are basically two extremely important functions when it comes down to R packages:\n\ninstall.packages(), which as you can expect, installs a given package.\nlibrary() which loads packages, i.e. attaches them to the search list on your R workspace.\n\nTo install packages, you need administrator privileges. This means that install.packages() will thus not work in the DataCamp interface. However, almost all CRAN packages are installed on our servers. You can load them with library().\nIn this exercise, you’ll be learning how to load the ggplot2 package, a powerful package for data visualization. You’ll use it to create a plot of two variables of the mtcars data frame. The data has already been prepared for you in the workspace.\nBefore starting, execute the following commands in the console:\n\nsearch(), to look at the currently attached packages and\nqplot(mtcars\\(wt, mtcars\\)hp), to build a plot of two variables of the mtcars data frame. An error should occur, because you haven’t loaded the ggplot2 package yet!\n\n\nInstructions 100 XP\n\nTo fix the error you saw in the console, load the ggplot2 package. Make sure you are loading (and not installing) the package!\nNow, retry calling the qplot() function with the same arguments.\nFinally, check out the currently attached packages again.\n\n\n\nex_030.R\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Retry the qplot() function\nqplot(mtcars$wt, mtcars$hp)\n\n# Check out the currently attached packages again\nsearch()"
  },
  {
    "objectID": "_intermediate_r_03.html#different-ways-to-load-a-package",
    "href": "_intermediate_r_03.html#different-ways-to-load-a-package",
    "title": "8  Functions",
    "section": "8.14 Different ways to load a package",
    "text": "8.14 Different ways to load a package\nThe library() and require() functions are not very picky when it comes down to argument types: both library(rjson) and library(\"rjson\") work perfectly fine for loading a package.\nHave a look at some more code chunks that (attempt to) load one or more packages:\n# Chunk 1\nlibrary(data.table)\nrequire(rjson)\n\n# Chunk 2\nlibrary(\"data.table\")\nrequire(rjson)\n\n# Chunk 3\nlibrary(data.table)\nrequire(rjson, character.only = TRUE)\n\n# Chunk 4\nlibrary(c(\"data.table\", \"rjson\"))\nSelect the option that lists all of the chunks that do not generate an error. The console is yours to experiment in.\n\nInstructions 50 XP\nPossible Answers: (1) and (2)"
  },
  {
    "objectID": "_intermediate_r_04.html#use-lapply-with-your-own-function",
    "href": "_intermediate_r_04.html#use-lapply-with-your-own-function",
    "title": "9  The apply family",
    "section": "9.1 Use lapply with your own function",
    "text": "9.1 Use lapply with your own function\nAs Filip explained in the instructional video, you can use lapply() on your own functions as well. You just need to code a new function and make sure it is available in the workspace. After that, you can use the function inside lapply() just as you did with base R functions.\nIn the previous exercise you already used lapply() once to convert the information about your favorite pioneering statisticians to a list of vectors composed of two character strings. Let’s write some code to select the names and the birth years separately.\nThe sample code already includes code that defined select_first(), that takes a vector as input and returns the first element of this vector.\n\nInstructions 100 XP\n\nApply select_first() over the elements of split_low with lapply() and assign the result to a new variable names.\nNext, write a function select_second() that does the exact same thing for the second element of an inputted vector.\nFinally, apply the select_second() function over split_low and assign the output to the variable years.\n\n\n\nex_0.32.R\n\n# Code from previous exercise:\npioneers <- \n c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n# Write function select_first()\nselect_first <- function(x) {\n x[1]\n}\n# Apply select_first() over split_low: names\nnames <- lapply(split_low, select_first)\n# Write function select_second()\nselect_second <- function(x) {\n x[2]\n}\n# Apply select_second() over split_low: years\nyears <- lapply(split_low, select_second)\n\n## lapply and anonymous functions Writing your own functions and then using them inside lapply() is quite an accomplishment! But defining functions to use them only once is kind of overkill, isn’t it? That’s why you can use so-called anonymous functions in R.\nPreviously, you learned that functions in R are objects in their own right. This means that they aren’t automatically bound to a name. When you create a function, you can use the assignment operator to give the function a name. It’s perfectly possible, however, to not give the function a name. This is called an anonymous function:\n# Named function\ntriple <- function(x) { 3 * x }\n\n# Anonymous function with same implementation\nfunction(x) { 3 * x }\n\n# Use anonymous function inside lapply()\nlapply(list(1,2,3), function(x) { 3 * x })\nsplit_low is defined for you.\n\n\nInstructions 100 XP\n\nTransform the first call of lapply() such that it uses an anonymous function that does the same thing.\nIn a similar fashion, convert the second call of lapply to use an anonymous version of the select_second() function.\nRemove both the definitions of select_first() and select_second(), as they are no longer useful.\n\n\n\nex_033.R\n\n# split_low has been created for you\nsplit_low\n# Transform: use anonymous function inside lapply\nnames <- lapply(split_low, function(x){ x[1] })\n# Transform: use anonymous function inside lapply\nyears <- lapply(split_low, function(x){ x[2] })\n\n## Use lapply with additional arguments\nIn the video, the triple() function was transformed to the multiply() function to allow for a more generic approach. lapply() provides a way to handle functions that require more than one argument, such as the multiply() function:\nmultiply <- function(x, factor) {\n  x * factor\n}\nlapply(list(1,2,3), multiply, factor = 3)\nOn the right we’ve included a generic version of the select functions that you’ve coded earlier: select_el(). It takes a vector as its first argument, and an index as its second argument. It returns the vector’s element at the specified index.\n\n\nInstructions 100 XP\nUse lapply() twice to call select_el() over all elements in split_low: once with the index equal to 1 and a second time with the index equal to 2. Assign the result to names and years, respectively.\n\n\nex_034.R\n\n# Definition of split_low\npioneers <- \nc(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Generic select function\nselect_el <- function(x, index) {\n  x[index]\n}\n\n# Use lapply() twice on split_low: names and years\nnames <- lapply(split_low, select_el, 1)\nyears <- lapply(split_low, select_el, 2)"
  },
  {
    "objectID": "_intermediate_r_04.html#apply-functions-that-return-null",
    "href": "_intermediate_r_04.html#apply-functions-that-return-null",
    "title": "9  The apply family",
    "section": "9.2 Apply functions that return NULL",
    "text": "9.2 Apply functions that return NULL\nIn all of the previous exercises, it was assumed that the functions that were applied over vectors and lists actually returned a meaningful result. For example, the tolower() function simply returns the strings with the characters in lowercase. This won’t always be the case. Suppose you want to display the structure of every element of a list. You could use the str() function for this, which returns NULL:\nlapply(list(1, \"a\", TRUE), str)\nThis call actually returns a list, the same size as the input list, containing all NULL values. On the other hand calling\n  str(TRUE)\non its own prints only the structure of the logical to the console, not NULL. That’s because str() uses invisible() behind the scenes, which returns an invisible copy of the return value, NULL in this case. This prevents it from being printed when the result of str() is not assigned.\nWhat will the following code chunk return (split_low is already available in the workspace)? Try to reason about the result before simply executing it in the console!\nlapply(split_low, function(x) {\n  if (nchar(x[1]) > 5) {\n    return(NULL)\n  } else {\n    return(x[2])\n  }\n})"
  },
  {
    "objectID": "_intermediate_r_04.html#how-to-use-sapply",
    "href": "_intermediate_r_04.html#how-to-use-sapply",
    "title": "9  The apply family",
    "section": "9.3 How to use sapply",
    "text": "9.3 How to use sapply\nYou can use sapply() similar to how you used lapply(). The first argument of sapply() is the list or vector X over which you want to apply a function, FUN. Potential additional arguments to this function are specified afterwards (...):\nsapply(X, FUN, ...)\nIn the next couple of exercises, you’ll be working with the variable temp, that contains temperature measurements for 7 days. temp is a list of length 7, where each element is a vector of length 5, representing 5 measurements on a given day. This variable has already been defined in the workspace: type str(temp) to see its structure.\n\n9.3.1 Instructions 100 XP\n\nUse lapply() to calculate the minimum (built-in function min()) of the temperature measurements for every day.\nDo the same thing but this time with sapply(). See how the output differs.\nUse lapply() to compute the the maximum (max()) temperature for each day. Again, use sapply() to solve the same question and see how lapply() and sapply() differ.\n\n\n\nex_035.R\n\n# temp has already been defined in the workspace\n\n# Use lapply() to find each day's minimum temperature\n\nlapply(temp, min)\n\n# Use sapply() to find each day's minimum temperature\nsapply(temp, min)\n\n# Use lapply() to find each day's maximum temperature\nlapply(temp, max)\n\n# Use sapply() to find each day's maximum temperature\nsapply(temp, max)"
  },
  {
    "objectID": "_intermediate_r_04.html#sapply-with-your-own-function",
    "href": "_intermediate_r_04.html#sapply-with-your-own-function",
    "title": "9  The apply family",
    "section": "9.4 sapply with your own function",
    "text": "9.4 sapply with your own function\nLike lapply(), sapply() allows you to use self-defined functions and apply them over a vector or a list:\nsapply(X, FUN, ...)\nHere, FUN can be one of R’s built-in functions, but it can also be a function you wrote. This self-written function can be defined before hand, or can be inserted directly as an anonymous function.\n\nInstructions 100 XP\n\nFinish the definition of extremes_avg(): it takes a vector of temperatures and calculates the average of the minimum and maximum temperatures of the vector.\nNext, use this function inside sapply() to apply it over the vectors inside temp.\nUse the same function over temp with lapply() and see how the outputs differ.\n\n\n\nex_036.R\n\n# temp is already defined in the workspace\n\n# Finish function definition of extremes_avg\nextremes_avg <- function(x) {\n  ( min(x) + max(x) ) / 2\n}\n\n# Apply extremes_avg() over temp using sapply()\nsapply(temp, extremes_avg)\n\n# Apply extremes_avg() over temp using lapply()\nlapply(temp, extremes_avg)"
  },
  {
    "objectID": "_intermediate_r_04.html#sapply-with-function-returning-vector",
    "href": "_intermediate_r_04.html#sapply-with-function-returning-vector",
    "title": "9  The apply family",
    "section": "9.5 sapply with function returning vector",
    "text": "9.5 sapply with function returning vector\nIn the previous exercises, you’ve seen how sapply() simplifies the list that lapply() would return by turning it into a vector. But what if the function you’re applying over a list or a vector returns a vector of length greater than 1? If you don’t remember from the video, don’t waste more time in the valley of ignorance and head over to the instructions!\n\nInstructions 100 XP\n\nFinish the definition of the extremes() function. It takes a vector of numerical values and returns a vector containing the minimum and maximum values of a given vector, with the names \"min\" and \"max\", respectively.\nApply this function over the vector temp using sapply().\nFinally, apply this function over the vector temp using lapply() as well.\n\n\n\nex_037.R\n\n# temp is already available in the workspace\n\n# Create a function that returns min and max of a vector: extremes\nextremes <- function(x) {\n  c(min = min(x), max = max(x))\n}\n\n# Apply extremes() over temp with sapply()\nsapply(temp, extremes)\n\n# Apply extremes() over temp with lapply()\nlapply(temp, extremes)"
  },
  {
    "objectID": "_intermediate_r_04.html#sapply-cant-simplify-now-what",
    "href": "_intermediate_r_04.html#sapply-cant-simplify-now-what",
    "title": "9  The apply family",
    "section": "9.6 sapply can’t simplify, now what?",
    "text": "9.6 sapply can’t simplify, now what?\nIt seems like we’ve hit the jackpot with sapply(). On all of the examples so far, sapply() was able to nicely simplify the rather bulky output of lapply(). But, as with life, there are things you can’t simplify. How does sapply() react?\nWe already created a function, below_zero(), that takes a vector of numerical values and returns a vector that only contains the values that are strictly below zero.\n\nInstructions 100 XP\n\nApply below_zero() over temp using sapply() and store the result in freezing_s.\nApply below_zero() over temp using lapply(). Save the resulting list in a variable freezing_l.\nCompare freezing_s to freezing_l using the identical() function.\n\n\n\nex_038.R\n\n# temp is already prepared for you in the workspace\n\n# Definition of below_zero()\nbelow_zero <- function(x) {\n  return(x[x < 0])\n}\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s <- sapply(temp, below_zero)\n\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l <- lapply(temp, below_zero)\n\n# Are freezing_s and freezing_l identical?\nidentical(freezing_s, freezing_s)"
  },
  {
    "objectID": "_intermediate_r_04.html#sapply-with-functions-that-return-null",
    "href": "_intermediate_r_04.html#sapply-with-functions-that-return-null",
    "title": "9  The apply family",
    "section": "9.7 sapply with functions that return NULL",
    "text": "9.7 sapply with functions that return NULL\nYou already have some apply tricks under your sleeve, but you’re surely hungry for some more, aren’t you? In this exercise, you’ll see how sapply() reacts when it is used to apply a function that returns NULL over a vector or a list.\nA function print_info(), that takes a vector and prints the average of this vector, has already been created for you. It uses the cat() function.\n\nInstructions 100 XP\n\nApply print_info() over the contents of temp with sapply().\nRepeat this process with lapply(). Do you notice the difference?\n\n\n\nex_039.R\n\n# temp is already available in the workspace\n\n# Definition of print_info()\nprint_info <- function(x) {\n  cat(\"The average temperature is\", mean(x), \"\\n\")\n}\n\n# Apply print_info() over temp using sapply()\nsapply(temp, print_info)\n\n# Apply print_info() over temp using lapply()\nlapply(temp, print_info)"
  },
  {
    "objectID": "_intermediate_r_04.html#reverse-engineering-sapply",
    "href": "_intermediate_r_04.html#reverse-engineering-sapply",
    "title": "9  The apply family",
    "section": "9.8 Reverse engineering sapply",
    "text": "9.8 Reverse engineering sapply\nsapply(list(runif (10), runif (10)), \n       function(x) c(min = min(x), mean = mean(x), max = max(x)))\nWithout going straight to the console to run the code, try to reason through which of the following statements are correct and why.\n\nsapply() can’t simplify the result that lapply() would return, and thus returns a list of vectors.\nThis code generates a matrix with 3 rows and 2 columns.\nThe function that is used inside sapply() is anonymous.\nThe resulting data structure does not contain any names.\n\nSelect the option that lists all correct statements.\n\nanswer : (2) and (3)"
  },
  {
    "objectID": "_intermediate_r_04.html#use-vapply",
    "href": "_intermediate_r_04.html#use-vapply",
    "title": "9  The apply family",
    "section": "9.9 Use vapply",
    "text": "9.9 Use vapply\nBefore you get your hands dirty with the third and last apply function that you’ll learn about in this intermediate R course, let’s take a look at its syntax. The function is called vapply(), and it has the following syntax:\n  vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\nOver the elements inside X, the function FUN is applied. The FUN.VALUE argument expects a template for the return argument of this function FUN. USE.NAMES is TRUE by default; in this case vapply() tries to generate a named array, if possible.\nFor the next set of exercises, you’ll be working on the temp list again, that contains 7 numerical vectors of length 5. We also coded a function basics() that takes a vector, and returns a named vector of length 3, containing the minimum, mean and maximum value of the vector respectively.\n\nInstructions 100 XP\nApply the function basics() over the list of temperatures, temp, using vapply(). This time, you can use numeric(3) to specify the FUN.VALUE argument.\n\n\nex_040.R\n\n# temp is already available in the workspace\n\n# Definition of basics()\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), max = max(x))\n}\n\n# Apply basics() over temp using vapply()\nvapply(temp, basics, numeric(3))"
  },
  {
    "objectID": "_intermediate_r_04.html#use-vapply-2",
    "href": "_intermediate_r_04.html#use-vapply-2",
    "title": "9  The apply family",
    "section": "9.10 Use vapply (2)",
    "text": "9.10 Use vapply (2)\nSo far you’ve seen that vapply() mimics the behavior of sapply() if everything goes according to plan. But what if it doesn’t?\nIn the video, Filip showed you that there are cases where the structure of the output of the function you want to apply, FUN, does not correspond to the template you specify in FUN.VALUE. In that case, vapply() will throw an error that informs you about the misalignment between expected and actual output.\n\nInstructions 100 XP\n\nInspect the pre-loaded code and try to run it. If you haven’t changed anything, an error should pop up. That’s because vapply() still expects basics() to return a vector of length 3. The error message gives you an indication of what’s wrong.\nTry to fix the error by editing the vapply() command.\n\n\n\nex_041.R\n\n# temp is already available in the workspace\n\n# Definition of the basics() function\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), median = median(x), max = max(x))\n}\n\n# Fix the error:\nvapply(temp, basics, numeric(4))"
  },
  {
    "objectID": "_intermediate_r_04.html#from-sapply-to-vapply",
    "href": "_intermediate_r_04.html#from-sapply-to-vapply",
    "title": "9  The apply family",
    "section": "9.11 From sapply to vapply",
    "text": "9.11 From sapply to vapply\nAs highlighted before, vapply() can be considered a more robust version of sapply(), because you explicitly restrict the output of the function you want to apply. Converting your sapply() expressions in your own R scripts to vapply() expressions is therefore a good practice (and also a breeze!).\n\nInstructions 100 XP\nConvert all the sapply() expressions on the right to their vapply() counterparts. Their results should be exactly the same; you’re only adding robustness. You’ll need the templates numeric(1) and logical(1).\n\n\nex_042.R\n\n# temp is already defined in the workspace\n\n# Convert to vapply() expression\nvapply(temp, max, numeric(1))\n\n# Convert to vapply() expression\nvapply(temp, function(x, y) { mean(x) > y }, y = 5, logical(1))"
  },
  {
    "objectID": "_intermediate_r_05.html#mathematical-utilities",
    "href": "_intermediate_r_05.html#mathematical-utilities",
    "title": "10  Utilities",
    "section": "10.1 Mathematical utilities",
    "text": "10.1 Mathematical utilities\nHave another look at some useful math functions that R features:\n\nabs(): Calculate the absolute value.\nsum(): Calculate the sum of all the values in a data structure.\nmean(): Calculate the arithmetic mean.\nround(): Round the values to 0 decimal places by default. Try out ?round in the console for variations of round() and ways to change the number of digits to round to.\n\nAs a data scientist in training, you’ve estimated a regression model on the sales data for the past six months. After evaluating your model, you see that the training error of your model is quite regular, showing both positive and negative values. A vector errors containing the error values has been pre-defined for you.\n\nInstructions 100 XP\nCalculate the sum of the absolute rounded values of the training errors. You can work in parts, or with a single one-liner. There’s no need to store the result in a variable, just have R print it.\n\n\nex_043.R\n\n# The errors vector has already been defined for you\nerrors <- c(1.9, -2.6, 4.0, -9.5, -3.4, 7.3)\n\n# Sum of absolute rounded values of errors\nsum(abs(round(errors)))"
  },
  {
    "objectID": "_intermediate_r_05.html#find-the-error",
    "href": "_intermediate_r_05.html#find-the-error",
    "title": "10  Utilities",
    "section": "10.2 Find the error",
    "text": "10.2 Find the error\nWe went ahead and pre-loaded some code for you, but there’s still an error. Can you trace it and fix it?\nIn times of despair, help with functions such as sum() and rev() are a single command away; simply execute the code ?sum and ?rev.\n\nInstructions 100 XP\nFix the error by including code on the last line. Remember: you want to call mean() only once!\n\n\nex_044.R\n\n# Don't edit these two lines\nvec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)\nvec2 <- rev(vec1)\n\n# Fix the error\nmean(abs(vec1))"
  },
  {
    "objectID": "_intermediate_r_05.html#data-utilities",
    "href": "_intermediate_r_05.html#data-utilities",
    "title": "10  Utilities",
    "section": "10.3 Data Utilities",
    "text": "10.3 Data Utilities\nR features a bunch of functions to juggle around with data structures::\n\nseq(): Generate sequences, by specifying the from, to, and by arguments.\nrep(): Replicate elements of vectors and lists.\nsort(): Sort a vector in ascending order. Works on numerics, but also on character strings and logicals.\nrev(): Reverse the elements in a data structures for which reversal is defined.\nstr(): Display the structure of any R object.\nappend(): Merge vectors or lists.\nis.*(): Check for the class of an R object.\nas.*(): Convert an R object from one class to another.\nunlist(): Flatten (possibly embedded) lists to produce a vector.\n\nRemember the social media profile views data? Your LinkedIn and Facebook view counts for the last seven days have been pre-defined as lists.\n\nInstructions 100 XP\n\nConvert both linkedin and facebook lists to a vector, and store them as li_vec and fb_vec respectively.\nNext, append fb_vec to the li_vec (Facebook data comes last). Save the result as social_vec.\nFinally, sort social_vec from high to low. Print the resulting vector.\n\n\n\nex_045.R\n\n# The linkedin and facebook lists have already been created for you\nlinkedin <- list(16, 9, 13, 5, 2, 17, 14)\nfacebook <- list(17, 7, 5, 16, 8, 13, 14)\n\n# Convert linkedin and facebook to a vector: li_vec and fb_vec\nli_vec <- unlist(linkedin)\nfb_vec <- unlist(facebook)\n\n# Append fb_vec to li_vec: social_vec\nsocial_vec <- append(li_vec, fb_vec)\n\n# Sort social_vec\nprint(sort(social_vec, decreasing=TRUE))"
  },
  {
    "objectID": "_intermediate_r_05.html#find-the-error-2",
    "href": "_intermediate_r_05.html#find-the-error-2",
    "title": "10  Utilities",
    "section": "10.4 Find the error (2)",
    "text": "10.4 Find the error (2)\nJust as before, let’s switch roles. It’s up to you to see what unforgivable mistakes we’ve made. Go fix them!\n\nInstructions 100 XP\nCorrect the expression. Make sure that your fix still uses the functions rep() and seq().\n\n\nex_046.R\n\n# Fix me\nrep(seq(1, 7, by = 2), times = 7)"
  },
  {
    "objectID": "_intermediate_r_05.html#beat-gauss-using-r",
    "href": "_intermediate_r_05.html#beat-gauss-using-r",
    "title": "10  Utilities",
    "section": "10.5 Beat Gauss using R",
    "text": "10.5 Beat Gauss using R\nThere is a popular story about young Gauss. As a pupil, he had a lazy teacher who wanted to keep the classroom busy by having them add up the numbers 1 to 100. Gauss came up with an answer almost instantaneously, 5050. On the spot, he had developed a formula for calculating the sum of an arithmetic series. There are more general formulas for calculating the sum of an arithmetic series with different starting values and increments. Instead of deriving such a formula, why not use R to calculate the sum of a sequence?\n\nInstructions 100 XP\n\nUsing the function seq(), create a sequence that ranges from 1 to 500 in increments of 3. Assign the resulting vector to a variable seq1.\nAgain with the function seq(), create a sequence that ranges from 1200 to 900 in increments of -7. Assign it to a variable seq2.\nCalculate the total sum of the sequences, either by using the sum() function twice and adding the two results, or by first concatenating the sequences and then using the sum() function once. Print the result to the console.\n\n\n\nex_047.R\n\n# Create first sequence: seq1\nseq1 <- seq(1, 500, by = 3)\n\n# Create second sequence: seq2\nseq2 <- seq(1200, 900, by = -7)\n\n# Calculate total sum of the sequences\nprint(sum(seq1) + sum(seq2))"
  },
  {
    "objectID": "_intermediate_r_05.html#grepl-grep",
    "href": "_intermediate_r_05.html#grepl-grep",
    "title": "10  Utilities",
    "section": "10.6 grepl & grep",
    "text": "10.6 grepl & grep\nIn their most basic form, regular expressions can be used to see whether a pattern exists inside a character string or a vector of character strings. For this purpose, you can use:\ngrepl(), which returns TRUE when a pattern is found in the corresponding character string. grep(), which returns a vector of indices of the character strings that contains the pattern. Both functions need a pattern and an x argument, where pattern is the regular expression you want to match for, and the x argument is the character vector from which matches should be sought.\nIn this and the following exercises, you’ll be querying and manipulating a character vector of email addresses! The vector emails has been pre-defined so you can begin with the instructions straight away!\n\nInstructions 100 XP\n\nUse grepl() to generate a vector of logicals that indicates whether these email addresses contain \"edu\". Print the result to the output.\nDo the same thing with grep(), but this time save the resulting indexes in a variable hits.\nUse the variable hits to select from the emails vector only the emails that contain \"edu\".\n\n\n\nex_48.R\n\n# The emails vector has already been defined for you\nemails <- \n    c(\n        \"john.doe@ivyleague.edu\",\n        \"education@world.gov\",\n        \"dalai.lama@peace.org\",\n        \"invalid.edu\",\n        \"quant@bigdatacollege.edu\",\n        \"cookie.monster@sesame.tv\"\n    )\n\n# Use grepl() to match for \"edu\"\nprint(grepl('edu', emails))\n\n# Use grep() to match for \"edu\", save result to hits\nhits <- grep('edu', emails)\n\n# Subset emails using hits\nemails[hits]"
  },
  {
    "objectID": "_intermediate_r_05.html#grepl-grep-2",
    "href": "_intermediate_r_05.html#grepl-grep-2",
    "title": "10  Utilities",
    "section": "10.7 grepl & grep (2)",
    "text": "10.7 grepl & grep (2)\nYou can use the caret, ^, and the dollar sign, $ to match the content located in the start and end of a string, respectively. This could take us one step closer to a correct pattern for matching only the “.edu” email addresses from our list of emails. But there’s more that can be added to make the pattern more robust:\n\n@, because a valid email must contain an at-sign.\n.* , which matches any character (.) zero or more times (*). Both the dot and the asterisk are metacharacters. You can use them to match any character between the at-sign and the “.edu” portion of an email address.\n\\\\.edu$, to match the “.edu” part of the email at the end of the string. The \\\\ part escapes the dot: it tells R that you want to use the . as an actual character.\n\n\nInstructions 100 XP\n\nUse grepl() with the more advanced regular expression to return a logical vector. Simply print the result.\nDo a similar thing with grep() to create a vector of indices. Store the result in the variable hits.\nUse emails[hits] again to subset the emails vector.\n\n\n\nex_049.R\n\n# The emails vector has already been defined for you\nemails <- c(\n    \"john.doe@ivyleague.edu\",\n    \"education@world.gov\",\n    \"dalai.lama@peace.org\",\n    \"invalid.edu\",\n    \"quant@bigdatacollege.edu\",\n    \"cookie.monster@sesame.tv\"\n)\ngrepl(\"@.*\\\\.edu$\", emails)\nhits <- grep(\"@.*\\\\.edu$\", emails)\nemails[hits]"
  },
  {
    "objectID": "_intermediate_r_05.html#sub-gsub",
    "href": "_intermediate_r_05.html#sub-gsub",
    "title": "10  Utilities",
    "section": "10.8 sub & gsub",
    "text": "10.8 sub & gsub\nWhile grep() and grepl() were used to simply check whether a regular expression could be matched with a character vector, sub() and gsub() take it one step further: you can specify a replacement argument. If inside the character vector x, the regular expression pattern is found, the matching element(s) will be replaced with replacement. sub() only replaces the first match, whereas gsub() replaces all matches.\nSuppose that emails vector you’ve been working with is an excerpt of DataCamp’s email database. Why not offer the owners of the .edu email addresses a new email address on the datacamp.edu domain? This could be quite a powerful marketing stunt: Online education is taking over traditional learning institutions! Convert your email and be a part of the new generation!\n\nInstructions 100 XP\nWith the advanced regular expression \"@.*\\\\.edu$\", use sub() to replace the match with \"@datacamp.edu\". Since there will only be one match per character string, gsub() is not necessary here. Inspect the resulting output.\n\n\nex_050.R\n\n# The emails vector has already been defined for you\nemails <- c(\n    \"john.doe@ivyleague.edu\",\n    \"education@world.gov\",\n    \"global@peace.org\",\n    \"invalid.edu\",\n    \"quant@bigdatacollege.edu\",\n    \"cookie.monster@sesame.tv\"\n)\n\n# Use sub() to convert the email domains to datacamp.edu\nsub(\"@.*\\\\.edu$\", \"@datacamp.edu\", emails)"
  },
  {
    "objectID": "_intermediate_r_05.html#sub-gsub-2",
    "href": "_intermediate_r_05.html#sub-gsub-2",
    "title": "10  Utilities",
    "section": "10.9 sub & gsub (2)",
    "text": "10.9 sub & gsub (2)\nRegular expressions are a typical concept that you’ll learn by doing and by seeing other examples. Before you rack your brains over the regular expression in this exercise, have a look at the new things that will be used:\n\n.*: A usual suspect! It can be read as “any character that is matched zero or more times”.\n\\s: Match a space. The “s” is normally a character, escaping it (\\) makes it a metacharacter.\n[0-9]+: Match the numbers 0 to 9, at least once (+).\n([0-9]+): The parentheses are used to make parts of the matching string available to define the replacement. The \\1 in the replacement argument of sub() gets set to the string that is captured by the regular expression [0-9]+. {. r code-line-numbers=\"false\"} awards <- c(     \"Won 1 Oscar.\",     \"Won 1 Oscar. Another 9 wins & 24 nominations.\",     \"1 win and 2 nominations.\",     \"2 wins & 3 nominations.\",     \"Nominated for 2 Golden Globes. 1 more win & 2 nominations.\",     \"4 wins & 1 nomination.\" ) sub(\".*\\\\s([0-9]+)\\\\snomination.*$\", \"\\\\1\", awards) What does this code chunk return? awards is already defined in the workspace so you can start playing in the console straight away.\n\n\nInstructions 50 XP\nPossible Answers\n\nA vector of integers containing: 1, 24, 2, 3, 2, 1.\nThe vector awards gets returned as there isn’t a single element in awards that matches the regular expression.\nA vector of character strings containing \"1\", \"24\", \"2\", \"3\", \"2\", \"1\".\nA vector of character strings containing \"Won 1 Oscar.\", \"24\", \"2\", \"3\", \"2\", \"1\"."
  },
  {
    "objectID": "_intermediate_r_05.html#right-here-right-now",
    "href": "_intermediate_r_05.html#right-here-right-now",
    "title": "10  Utilities",
    "section": "10.10 Right here, right now",
    "text": "10.10 Right here, right now\nIn R, dates are represented by Date objects, while times are represented by POSIXct objects. Under the hood, however, these dates and times are simple numerical values. Date objects store the number of days since the 1st of January in 1970. POSIXct objects on the other hand, store the number of seconds since the 1st of January in 1970.\nThe 1st of January in 1970 is the common origin for representing times and dates in a wide range of programming languages. There is no particular reason for this; it is a simple convention. Of course, it’s also possible to create dates and times before 1970; the corresponding numerical values are simply negative in this case.\n\nInstructions 100 XP\n\nAsk R for the current date, and store the result in a variable today.\nTo see what today looks like under the hood, call unclass() on it.\nAsk R for the current time, and store the result in a variable, now.\nTo see the numerical value that corresponds to now, call unclass() on it.\n\n\n\nex_50.R\n\n# Get the current date: today\ntoday <- Sys.date()\n# See what today looks like under the hood\nunclass(today)\n# Get the current time: now\nnow <-  Sys.time()\n# See what now looks like under the hood\nunclass(now)"
  },
  {
    "objectID": "_intermediate_r_05.html#create-and-format-dates",
    "href": "_intermediate_r_05.html#create-and-format-dates",
    "title": "10  Utilities",
    "section": "10.11 Create and format dates",
    "text": "10.11 Create and format dates\nTo create a Date object from a simple character string in R, you can use the as.Date() function. The character string has to obey a format that can be defined using a set of symbols (the examples correspond to 13 January, 1982):\n\n%Y: 4-digit year (1982)\n%y: 2-digit year (82)\n%m: 2-digit month (01)\n%d: 2-digit day of the month (13)\n%A: weekday (Wednesday)\n%a: abbreviated weekday (Wed)\n%B: month (January)\n%b: abbreviated month (Jan)\n\nThe following R commands will all create the same Date object for the 13th day in January of 1982:\nas.Date(\"1982-01-13\")\nas.Date(\"Jan-13-82\", format = \"%b-%d-%y\")\nas.Date(\"13 January, 1982\", format = \"%d %B, %Y\")\nNotice that the first line here did not need a format argument, because by default R matches your character string to the formats \"%Y-%m-%d\" or \"%Y/%m/%d\".\nIn addition to creating dates, you can also convert dates to character strings that use a different date notation. For this, you use the format() function. Try the following lines of code:\ntoday <- Sys.Date() format(Sys.Date(), format = “%d %B, %Y”) format(Sys.Date(), format = “Today is a %A!”)\n\nInstructions 100 XP\n\nThree character strings representing dates have been created for you. Convert them to dates using as.Date(), and assign them to date1, date2, and date3 respectively. The code for date1 is already included.\nExtract useful information from the dates as character strings using format(). From the first date, select the weekday. From the second date, select the day of the month. From the third date, you should select the abbreviated month and the 4-digit year, separated by a space.\n\n\n\nex_51.R\n\n# Definition of character strings representing dates\nstr1 <- \"May 23, '96\"\nstr2 <- \"2012-03-15\"\nstr3 <- \"30/January/2006\"\n\n# Convert the strings to dates: date1, date2, date3\ndate1 <- as.Date(str1, format = \"%b %d, '%y\")\ndate2 <- as.Date(str2, format = \"%Y-%m-%d\")\ndate3 <- as.Date(str3, format = \"%d/%B/%Y\")\n\n# Convert dates to formatted strings\nformat(date1, \"%A\")\nformat(date2, \"%d\")\nformat(date3, \"%b %Y\")"
  },
  {
    "objectID": "_intermediate_r_05.html#create-and-format-times",
    "href": "_intermediate_r_05.html#create-and-format-times",
    "title": "10  Utilities",
    "section": "10.12 Create and format times",
    "text": "10.12 Create and format times\nSimilar to working with dates, you can use as.POSIXct() to convert from a character string to a POSIXct object, and format() to convert from a POSIXct object to a character string. Again, you have a wide variety of symbols:\n\n%H: hours as a decimal number (00-23)\n%I: hours as a decimal number (01-12)\n%M: minutes as a decimal number\n%S: seconds as a decimal number\n%T: shorthand notation for the typical format %H:%M:%S\n%p: AM/PM indicator\n\nFor a full list of conversion symbols, consult the strptime documentation in the console:\n?strptime\nAgain, as.POSIXct() uses a default format to match character strings. In this case, it’s %Y-%m-%d %H:%M:%S. In this exercise, abstraction is made of different time zones.\n\n10.12.1 Instructions 100 XP\n\nConvert two strings that represent timestamps, str1 and str2, to POSIXct objects called time1 and time2.\nUsing format(), create a string from time1 containing only the minutes.\nFrom time2, extract the hours and minutes as \"hours:minutes AM/PM\". Refer to the assignment text above to find the correct conversion symbols!\n\n\n\nex_52.R\n\n    # Definition of character strings representing times\nstr1 <- \"May 23, '96 hours:23 minutes:01 seconds:45\"\nstr2 <- \"2012-3-12 14:23:08\"\n# Convert the strings to POSIXct objects: time1, time2\ntime1 <- as.POSIXct(str1, format = \"%B %d, '%y hours:%H minutes:%M seconds:%S\")\n\ntime2 <- \n    as.POSIXct(\n        str2, format = \"%Y-%m-%d %H:%M:%S\")\n\n# Convert times to formatted strings\nformat(time1, '%M')\nformat(time2, '%H:%M%p')"
  },
  {
    "objectID": "_intermediate_r_05.html#calculations-with-dates",
    "href": "_intermediate_r_05.html#calculations-with-dates",
    "title": "10  Utilities",
    "section": "10.13 Calculations with Dates",
    "text": "10.13 Calculations with Dates\nBoth Date and POSIXct R objects are represented by simple numerical values under the hood. This makes calculation with time and date objects very straightforward: R performs the calculations using the underlying numerical values, and then converts the result back to human-readable time information again.\nYou can increment and decrement Date objects, or do actual calculations with them:\ntoday <- Sys.Date()\ntoday + 1\ntoday - 1\nas.Date(\"2015-03-12\") - as.Date(\"2015-02-27\")\nTo control your eating habits, you decided to write down the dates of the last five days that you ate pizza. In the workspace, these dates are defined as five Date objects, day1 to day5. A vector pizza containing these 5 Date objects has been pre-defined for you.\n\nInstructions 100 XP\n\nCalculate the number of days that passed between the last and the first day you ate pizza. Print the result.\nUse the function diff() on pizza to calculate the differences between consecutive pizza days. Store the result in a new variable day_diff.\nCalculate the average period between two consecutive pizza days. Print the result.\n\n\n\nex_053.R\n\n# day1, day2, day3, day4 and day5 are already available in the \n# workspace Difference between last and first pizza day\nprint(day5 - day1)\n# Create vector pizza\npizza <- c(day1, day2, day3, day4, day5)\n# Create differences between consecutive pizza days: day_diff\nday_diff <- diff(pizza)\n# Average period between two consecutive pizza days\nprint(mean(day_diff))"
  },
  {
    "objectID": "_intermediate_r_05.html#calculations-with-times",
    "href": "_intermediate_r_05.html#calculations-with-times",
    "title": "10  Utilities",
    "section": "10.14 Calculations with Times",
    "text": "10.14 Calculations with Times\nCalculations using POSIXct objects are completely analogous to those using Date objects. Try to experiment with this code to increase or decrease POSIXct objects:\nnow <- Sys.time()\nnow + 3600          # add an hour\nnow - 3600 * 24     # subtract a day\nAdding or subtracting time objects is also straightforward:\nbirth <- as.POSIXct(\"1879-03-14 14:37:23\")\ndeath <- as.POSIXct(\"1955-04-18 03:47:12\")\neinstein <- death - birth\neinstein\nYou’re developing a website that requires users to log in and out. You want to know what is the total and average amount of time a particular user spends on your website. This user has logged in 5 times and logged out 5 times as well. These times are gathered in the vectors login and logout, which are already defined in the workspace.\n\nInstructions 100 XP\n\nCalculate the difference between the two vectors logout and login, i.e. the time the user was online in each independent session. Store the result in a variable time_online.\nInspect the variable time_online by printing it.\nCalculate the total time that the user was online. Print the result.\nCalculate the average time the user was online. Print the result.\n\n\n\nex_054.R\n\n# login and logout are already defined in the workspace\n# Calculate the difference between login and logout: time_online\n\ntime_on_line <- logout - login\n\n# Inspect the variable time_online\ntime_on_line\n\n# Calculate the total time online\nsum(time_on_line)\n\n# Calculate the average time online\nmean(time_on_line)"
  },
  {
    "objectID": "_intermediate_r_05.html#time-is-of-the-essence",
    "href": "_intermediate_r_05.html#time-is-of-the-essence",
    "title": "10  Utilities",
    "section": "10.15 Time is of the essence",
    "text": "10.15 Time is of the essence\nThe dates when a season begins and ends can vary depending on who you ask. People in Australia will tell you that spring starts on September 1st. The Irish people in the Northern hemisphere will swear that spring starts on February 1st, with the celebration of St. Brigid’s Day. Then there’s also the difference between astronomical and meteorological seasons: while astronomers are used to equinoxes and solstices, meteorologists divide the year into 4 fixed seasons that are each three months long. (source: www.timeanddate.com)\nA vector astro, which contains character strings representing the dates on which the 4 astronomical seasons start, has been defined on your workspace. Similarly, a vector meteo has already been created for you, with the meteorological beginnings of a season.\n\nInstructions 100 XP\n\nUse as.Date() to convert the astro vector to a vector containing Date objects. You will need the %d, %b and %Y symbols to specify the format. Store the resulting vector as astro_dates.\nUse as.Date() to convert the meteo vector to a vector with Date objects. This time, you will need the %B, %d and %y symbols for the format argument. Store the resulting vector asmeteo_dates.\nWith a combination of max(), abs() and -, calculate the maximum absolute difference between the astronomical and the meteorological beginnings of a season, i.e. astro_dates and meteo_dates. Simply print this maximum difference to the console output.\n\n\n\nex_055.R\n\n# Convert astro to vector of Date objects: astro_dates\n\nastro_dates <- as.Date(astro, \"%d-%b-%Y\")\n# Convert meteo to vector of Date objects: meteo_dates\nmeteo_dates <- as.Date(meteo, format = \"%B %d, %y\")\n\n# Calculate the maximum absolute difference between astro_dates and meteo_dates\nmax(abs(astro_dates - meteo_dates))"
  },
  {
    "objectID": "data_visualization.html",
    "href": "data_visualization.html",
    "title": "11  Data visualization with ggplot2 and friends",
    "section": "",
    "text": "12 Data Visualizations"
  },
  {
    "objectID": "background_02.html",
    "href": "background_02.html",
    "title": "Introduction to Writing Functions in R",
    "section": "",
    "text": "Being able to write your own functions makes your analyses more readable, with fewer errors, and more reusable from project to project. Function writing will increase your productivity more than any other skill! In this course you’ll learn the basics of function writing, focusing on the arguments going into the function and the return values. You’ll be writing useful data science functions, and using real-world data on Wyoming tourism, stock price/earnings ratios, and grain yields."
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#read.csv",
    "href": "_introduction_to_importing_data_in_R_01.html#read.csv",
    "title": "14  Importing data from flat files with utils",
    "section": "14.1 read.csv",
    "text": "14.1 read.csv\nThe utils package, which is automatically loaded in your R session on startup, can import CSV files with the read.csv() function.\nIn this exercise, you’ll be working with swimming_pools.csv (view); it contains data on swimming pools in Brisbane, Australia (Source: data.gov.au). The file contains the column names in the first row. It uses a comma to separate values within rows.\nType dir() in the console to list the files in your working directory. You’ll see that it contains swimming_pools.csv, so you can start straight away.\n\n14.1.1 Instructions 100 XP\n\nUse read.csv() to import “swimming_pools.csv” as a data frame with the name pools.\nPrint the structure of pools using str().\n\n\n\nex_001.R\n\n# Import swimming_pools.csv: pools\npools <- read.csv(\"swimming_pools.csv\")\n# Print the structure of pools\nstr(pools)\n\n\n\nReferences\n\nhttp://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/swimming_pools.csv\nhttps://data.gov.au/dataset/swimming-pools-brisbane-city-council"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#stringsasfactors",
    "href": "_introduction_to_importing_data_in_R_01.html#stringsasfactors",
    "title": "14  Importing data from flat files with utils",
    "section": "14.2 stringsAsFactors",
    "text": "14.2 stringsAsFactors\nWith stringsAsFactors, you can tell R whether it should convert strings in the flat file to factors.\nFor all importing functions in the utils package, this argument is TRUE, which means that you import strings as factors. This only makes sense if the strings you import represent categorical variables in R. If you set stringsAsFactors to FALSE, the data frame columns corresponding to strings in your text file will be character.\nYou’ll again be working with the swimming_pools.csv (view in data folder) file. It contains two columns (Name and Address), which shouldn’t be factors.\n\nInstructions 100 XP\n\nUse read.csv() to import the data in \"swimming_pools.csv\" as a data frame called pools; make sure that strings are imported as characters, not as factors.\nUsing str(), display the structure of the dataset and check that you indeed get character vectors instead of factors.\n\n\n\nex_002.R\n\n# Import swimming_pools.csv correctly: pools\npools <- read.csv(\"swimming_pools.csv\", stringsAsFactors = FALSE)\n\n# Check the structure of pools\nstr(pools)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#any-changes",
    "href": "_introduction_to_importing_data_in_R_01.html#any-changes",
    "title": "14  Importing data from flat files with utils",
    "section": "14.3 Any changes?",
    "text": "14.3 Any changes?\nConsider the code below that loads data from swimming_pools.csv in two distinct ways:\n# Option A\npools <- read.csv(\"swimming_pools.csv\", stringsAsFactors = TRUE)\n\n# Option B\npools <- read.csv(\"swimming_pools.csv\", stringsAsFactors = FALSE)\n\n\nex_003.R\n\nlibrary(projmgr)\n\n# the following could be run in RMarkdown\ntodo_path <- system.file(\n    \"extdata\",\n    \"todo-ex.yml\",\n     package = \"projmgr\",\n     mustWork = TRUE\n)\n\nmy_todo <- read_todo(todo_path)\nreport_todo(my_todo)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#read.delim",
    "href": "_introduction_to_importing_data_in_R_01.html#read.delim",
    "title": "14  Importing data from flat files with utils",
    "section": "14.4 read.delim",
    "text": "14.4 read.delim\nAside from .csv files, there are also the .txt files which are basically text files. You can import these functions with read.delim(). By default, it sets the sep argument to \"\\t\" (fields in a record are delimited by tabs) and the header argument to TRUE (the first row contains the field names).\nIn this exercise, you will import hotdogs.txt (view), containing information on sodium and calorie levels in different hotdogs (Source: UCLA). The dataset has 3 variables, but the variable names are not available in the first line of the file. The file uses tabs as field separators.\n\nInstructions 100 XP\n\nImport the data in \"hotdogs.txt\" with read.delim(). Call the resulting data frame hotdogs. The variable names are not on the first line, so make sure to set the header argument appropriately.\nCall summary() on hotdogs. This will print out some summary statistics about all variables in the data frame.\n\n\n\nex_004.R\n\n# Import hotdogs.txt: hotdogs\nhotdogs <- read.delim(\n    \"hotdogs.txt\",\n    sep = '\\t',\n    header = FALSE\n)\n# Summarize hotdogs\nsummary(hotdogs)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#read.table",
    "href": "_introduction_to_importing_data_in_R_01.html#read.table",
    "title": "14  Importing data from flat files with utils",
    "section": "14.5 read.table",
    "text": "14.5 read.table\nIf you’re dealing with more exotic flat file formats, you’ll want to use read.table(). It’s the most basic importing function; you can specify tons of different arguments in this function. Unlike read.csv() and read.delim(), the header argument defaults to FALSE and the sep argument is “” by default.\nUp to you again! The data is still hotdogs.txt (view). It has no column names in the first row, and the field separators are tabs. This time, though, the file is in the data folder inside your current working directory. A variable path with the location of this file is already coded for you.\n\nInstructions 100 XP\n\nFinish the read.table() call that’s been prepared for you. Use the path variable, and make sure to set sep correctly.\nCall head() on hotdogs; this will print the first 6 observations in the data frame.\n\n\n\nex_005.R\n\n# Path to the hotdogs.txt file: path\npath <- file.path(\"data\", \"hotdogs.txt\")\n\n# Import the hotdogs.txt file: hotdogs\nhotdogs <- \n    read.table(\n        path, \n        sep = '\\t',\n        col.names = c(\"type\", \"calories\", \"sodium\")\n    )\n\n# Call head() on hotdogs\nhead(hotdogs)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#arguments",
    "href": "_introduction_to_importing_data_in_R_01.html#arguments",
    "title": "14  Importing data from flat files with utils",
    "section": "14.6 Arguments",
    "text": "14.6 Arguments\nLily and Tom are having an argument because they want to share a hot dog but they can’t seem to agree on which one to choose. After some time, they simply decide that they will have one each. Lily wants to have the one with the fewest calories while Tom wants to have the one with the most sodium.\nNext to calories and sodium, the hotdogs have one more variable: type. This can be one of three things: Beef, Meat, or Poultry, so a categorical variable: a factor is fine.\n\nInstructions 100 XP\n\nFinish the read.delim() call to import the data in “hotdogs.txt”. It’s a tab- delimited file without names in the first row.\nThe code that selects the observation with the lowest calorie count and stores it in the variable lily is already available. It uses the function which.min(), that returns the index the smallest value in a vector.\nDo a similar thing for Tom: select the observation with the most sodium and store it in tom. Use which.max() this time.\nFinally, print both the observations lily and tom.\n\n\n\nex_006.R\n\n# Finish the read.delim() call\nhotdogs <- \n    read.delim(\n        \"hotdogs.txt\",\n        header = FALSE,\n        col.names = c(\"type\", \"calories\", \"sodium\")\n    )\n\n# Select the hot dog with the least calories: lily\nlily <- hotdogs[which.min(hotdogs$calories), ]\n\n# Select the observation with the most sodium: tom\n\ntom <- hotdogs[which.max(hotdogs$sodium), ]\n# Print lily and tom\nlily\ntom"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_01.html#column-classes",
    "href": "_introduction_to_importing_data_in_R_01.html#column-classes",
    "title": "14  Importing data from flat files with utils",
    "section": "14.7 Column classes",
    "text": "14.7 Column classes\nNext to column names, you can also specify the column types or column classes of the resulting data frame. You can do this by setting the colClasses argument to a vector of strings representing classes:\nread.delim(\"my_file.txt\", \n           colClasses = c(\"character\",\n                          \"numeric\",\n                          \"logical\"))\nThis approach can be useful if you have some columns that should be factors and others that should be characters. You don’t have to bother with stringsAsFactors anymore; just state for each column what the class should be.\nIf a column is set to “NULL” in the colClasses vector, this column will be skipped and will not be loaded into the data frame.\n\nInstructions 100 XP\n\nThe read.delim() call from before is already included and creates the hotdogs data frame. Go ahead and display the structure of hotdogs.\nEdit the second read.delim() call. Assign the correct vector to the colClasses argument. NA should be replaced with a character vector: c(\"factor\", \"NULL\", \"numeric\").\nDisplay the structure of hotdogs2 and look for the difference.\n\n\n\nex_007.R\n\n# Previous call to import hotdogs.txt\nhotdogs <- \n    read.delim(\n        \"hotdogs.txt\",\n         header = FALSE,\n         col.names = c(\"type\", \"calories\", \"sodium\")\n    )\n\n# Display structure of hotdogs\nstr(hotdogs)\n\n# Edit the colClasses argument to import the data correctly: hotdogs2\nhotdogs2 <- read.delim(\n    \"hotdogs.txt\",\n    header = FALSE,\n    col.names = c(\"type\", \"calories\", \"sodium\"),\n    colClasses =  c(\"factor\", \"NULL\", \"numeric\")\n)\n\n\n# Display structure of hotdogs2\nstr(hotdogs2)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#read_csv",
    "href": "_introduction_to_importing_data_in_R_02.html#read_csv",
    "title": "15  readr & data.table",
    "section": "15.1 read_csv",
    "text": "15.1 read_csv\nCSV files can be imported with read_csv(). It’s a wrapper function around read_delim() that handles all the details for you. For example, it will assume that the first row contains the column names.\nThe dataset you’ll be working with here is potatoes.csv (view in dataset folder). It gives information on the impact of storage period and cooking on potatoes’ flavor. It uses commas to delimit fields in a record, and contains column names in the first row. The file is available in your workspace."
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#instructions-100-xp",
    "href": "_introduction_to_importing_data_in_R_02.html#instructions-100-xp",
    "title": "15  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nLoad the readr package with library().\nImport \"potatoes.csv\" using read_csv(). Assign the resulting data frame to the variable potatoes.\n\n\nex_008.R\n\n# Load the readr package\nlibrary(readr)\n\n# Import potatoes.csv with read_csv(): potatoes\npotatoes <- read_csv(\"potatoes.csv\")"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#read_tsv",
    "href": "_introduction_to_importing_data_in_R_02.html#read_tsv",
    "title": "15  readr & data.table",
    "section": "15.2 read_tsv",
    "text": "15.2 read_tsv\nWhere you use read_csv() to easily read in CSV files, you use read_tsv() to easily read in TSV files. TSV is short for tab- separated values.\nThis time, the potatoes data comes in the form of a tab-separated values file; potatoes.txt. In contrast to potatoes.csv, this file does not contain columns names in the first row, though.\nThere’s a vector properties that you can use to specify these column names manually."
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#instructions-100-xp-1",
    "href": "_introduction_to_importing_data_in_R_02.html#instructions-100-xp-1",
    "title": "15  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse read_tsv() to import the potatoes data from potatoes.txt and store it in the data frame potatoes. In addition to the path to the file, you’ll also have to specify the col_names argument; you can use the properties vector for this.\nCall head() on potatoes to show the first observations of your dataset.\n\n\n\nex_009.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\n    \"area\",\n    \"temp\",\n    \"size\",\n    \"storage\",\n    \"method\",\n    \"texture\",\n    \"flavor\",\n    \"moistness\"\n)\n\n# Import potatoes.txt: potatoes\npotatoes <- read_tsv(\n    \"potatoes.txt\",\n    col_names = properties\n)\n\n# Call head() on potatoes\nhead(potatoes)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#read_delim",
    "href": "_introduction_to_importing_data_in_R_02.html#read_delim",
    "title": "15  readr & data.table",
    "section": "15.3 read_delim",
    "text": "15.3 read_delim\nJust as read.table() was the main utils function, read_delim() is the main readr function.\nread_delim() takes two mandatory arguments:\n\nfile: the file that contains the data\ndelim: the character that separates the values in the data file\n\nYou’ll again be working with potatoes.txt (view); the file uses tabs (\"\\t\") to delimit values and does not contain column names in its first line. It’s available in your working directory so you can start right away. As before, the vector properties is available to set the col_names.\n\nInstructions 100 XP\n\nImport all the data in “potatoes.txt” using read_delim(); store the resulting data frame in potatoes.\nPrint out potatoes.\n\n\n\nex_010.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\n    \"area\",\n    \"temp\",\n    \"size\",\n    \"storage\",\n    \"method\",\n    \"texture\",\n    \"flavor\",\n    \"moistness\"\n)\n\n# Import potatoes.txt using read_delim(): potatoes\npotatoes <- read_delim(\n    \"potatoes.txt\",\n    delim = \"\\t\",\n    col_names = properties\n)\n# Print out potatoes\npotatoes"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#skip-and-n_max",
    "href": "_introduction_to_importing_data_in_R_02.html#skip-and-n_max",
    "title": "15  readr & data.table",
    "section": "15.4 skip and n_max",
    "text": "15.4 skip and n_max\nThrough skip and n_max you can control which part of your flat file you’re actually importing into R.\n\nskip specifies the number of lines you’re ignoring in the flat file before actually starting to import data.\nn_max specifies the number of lines you’re actually importing. Say for example you have a CSV file with 20 lines, and set skip = 2 and n_max = 3, you’re only reading in lines 3, 4 and 5 of the file.\n\nWatch out: Once you skip some lines, you also skip the first line that can contain column names!\npotatoes.txt, a flat file with tab-delimited records and without column names, is available in your workspace.\n\nInstructions 100 XP\n\nFinish the first read_tsv() call to import observations 7, 8, 9, 10 and 11 from potatoes.txt.\n\n\n\nex_011.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\n    \"area\",\n    \"temp\",\n    \"size\",\n    \"storage\",\n    \"method\",\n    \"texture\",\n    \"flavor\",\n    \"moistness\"\n)\n\n# Import 5 observations from potatoes.txt: potatoes_fragment\npotatoes_fragment <- read_tsv(\n    \"potatoes.txt\",\n    skip = 6, \n    n_max = 5,\n    col_names = properties\n)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#col_types",
    "href": "_introduction_to_importing_data_in_R_02.html#col_types",
    "title": "15  readr & data.table",
    "section": "15.5 col_types",
    "text": "15.5 col_types\nYou can also specify which types the columns in your imported data frame should have. You can do this with col_types. If set to NULL, the default, functions from the readr package will try to find the correct types themselves. You can manually set the types with a string, where each character denotes the class of the column: character, double, integer and logical. _ skips the column as a whole.\npotatoes.txt, a flat file with tab-delimited records and without column names, is again available in your workspace.\n\nInstructions 100 XP\n\nIn the second read_tsv() call, edit the col_types argument to import all columns as characters (c). Store the resulting data frame in potatoes_char.\nPrint out the structure of potatoes_char and verify whether all column types are chr, short for character.\n\n\n\nex_012.R\n\n# Column names\nproperties <- c(\n    \"area\",\n    \"temp\",\n    \"size\",\n    \"storage\",\n    \"method\",\n    \"texture\",\n    \"flavor\",\n    \"moistness\"\n)\n\n# Import all data, but force all columns to be character: potatoes_char\npotatoes_char <- read_tsv(\n    \"potatoes.txt\",\n    col_types = \"cccccccc\",\n    col_names = properties\n)\n# Print out structure of potatoes_char\nstr(potatoes_char)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#col_types-with-collectors",
    "href": "_introduction_to_importing_data_in_R_02.html#col_types-with-collectors",
    "title": "15  readr & data.table",
    "section": "15.6 col_types with collectors",
    "text": "15.6 col_types with collectors\nAnother way of setting the types of the imported columns is using collectors. Collector functions can be passed in a list() to the col_types argument of read_ functions to tell them how to interpret values in a column.\nFor a complete list of collector functions, you can take a look at the collector documentation. For this exercise you will need two collector functions:\n\ncol_integer(): the column should be interpreted as an integer.\ncol_factor(levels, ordered = FALSE): the column should be interpreted as a factor with levels.\n\nIn this exercise, you will work with `hotdogs.txt, which is a tab-delimited file without column names in the first row.\n\nInstructions 100 XP\n\nhotdogs is created for you without setting the column types. Inspect its summary using the summary() function.\nTwo collector functions are defined for you: fac and int. Have a look at them, do you understand what they’re collecting?\nIn the second read_tsv() call, edit the col_types argument: Pass a list() with the elements fac, int and int, so the first column is imported as a factor, and the second and third column as integers.\nCreate a summary() of hotdogs_factor. Compare this to the summary of hotdogs.\n\n\n\nex_013.R\n\n# check if readr is already loaded\n\n# Import without col_types\nhotdogs <- read_tsv(\n    \"hotdogs.txt\",\n    col_names = c(\"type\", \"calories\", \"sodium\")\n)\n\n# Display the summary of hotdogs\nsummary(hotdogs)\n\n# The collectors you will need to import the data\nfac <- col_factor(levels = c(\"Beef\", \"Meat\", \"Poultry\"))\nint <- col_integer()\n\n# Edit the col_types argument to import the data correctly: hotdogs_factor\nhotdogs_factor <- read_tsv(\n    \"hotdogs.txt\",\n    col_names = c(\"type\", \"calories\", \"sodium\"),\n    col_types = list(fac, int, int)\n)\n\n# Display the summary of hotdogs_factor\nsummary(hotdogs_factor)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#fread",
    "href": "_introduction_to_importing_data_in_R_02.html#fread",
    "title": "15  readr & data.table",
    "section": "15.7 fread",
    "text": "15.7 fread\nYou still remember how to use read.table(), right? Well, fread() is a function that does the same job with very similar arguments. It is extremely easy to use and blazingly fast! Often, simply specifying the path to the file is enough to successfully import your data.\nDon’t take our word for it, try it yourself! You’ll be working with the potatoes.csv file, that’s available the dataset folder. Fields are delimited by commas, and the first line contains the column names.\n\nInstructions 100 XP\n-Use library() to load (NOT install) the data.table package. Check If you\nneed to install this package.\n-Import \"potatoes.csv\" with fread(). Simply pass it the file path and see if it worked. Store the result in a variable potatoes. Print out potatoes.\n\n\nex_014.R\n\n# load the data.table package using library()\nlibrary(data.table)\n\n# Import potatoes.csv with fread(): potatoes\npotatoes <- fread(\"potatoes.csv\")\n\n# Print out potatoes\npotatoes"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_02.html#fread-more-advance-use",
    "href": "_introduction_to_importing_data_in_R_02.html#fread-more-advance-use",
    "title": "15  readr & data.table",
    "section": "15.8 fread: more advance use",
    "text": "15.8 fread: more advance use\nNow that you know the basics about fread(), you should know about two arguments of the function: drop and select, to drop or select variables of interest.\nSuppose you have a dataset that contains 5 variables and you want to keep the first and fifth variable, named “a” and “e”. The following options will all do the trick:\nfread(\"path/to/file.txt\", drop = 2:4)\nfread(\"path/to/file.txt\", select = c(1, 5))\nfread(\"path/to/file.txt\", drop = c(\"b\", \"c\", \"d\"))\nfread(\"path/to/file.txt\", select = c(\"a\", \"e\"))\nLet’s stick with potatoes since we’re particularly fond of them here at DataCamp. The data is again available in the file potatoes.csv (view), containing comma- separated records.\n\nInstructions 100 XP\nUsing fread() and select or drop as arguments, only import the texture and moistness columns of the flat file. They correspond to the columns 6 and 8 in \"potatoes.csv\". Store the result in a variable potatoes. - plot() 2 columns of the potatoes data frame: texture on the x-axis, moistness on the y-axis. Use the dollar sign notation twice. Feel free to name your axes and plot.\n\n\nex_014.R\n\n# fread is already loaded\nlibrary(\"data.table\")\npath <- \"introduction_to_importing_data_in_R/potatoes.csv\"\n# Import columns 6 and 8 of potatoes.csv: potatoes\npotatoes <- fread(path, select = c(6, 8))\n\n\n# Plot texture (x) and moistness (y) of potatoes\nplot(potatoes$texture, potatoes$moistness)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#import-an-excel-sheet",
    "href": "_introduction_to_importing_data_in_R_03.html#import-an-excel-sheet",
    "title": "16  List the sheets of an Excel file",
    "section": "16.1 Import an Excel sheet",
    "text": "16.1 Import an Excel sheet\nNow that you know the names of the sheets in the Excel file you want to import, it is time to import those sheets into R. You can do this with the read_excel() function. Have a look at this recipe:\ndata <- read_excel(\"data.xlsx\", sheet = \"my_sheet\")\nThis call simply imports the sheet with the name \"my_sheet\" from the \"data.xlsx\" file. You can also pass a number to the sheet argument; this will cause read_excel() to import the sheet with the given sheet number. sheet = 1 will import the first sheet, sheet = 2 will import the second sheet, and so on.\nIn this exercise, you’ll continue working with the urbanpop.xlsx (view) file.\n\nInstructions 100 XP\n\nThe code to import the first and second sheets is already included. Can you add a command to also import the third sheet, and store the resulting data frame in pop_3?\nStore the data frames pop_1, pop_2 and pop_3 in a list that you call pop_list.\nDisplay the structure of pop_list.\n\n\n\nex_16.R\n\n# The readxl package is already loaded\n\n# Read the sheets, one by one\npop_1 <- read_excel(\"urbanpop.xlsx\", sheet = 1)\npop_2 <- read_excel(\"urbanpop.xlsx\", sheet = 2)\npop_3 <- read_excel(\"urbanpop.xlsx\", sheet = 3)\n\n# Put pop_1, pop_2 and pop_3 in a list: pop_list\npop_list <- list(pop_1, pop_2, pop_3)\n\n# Display the structure of pop_list\nstr(pop_list)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#reading-a-workbook00",
    "href": "_introduction_to_importing_data_in_R_03.html#reading-a-workbook00",
    "title": "16  List the sheets of an Excel file",
    "section": "16.2 Reading a workbook00",
    "text": "16.2 Reading a workbook00\nIn the previous exercise you generated a list of three Excel sheets that you imported. However, loading in every sheet manually and then merging them in a list can be quite tedious. Luckily, you can automate this with lapply(). If you have no experience with lapply(), feel free to take Chapter 4 of the Intermediate R course.\nHave a look at the example code below:\nmy_workbook <- lapply(excel_sheets(\"data.xlsx\"),\n                      read_excel,\n                      path = \"data.xlsx\")\nThe read_excel() function is called multiple times on the \"data.xlsx\" file and each sheet is loaded in one after the other. The result is a list of data frames, each data frame representing one of the sheets in data.xlsx.\nYou’re still working with the urbanpop.xlsx (view) file.\n\nInstructions 100 XP\n\nUse lapply() in combination with excel_sheets() and read_excel() to read all the Excel sheets in \"urbanpop.xlsx\". Name the resulting list pop_list.\nPrint the structure of pop_list.\n\n\n\nex_17.R\n\n# The readxl package is already loaded\n\n# Read all Excel sheets with lapply(): pop_list\npop_list <- lapply(\n    excel_sheets(\"urbanpop.xlsx\"),\n    read_excel,\n    path = \"urbanpop.xlsx\" \n)\n\n# Display the structure of pop_list\nstr(pop_list)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#the-col_names-argument",
    "href": "_introduction_to_importing_data_in_R_03.html#the-col_names-argument",
    "title": "16  List the sheets of an Excel file",
    "section": "16.3 The col_names argument",
    "text": "16.3 The col_names argument\nApart from path and sheet, there are several other arguments you can specify in read_excel(). One of these arguments is called col_names.\nBy default it is TRUE, denoting whether the first row in the Excel sheets contains the column names. If this is not the case, you can set col_names to FALSE. In this case, R will choose column names for you. You can also choose to set col_names to a character vector with names for each column. It works exactly the same as in the readr package.\nYou’ll be working with the urbanpop_nonames.xlsx (view) file. It contains the same data as urbanpop.xlsx (view) but has no column names in the first row of the excel sheets.\n\nInstructions 100 XP\n\nImport the first Excel sheet of \"urbanpop_nonames.xlsx\" and store the result in pop_a. Have R set the column names of the resulting data frame itself.\nImport the first Excel sheet of urbanpop_nonames.xlsx; this time, use the cols vector that has already been prepared for you to specify the column names. Store the resulting data frame in pop_b.\nPrint out the summary of pop_a.\nPrint out the summary of pop_b. Can you spot the difference with the other summary?\n\n\n\nex_18.R\n\n# The readxl package is already loaded\n\n# Import the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a\npop_a <- read_excel(\"urbanpop_nonames.xlsx\", col_names = FALSE)\n\n# Import the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b\ncols <- c(\"country\", paste0(\"year_\", 1960:1966))\npop_b <- read_excel(\"urbanpop_nonames.xlsx\", col_names = cols)\n\n# Print the summary of pop_a\nsummary(pop_a)\n\n# Print the summary of pop_b\nsummary(pop_b)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#the-skip-argument",
    "href": "_introduction_to_importing_data_in_R_03.html#the-skip-argument",
    "title": "16  List the sheets of an Excel file",
    "section": "16.4 The skip argument",
    "text": "16.4 The skip argument\nAnother argument that can be very useful when reading in Excel files that are less tidy, is skip. With skip, you can tell R to ignore a specified number of rows inside the Excel sheets you’re trying to pull data from. Have a look at this example:\nread_excel(\"data.xlsx\", skip = 15)\nIn this case, the first 15 rows in the first sheet of \"data.xlsx\" are ignored.\nIf the first row of this sheet contained the column names, this information will also be ignored by readxl. Make sure to set col_names to FALSE or manually specify column names in this case!\nThe file urbanpop.xlsx (view) is available in your directory; it has column names in the first rows.\n\nInstructions 100 XP\nImport the second sheet of \"urbanpop.xlsx\", but skip the first 21 rows. Make sure to set col_names = FALSE. Store the resulting data frame in a variable urbanpop_sel. Select the first observation from urbanpop_sel and print it out.\n\n\nex_18.R\n\n# The readxl package is already loaded\n\n# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel\n\nurbanpop_sel <- \n    read_excel(\n        sheet=2,\n        \"urbanpop.xlsx\",\n         col_names = FALSE,\n        skip=21     \n    )\n# Print out the first observation from urbanpop_sel\n\nhead(urbanpop_sel, 1)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#import-a-local-file",
    "href": "_introduction_to_importing_data_in_R_03.html#import-a-local-file",
    "title": "16  List the sheets of an Excel file",
    "section": "16.5 Import a local file",
    "text": "16.5 Import a local file\nIn this part of the chapter you’ll learn how to import .xls files using the gdata package. Similar to the readxl package, you can import single Excel sheets from Excel sheets to start your analysis in R.\nYou’ll be working with the urbanpop.xls (view) dataset, the .xls version of the Excel file you’ve been working with before. It’s available in your current working directory.\n\nInstructions 100 XP\n\nLoad the gdata package with library(). gdata and Perl are already installed on DataCamp’s Servers.\nImport the second sheet, named \"1967-1974\", of \"urbanpop.xls\" with read.xls(). Store the resulting data frame as urban_pop.\nPrint the first 11 observations of urban_pop with head().\n\n\n\nex_019.R\n\n# Load the gdata package\nlibrary(gdata)\n\n# Import the second sheet of urbanpop.xls: urban_pop\nurban_pop <- read.xls(\n    \"urbanpop.xls\",\n    sheet = \"1967-1974\"\n)\n\n# Print the first 11 observations using head()\nhead(urban_pop, 11)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#read.xls-wraps-around-read.table",
    "href": "_introduction_to_importing_data_in_R_03.html#read.xls-wraps-around-read.table",
    "title": "16  List the sheets of an Excel file",
    "section": "16.6 read.xls() wraps around read.table()",
    "text": "16.6 read.xls() wraps around read.table()\nRemember how read.xls() actually works? It basically comes down to two steps: converting the Excel file to a .csv file using a Perl script, and then reading that .csv file with the read.csv() function that is loaded by default in R, through the utils package.\nThis means that all the options that you can specify in read.csv(), can also be specified in read.xls().\nThe urbanpop.xls (view) dataset is already available in your workspace. It’s still comprised of three sheets, and has column names in the first row of each sheet.\n\nInstructions 100 XP\n\nFinish the read.xls() call that reads data from the second sheet of urbanpop.xls: skip the first 50 rows of the sheet. Make sure to set header appropriately and that the country names are not imported as factors.\nPrint the first 10 observations of urban_pop with head().\n\n\n\nex_20.R\n\n# The gdata package is alreaded loaded\n\n# Column names for urban_pop\ncolumns <- c(\"country\", paste0(\"year_\", 1967:1974))\n\n# Finish the read.xls call\nurban_pop <- read.xls(\n    \"urbanpop.xls\",\n    sheet = 2,\n    skip = 50,\n    header = FALSE, \n    stringsAsFactors = FALSE,\n    col.names = columns\n)\n\n# Print first 10 observation of urban_pop\nhead(urban_pop, 10)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_03.html#work-that-excel-data",
    "href": "_introduction_to_importing_data_in_R_03.html#work-that-excel-data",
    "title": "16  List the sheets of an Excel file",
    "section": "16.7 Work that Excel data!",
    "text": "16.7 Work that Excel data!\nNow that you can read in Excel data, let’s try to clean and merge it. You already used the cbind() function some exercises ago. Let’s take it one step further now.\nThe urbanpop.xls (view) dataset is available in your working directory. The file still contains three sheets, and has column names in the first row of each sheet.\n\nInstructions 100 XP\n\nAdd code to read the data from the third sheet in \"urbanpop.xls\". You want to end up with three data frames: urban_sheet1, urban_sheet2 and urban_sheet3.\nExtend the cbind() call so that it also includes urban_sheet3. Make sure the first column of urban_sheet2 and urban_sheet3 are removed, so you don’t have duplicate columns. Store the result in urban.\nUse na.omit() on the urban data frame to remove all rows that contain NA values. Store the cleaned data frame as urban_clean.\nPrint a summary of urban_clean and assert that there are no more NA values.\n\n\n\nex_21.R\n\n# Add code to import data from all three sheets in urbanpop.xls\npath <- \"urbanpop.xls\"\nurban_sheet1 <- read.xls(path, sheet = 1, stringsAsFactors = FALSE)\nurban_sheet2 <- read.xls(path, sheet = 2, stringsAsFactors = FALSE)\nurban_sheet3 <- read.xls(path, sheet = 3, stringsAsFactors = FALSE)\n\n\n# Extend the cbind() call to include urban_sheet3: urban\nurban <- cbind(\n    urban_sheet1,\n    urban_sheet2[-1],\n    urban_sheet3[-1]\n    )\n\n# Remove all rows with NAs from urban: urban_clean\n\nurban_clean <- na.omit(urban)\n# Print out a summary of urban_clean\nsummary(urban_clean)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#connect-to-a-workbook",
    "href": "_introduction_to_importing_data_in_R_04.html#connect-to-a-workbook",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.1 Connect to a workbook",
    "text": "17.1 Connect to a workbook\nWhen working with XLConnect, the first step will be to load a workbook in your R session with loadWorkbook(); this function will build a “bridge” between your Excel file and your R session.\nIn this and the following exercises, you will continue to work with urbanpop.xlsx (view data folder), containing urban population data throughout time.\n\nInstructions 100 XP\n\nLoad the XLConnect package using library(); it is already installed on DataCamp’s servers.\nUse loadWorkbook() to build a connection to the \"urbanpop.xlsx\" file in R. Call the workbook my_book.\nPrint out the class of my_book. What does this tell you?\n\n\n\nex_023.R\n\n# urbanpop.xlsx is available in your working directory\n# Load the XLConnect package\nlibrary(XLConnect)\n\n# Build connection to urbanpop.xlsx: my_book\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n\n# Print out the class of my_book\nclass(my_book)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#list-and-read-excel-sheets",
    "href": "_introduction_to_importing_data_in_R_04.html#list-and-read-excel-sheets",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.2 List and read Excel sheets",
    "text": "17.2 List and read Excel sheets\nJust as readxl and gdata, you can use XLConnect to import data from Excel file into R.\nTo list the sheets in an Excel file, use getSheets(). To actually import data from a sheet, you can use readWorksheet(). Both functions require an XLConnect workbook object as the first argument.\nYou’ll again be working with urbanpop.xlsx. The my_book object that links to this Excel file has already been created.\n\nInstructions 100 XP\n\nPrint out the sheets of the Excel file that my_book links to.\nImport the second sheet in my_book as a data frame. Print it out.\n\n\n\nex_024.R\n\n# XLConnect is already available\n\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n\n# List the sheets in my_book\ngetSheets(my_book)\n\n# Import the second sheet in my_book\nreadWorksheet(my_book, sheet = \"1967-1974\")"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#customize-readworksheet",
    "href": "_introduction_to_importing_data_in_R_04.html#customize-readworksheet",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.3 Customize readWorksheet",
    "text": "17.3 Customize readWorksheet\nTo get a clear overview about urbanpop.xlsx (view) without having to open up the Excel file, you can execute the following code:\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\nsheets <- getSheets(my_book)\nall <- lapply(sheets, readWorksheet, object = my_book)\nstr(all)\nSuppose we’re only interested in urban population data of the years 1968, 1969 and 1970. The data for these years is in the columns 3, 4, and 5 of the second sheet. Only selecting these columns will leave us in the dark about the actual countries the figures belong to.\n\nInstructions 100 XP\n\nExtend the readWorksheet() command with the startCol and endCol arguments to only import the columns 3, 4, and 5 of the second sheet. -urbanpop_sel no longer contains information about the countries now. Can you write another readWorksheet() command that imports only the first column from the second sheet? Store the resulting data frame as countries. -Use cbind() to paste together countries and urbanpop_sel, in this order. Store the result as selection.\n\n\n\nex_025.R\n\n# XLConnect is already available\n\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n\n# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel\nurbanpop_sel <- \n    readWorksheet(\n        my_book,\n        sheet = 2,\n        startCol = 3,\n        endCol = 5\n    )\n\n# Import first column from second sheet in my_book: \n# countries\ncountries <- \n    readWorksheet(\n        my_book,\n        sheet = 2,\n        startCol = 1,\n        endCol = 1\n    )\n# cbind() urbanpop_sel and countries together: selection\nselection <- cbind(countries, urbanpop_sel)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#add-worksheet",
    "href": "_introduction_to_importing_data_in_R_04.html#add-worksheet",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.4 Add worksheet",
    "text": "17.4 Add worksheet\nWhere readxl and gdata were only able to import Excel data, XLConnect's approach of providing an actual interface to an Excel file makes it able to edit your Excel files from inside R. In this exercise, you’ll create a new sheet. In the next exercise, you’ll populate the sheet with data, and save the results in a new Excel file.\nYou’ll continue to work with urbanpop.xlsx. The my_book object that links to this Excel file is already available.\n\nInstructions 100 XP\n\nUse createSheet(), to create a new sheet in my_book, named \"data_summary\".\nUse getSheets() to verify that my_book now represents an Excel file with four sheets.\n\n\n\nex_026.R\n\n# XLConnect is already available\n\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n\n# Add a worksheet to my_book, named \"data_summary\"\ncreateSheet(my_book, \"data_summary\")\n\n# Use getSheets() on my_book\ngetSheets(my_book)"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#populate-worksheet",
    "href": "_introduction_to_importing_data_in_R_04.html#populate-worksheet",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.5 Populate worksheet",
    "text": "17.5 Populate worksheet\nThe first step of creating a sheet is done; let’s populate it with some data now! summ, a data frame with some summary statistics on the two Excel sheets is already coded so you can take it from there.\n\nInstructions 100 XP\n\nUse writeWorksheet() to populate the \"data_summary\" sheet with the summ data frame.\nCall saveWorkbook() to store the adapted Excel workbook as a new file, \"summary.xlsx\"\n\n\n\nex_026.R\n\n# XLConnect is already available\n\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n\n# Add a worksheet to my_book, named \"data_summary\"\ncreateSheet(my_book, \"data_summary\")\n\n# Create data frame: summ\nsheets <- getSheets(my_book)[1:3]\ndims <- sapply(\n    sheets,\n    function(x) dim(readWorksheet(my_book, sheet = x)),\n    USE.NAMES = FALSE\n)\nsumm <- data.frame(sheets = sheets,\n                   nrows = dims[1, ],\n                   ncols = dims[2, ])\n\n# Add data in summ to \"data_summary\" sheet\nwriteWorksheet(my_book, summ, sheet = \"data_summary\")\n\n# Save workbook as summary.xlsx\nsaveWorkbook(my_book, \"summary.xlsx\")"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#renaming-sheets",
    "href": "_introduction_to_importing_data_in_R_04.html#renaming-sheets",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.6 Renaming sheets",
    "text": "17.6 Renaming sheets\nCome to think of it, “data_summary” is not an ideal name. As the summary of these excel sheets is always data-related, you simply want to name the sheet “summary”.\nThe code to build a connection to \"urbanpop.xlsx\" and create my_book is already provided for you. It refers to an Excel file with 4 sheets: the three data sheets, and the “data_summary” sheet.\n\nInstructions 100 XP\n\nUse renameSheet() to rename the fourth sheet to \"summary\".\nNext, call getSheets() on my_book to print out the sheet names.\nFinally, make sure to actually save the my_book object to a new Excel file, \"renamed.xlsx\".\n\n\n\nex_027.R\n\n# Build connection to urbanpop.xlsx: my_book\nmy_book <- loadWorkbook(\"urbanpop.xlsx\")\n# Rename \"data_summary\" sheet to \"summary\"\nrenameSheet(my_book, \"data_summary\", \"summary\")\n# Print out sheets of my_book\ngetSheets(my_book)\n# Save workbook to \"renamed.xlsx\"\nsaveWorkbook(my_book, \"renamed.xlsx\")"
  },
  {
    "objectID": "_introduction_to_importing_data_in_R_04.html#removing-sheets",
    "href": "_introduction_to_importing_data_in_R_04.html#removing-sheets",
    "title": "17  Reproducible Excel work with XLConnect",
    "section": "17.7 Removing sheets",
    "text": "17.7 Removing sheets\nAfter presenting the new Excel sheet to your peers, it appears not everybody is a big fan. Why summarize sheets and store the info in Excel if all the information is implicitly available? To hell with it, just remove the entire fourth sheet!\n\nInstructions 100 XP\n\nLoad the XLConnect package.\nBuild a connection to “renamed.xlsx”, the Excel file that you’ve built in the previous exercise; it’s available in your working directory. Store this connection as my_book.\nUse removeSheet() to remove the fourth sheet from my_book. The sheet name is \"summary\". Recall that removeSheet() accepts either the index or the name of the sheet as the second argument.\nSave the resulting workbook, my_book, to a file \"clean.xlsx\".\n\n\n\nex_027.R\n\n# Load the XLConnect package\n\nlibrary(XLConnect)\n# Build connection to renamed.xlsx: my_book\nmy_book <- loadWorkbook(\"renamed.xlsx\")\n\n# Remove the fourth sheet\nremoveSheet(my_book, \"summary\")\n\n# Save workbook to \"clean.xlsx\"\nsaveWorkbook(my_book, \"clean.xlsx\")"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_01.html#establish-a-connection",
    "href": "_intermediate_importing_data_in_R_01.html#establish-a-connection",
    "title": "18  Importing data from databases (Part 1)",
    "section": "18.1 Establish a connection",
    "text": "18.1 Establish a connection\nThe first step to import data from a SQL database is creating a connection to it. As Filip explained, you need different packages depending on the database you want to connect to. All of these packages do this in a uniform way, as specified in the DBI package.\ndbConnect() creates a connection between your R session and a SQL database. The first argument has to be a DBIdriver object, that specifies how connections are made and how data is mapped between R and the database. Specifically for MySQL databases, you can build such a driver with RMySQL::MySQL().\nIf the MySQL database is a remote database hosted on a server, you’ll also have to specify the following arguments in dbConnect(): dbname, host, port, user and password. Most of these details have already been provided.\n\nInstructions 100 XP\n\nLoad the DBI library, which is already installed on DataCamp’s servers.\nEdit the dbConnect() call to connect to the MySQL database. Change the port argument (3306) and user argument (\"student\").\n\n\n\nex_001.R\n\n# Load the DBI package\nlibrary(DBI)\n\n# Edit dbConnect() call\ncon <- dbConnect(RMySQL::MySQL(), \n                 dbname = \"tweater\", \n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\", \n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_01.html#list-the-database-tables",
    "href": "_intermediate_importing_data_in_R_01.html#list-the-database-tables",
    "title": "18  Importing data from databases (Part 1)",
    "section": "18.2 List the database tables",
    "text": "18.2 List the database tables\nAfter you’ve successfully connected to a remote MySQL database, the next step is to see what tables the database contains. You can do this with the dbListTables() function. As you might remember from the video, this function requires the connection object as an input, and outputs a character vector with the table names.\n\nInstructions 100 XP\n\nAdd code to create a vector tables, that contains the tables in the tweater database. You can connect to this database through the con object.\nDisplay the structure of tables; what’s the class of this vector?\n\n\n\nex_002.R\n\n# Load the DBI package\nlibrary(DBI)\n# Connect to the MySQL database: con\ncon <- dbConnect(RMySQL::MySQL(), \n                 dbname = \"tweater\", \n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\", \n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n# Build a vector of table names: tables\ntables <- dbListTables(con)\n# Display structure of tables\nstr(tables)\nclass(tables)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_01.html#import-users",
    "href": "_intermediate_importing_data_in_R_01.html#import-users",
    "title": "18  Importing data from databases (Part 1)",
    "section": "18.3 Import users",
    "text": "18.3 Import users\nAs you might have guessed by now, the database contains data on a more tasty version of Twitter, namely Tweater. Users can post tweats with short recipes for delicious snacks. People can comment on these tweats. There are three tables: users, tweats, and comments that have relations among them. Which ones, you ask? You’ll discover in a moment!\nLet’s start by importing the data on the users into your R session. You do this with the ‘dbReadTable()’ function. Simply pass it the connection object (‘con’), followed by the name of the table you want to import. The resulting object is a standard R data frame.\n\nInstructions 100 XP\n\nAdd code that imports the “users” table from the tweater database and store the resulting data frame as users.\nPrint the users data frame.\n\n\n\nex_003.R\n\n# Load the DBI package\nlibrary(DBI)\n\n# Connect to the MySQL database: con\ncon <- dbConnect(RMySQL::MySQL(), \n                 dbname = \"tweater\", \n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\", \n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Import the users table from tweater: users\nusers <- dbReadTable(con, \"users\")\n\n# Print users\nusers"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_01.html#import-all-tables",
    "href": "_intermediate_importing_data_in_R_01.html#import-all-tables",
    "title": "18  Importing data from databases (Part 1)",
    "section": "18.4 Import all tables",
    "text": "18.4 Import all tables\nNext to the users, we’re also interested in the tweats and comments tables. However, separate dbReadTable() calls for each and every one of the tables in your database would mean a lot of code duplication. Remember about the lapply() function? You can use it again here! A connection is already coded for you, as well as a vector table_names, containing the names of all the tables in the database. ### Instructions 100 XP {.unnumbered}\n\nFinish the lapply() function to import the users, tweats and comments tables in a single call. The result, a list of data frames, will be stored in the variable tables.\nPrint tables to check if you got it right.\n\n\n\nex_004.R\n\n# Load the DBI package\nlibrary(DBI)\n\n# Connect to the MySQL database: con\ncon <- dbConnect(RMySQL::MySQL(), \n                 dbname = \"tweater\", \n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\", \n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Get table names\ntable_names <- dbListTables(con)\n\n# Import all tables\ntables <- lapply(table_names, dbReadTable, conn = con)\n\n# Print out tables\ntables"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#query-tweater-1",
    "href": "_intermediate_importing_data_in_R_02.html#query-tweater-1",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.1 Query tweater (1)",
    "text": "19.1 Query tweater (1)\nIn your life as a data scientist, you’ll often be working with huge databases that contain tables with millions of rows. If you want to do some analyses on this data, it’s possible that you only need a fraction of this data. In this case, it’s a good idea to send SQL queries to your database, and only import the data you actually need into R.\ndbGetQuery() is what you need. As usual, you first pass the connection object to it. The second argument is an SQL query in the form of a character string. This example selects the age variable from the people dataset where gender equals “male”:\ndbGetQuery(con, \"SELECT age FROM people WHERE gender = 'male'\")\nA connection to the tweater database has already been coded for you.\n\nInstructions 100 XP\n\nUse dbGetQuery() to create a data frame, elisabeth, that selects the tweat_id column from the comments table where elisabeth is the commenter, heruser_id is 1\nPrint out elisabeth so you can see if you queried the database correctly.\n\n\n\nex_005.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n    dbname = \"tweater\",\n    host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n    port = 3306,\n    user = \"student\",\n    password = \"datacamp\"\n)\n\n# Import tweat_id column of comments where user_id is 1: elisabeth\n\nqry <- \"SELECT tweat_id FROM comments WHERE user_id = 1\"\nelisabeth <- dbGetQuery(con, qry)\n\n# Print elisabeth\nelisabeth"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#query-tweater-2",
    "href": "_intermediate_importing_data_in_R_02.html#query-tweater-2",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.2 Query tweater (2)",
    "text": "19.2 Query tweater (2)\nApart from checking equality, you can also check for less than and greater than relationships, with < and >, just like in R.\ncon, a connection to the tweater database, is again available.\n\nInstructions 100 XP\n\nCreate a data frame, latest, that selects the post column from the tweats table observations where the date is higher than '2015-09-21'.\nPrint out latest.\n\n\n\nex_006.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n                 dbname = \"tweater\",\n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Import post column of tweats where date is higher than '2015-09-21': latest\n\nqry <- \n    \"SELECT post FROM tweats WHERE date > '2015-09-21'\"\n\nlatest <- dbGetQuery(con, qry)\n# Print latest\nlatest"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#query-tweater-3",
    "href": "_intermediate_importing_data_in_R_02.html#query-tweater-3",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.3 Query tweater (3)",
    "text": "19.3 Query tweater (3)\nSuppose that you have a people table, with a bunch of information. This time, you want to find out the age and country of married males. Provided that there is a married column that’s 1 when the person in question is married, the following query would work.\nSELECT age, country\n  FROM people\n    WHERE gender = \"male\" AND married = 1\nCan you use a similar approach for a more specialized query on the tweater database?\n\nInstructions 100 XP\nCreate an R data frame, specific, that selects the message column from the comments table where the tweat_id is 77 and the user_id is greater than 4. Print specific.\n\n\nex_007.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n                 dbname = \"tweater\",\n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Create data frame specific\nqry <- \n    \"SELECT message \n        FROM comments\n            WHERE tweat_id = 77 AND user_id > 4\"\nspecific <- dbGetQuery(con, qry)\n\n# Print specific\nspecific"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#query-tweater-4",
    "href": "_intermediate_importing_data_in_R_02.html#query-tweater-4",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.4 Query tweater (4)",
    "text": "19.4 Query tweater (4)\nThere are also dedicated SQL functions that you can use in the WHERE clause of an SQL query. For example, CHAR_LENGTH() returns the number of characters in a string.\n\nInstructions 100 XP\n\nCreate a data frame, short, that selects the id and name columns from the users table where the number of characters in the name is strictly less than 5.\nPrint short.\n\n\n\nex_008.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n                 dbname = \"tweater\",\n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Create data frame short\nqry <- \n    \"SELECT id, name \n        FROM users \n            WHERE CHAR_LENGTH(name) < 5\n    \"\nshort <- dbGetQuery(con, qry)\n\n# Print short\nshort"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#send---fetch---clear",
    "href": "_intermediate_importing_data_in_R_02.html#send---fetch---clear",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.5 Send - Fetch - Clear",
    "text": "19.5 Send - Fetch - Clear\nYou’ve used dbGetQuery() multiple times now. This is a virtual function from the DBI package, but is actually implemented by the RMySQL package. Behind the scenes, the following steps are performed:\n\nSending the specified query with dbSendQuery();\nFetching the result of executing the query on the database with dbFetch();\nClearing the result with dbClearResult().\n\nLet’s not use dbGetQuery() this time and implement the steps above. This is tedious to write, but it gives you the ability to fetch the query’s result in chunks rather than all at once. You can do this by specifying the n argument inside dbFetch().\n\nInstructions 100 XP\n\nInspect the dbSendQuery() call that has already been coded for you. It selects the comments for the users with an id above 4.\nUse dbFetch() twice. In the first call, import only two records of the query result by setting the n argument to 2. In the second call, import all remaining queries (don’t specify n). In both calls, simply print the resulting data frames.\nClear res with dbClearResult().\n\n\n\nex_009.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n                 dbname = \"tweater\",\n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Send query to the database\nres <- dbSendQuery(con, \"SELECT * FROM comments WHERE user_id > 4\")\n\n# Use dbFetch() twice\n\ndbFetch(res, n = 2)\ndbFetch(res)\n\n# Clear res\ndbClearResult(res)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_02.html#be-polite-and",
    "href": "_intermediate_importing_data_in_R_02.html#be-polite-and",
    "title": "19  Importing data from databases (Part 2)",
    "section": "19.6 Be polite and …",
    "text": "19.6 Be polite and …\nEvery time you connect to a database using dbConnect(), you’re creating a new connection to the database you’re referencing. RMySQL automatically specifies a maximum of open connections and closes some of the connections for you, but still: it’s always polite to manually disconnect from the database afterwards. You do this with the dbDisconnect() function.\nThe code that connects you to the database is already available, can you finish the script?\n\nInstructions 100 XP\n\nUsing the technique you prefer, build a data frame long_tweats. It selects the post and date columns from the observations in tweats where the character length of the post variable exceeds 40.\nPrint long_tweats.\nDisconnect from the database by using dbDisconnect().\n\n\n\nex_010.R\n\n# Connect to the database\nlibrary(DBI)\ncon <- dbConnect(RMySQL::MySQL(),\n                 dbname = \"tweater\",\n                 host = \"courses.csrrinzqubik.us-east-1.rds.amazonaws.com\",\n                 port = 3306,\n                 user = \"student\",\n                 password = \"datacamp\")\n\n# Create the data frame  long_tweats\nqry <- \n    \"SELECT post, date\n        FROM tweats\n            WHERE CHAR_LENGTH(post) > 40\n    \"\nlong_tweats <- dbGetQuery(con, qry)\n# Print long_tweats\nprint(long_tweats)\n\n# Disconnect from the database\ndbDisconnect(con)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#from-json-to-r",
    "href": "_intermediate_importing_data_in_R_04.html#from-json-to-r",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.1 From JSON to R",
    "text": "21.1 From JSON to R\nIn the simplest setting, fromJSON() can convert character strings that represent JSON data into a nicely structured R list. Give it a try!\n\nInstructions 100 XP\n\nLoad the jsonlite package. It’s already installed on DataCamp’s servers.\nwine_json represents a JSON. Use fromJSON() to convert it to a list, named wine.\nDisplay the structure of wine\n\n\n\nex_017.R\n\n# Load the jsonlite package\nlibrary(jsonlite)\n\n# wine_json is a JSON\nwine_json <- '\n    {\n        \"name\":\"Chateau Migraine\",\n        \"year\":1997,\n        \"alcohol_pct\":12.4,\n        \"color\":\"red\",\n        \"awarded\":false\n    }\n'\n\n# Convert wine_json into a list: wine\nwine <- fromJSON(wine_json)\n\n# Print structure of wine\nprint(str(wine))"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#quandl-api",
    "href": "_intermediate_importing_data_in_R_04.html#quandl-api",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.2 Quandl API",
    "text": "21.2 Quandl API\nAs Filip showed in the video, fromJSON() also works if you pass a URL as a character string or the path to a local file that contains JSON data. Let’s try this out on the Quandl API, where you can fetch all sorts of financial and economical data.\n\nInstructions 100 XP\n\nquandl_url represents a URL. Use fromJSON() directly on this URL and store the result in quandl_data.\nDisplay the structure of quandl_data .\n\n\n\nex_018.R\n\n# jsonlite is preloaded\n\n# Definition of quandl_url\nquandl_url <- \"https://www.quandl.com/api/v3/datasets/WIKI/FB/data.json?auth_token=i83asDsiWUUyfoypkgMz\"\n\n# Import Quandl data: quandl_data\nquandl_data <- fromJSON(quandl_url)\n\n# Print structure of quandl_data\nstr(quandl_data)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#omdb-api",
    "href": "_intermediate_importing_data_in_R_04.html#omdb-api",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.3 OMDb API",
    "text": "21.3 OMDb API\nIn the video, you saw how easy it is to interact with an API once you know how to formulate requests. You also saw how to fetch all information on Rain Man from OMDb. Simply perform a GET() call, and next ask for the contents with the content() function. This content() function, which is part of the httr package, uses jsonlite behind the scenes to import the JSON data into R.\nHowever, by now you also know that jsonlite can handle URLs itself. Simply passing the request URL to fromJSON() will get your data into R. In this exercise, you will be using this technique to compare the release year of two movies in the Open Movie Database.\n\nInstructions 100 XP\n\nTwo URLs are included in the sample code, as well as a fromJSON() call to build sw4. Add a similar call to build sw3.\nPrint out the element named Title of both sw4 and sw3. You can use the $ operator. What movies are we dealing with here? -Write an expression that evaluates to TRUE if sw4 was released later than sw3. This information is stored in the Year element of the named lists.\n\n\n\nex_019.R\n\n# The package jsonlite is already loaded\n\n# Definition of the URLs\nurl_sw4 <- \"http://www.omdbapi.com/?apikey=72bc447a&i=tt0076759&r=json\"\nurl_sw3 <- \"http://www.omdbapi.com/?apikey=72bc447a&i=tt0121766&r=json\"\n\n# Import two URLs with fromJSON(): sw4 and sw3\nsw3 <- fromJSON(url_sw3)\nsw4 <- fromJSON(url_sw4)\n\n\n# Print out the Title element of both lists\nprint(sw3$Title)\nprint(sw4$Title)\n\n# Is the release year of sw4 later than sw3?\nsw4$Year > sw3$Year"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#json-practice-1",
    "href": "_intermediate_importing_data_in_R_04.html#json-practice-1",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.4 JSON practice (1)",
    "text": "21.4 JSON practice (1)\nJSON is built on two structures: objects and arrays. To help you experiment with these, two JSON strings are included in the sample code. It’s up to you to change them appropriately and then call jsonlite’s fromJSON() function on them each time.\n\nInstrucions 100 XP\n\nChange the assignment of json1 such that the R vector after conversion contains the numbers 1 up to 6, in ascending order. Next, call fromJSON() on json1.\nAdapt the code for json2 such that it’s converted to a named list with two elements: a, containing the numbers 1, 2 and 3 and b, containing the numbers 4, 5 and 6. Next, call fromJSON() on json2.\n\n\n\nex_020.R\n\n# jsonlite is already loaded\n# Challenge 1\njson1 <- '[1, 2, 3, 4, 5, 6]'\nfromJSON(json1)\n# Challenge 2\njson2 <- '{\n    \"a\": [1, 2, 3],\n    \"b\": [4, 5, 6]\n}'\nfromJSON(json2)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#json-practice-2",
    "href": "_intermediate_importing_data_in_R_04.html#json-practice-2",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.5 JSON practice (2)",
    "text": "21.5 JSON practice (2)\nWe prepared two more JSON strings in the sample code. Can you change them and call jsonlite’s fromJSON() function on them, similar to the previous exercise?\n\nInstrucions 100 XP\n\nRemove characters from json1 to build a 2 by 2 matrix containing only 1, 2, 3 and 4. Call fromJSON() on json1.\nAdd characters to json2 such that the data frame in which the json is converted contains an additional observation in the last row. For this observations, a equals 5 and b equals 6. Call fromJSON() one last time, on json2."
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#json-practice-2-1",
    "href": "_intermediate_importing_data_in_R_04.html#json-practice-2-1",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.6 JSON practice (2)",
    "text": "21.6 JSON practice (2)\n\nInstrucions 100 XP\n\nRemove characters from json1 to build a 2 by 2 matrix containing only 1, 2, 3 and 4. Call fromJSON() on json1.\nAdd characters to json2 such that the data frame in which the json is converted contains an additional observation in the last row. For this observations, a equals 5 and b equals 6. Call fromJSON() one last time, on json2.\n\n\n\nex_021.R\n\n# jsonlite is already loaded\n# Challenge 1\njson1 <- '[[1, 2], [3, 4]]'\nfromJSON(json1)\n\n# Challenge 2\njson2 <-\n   '[{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}, {\"a\": 5, \"b\": 6}\n]'\nfromJSON(json2)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#tojson",
    "href": "_intermediate_importing_data_in_R_04.html#tojson",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.7 toJSON()",
    "text": "21.7 toJSON()\nApart from converting JSON to R with fromJSON(), you can also use toJSON() to convert R data to a JSON format. In its most basic use, you simply pass this function an R object to convert to a JSON. The result is an R object of the class json, which is basically a character string representing that JSON.\nFor this exercise, you will be working with a .csv file containing information on the amount of desalinated water that is produced around the world. As you’ll see, it contains a lot of missing values. This data can be found on the URL that is specified in the sample code.\n\nInstrucions 100 XP\n\nUse a function of the utils package to import the .csv file directly from the URL specified in url_csv. Save the resulting data frame as water. Make sure that strings are not imported as factors.\nConvert the data frame water to a JSON. Call the resulting object water_json.\nPrint out water_json.\n\n\n\nex_021.R\n\n# jsonlite is already loaded\n\n# URL pointing to the .csv file\nurl_csv <- \"http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/water.csv\"\n\n# Import the .csv file located at url_csv\nwater <- read.csv(url_csv)\n\n# Convert the data file according to the requirements\nwater_json <- toJSON(water)\n\n# Print out water_json\nprint(water_json)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_04.html#minify-and-prettify",
    "href": "_intermediate_importing_data_in_R_04.html#minify-and-prettify",
    "title": "21  Importing data from the web (Part 2)",
    "section": "21.8 Minify and prettify",
    "text": "21.8 Minify and prettify\nJSONs can come in different formats. Take these two JSONs, that are in fact exactly the same: the first one is in a minified format, the second one is in a pretty format with indentation, whitespace and new lines:\n# Mini\n{\"a\":1,\"b\":2,\"c\":{\"x\":5,\"y\":6}}\n\n# Pretty\n{\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": {\n    \"x\": 5,\n    \"y\": 6\n  }\n}\nUnless you’re a computer, you surely prefer the second version. However, the standard form that toJSON() returns, is the minified version, as it is more concise. You can adapt this behavior by setting the pretty argument inside toJSON() to TRUE. If you already have a JSON string, you can use prettify() or minify() to make the JSON pretty or as concise as possible.\n\nInstrucions 100 XP\n\nConvert the mtcars dataset, which is available in R by default, to a pretty JSON. Call the resulting JSON pretty_json.\nPrint out pretty_json. Can you understand the output easily?\nConvert pretty_json to a minimal version using minify(). Store this version under a new variable, mini_json.\nPrint out mini_json. Which version do you prefer, the pretty one or the minified one?\n\n\n\nex_022.R\n\n# jsonlite is already loaded\n# Convert mtcars to a pretty JSON: pretty_json\npretty_json <- toJSON(mtcars, pretty = TRUE)\n# Print pretty_json\nprint(pretty_json)\n\n# Minify pretty_json: mini_json\n\nmini_json <- minify(pretty_json)\n# Print mini_json\nprint(mini_json)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-sas-data-with-haven",
    "href": "_intermediate_importing_data_in_R_05.html#import-sas-data-with-haven",
    "title": "22  Importing data from statistical software packages",
    "section": "22.1 Import SAS data with haven",
    "text": "22.1 Import SAS data with haven\nhaven is an extremely easy-to-use package to import data from three software packages: SAS, STATA and SPSS. Depending on the software, you use different functions:\n\nSAS: read_sas()\nSTATA: read_dta() (or read_stata(), which are identical)\nSPSS: read_sav() or read_por(), depending on the file type.\n\nAll these functions take one key argument: the path to your local file. In fact, you can even pass a URL; haven will then automatically download the file for you before importing it.\nYou’ll be working with data on the age, gender, income, and purchase level (0 = low, 1 = high) of 36 individuals (Source: SAS). The information is stored in a SAS file, sales.sas7bdat, which is available in the dataset directory. You can also download the data here http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/sales.sas7bdat.\n\nInstructions 100 XP\n\nLoad the haven package.\nImport the data file \"sales.sas7bdat\". Call the imported data frame sales.\nDisplay the structure of sales with str(). Some columns represent categorical variables, so they should be factors.\n\n\n\nex_023.R\n\n# Load the haven package\nlibrary(haven)\n\n# Import sales.sas7bdat: sales\nsales <- read_sas(\"sales.sas7bdat\")\n\n# Display the structure of sales\nstr(sales)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-haven",
    "href": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-haven",
    "title": "22  Importing data from statistical software packages",
    "section": "22.2 Import STATA data with haven",
    "text": "22.2 Import STATA data with haven\nNext up are STATA data files; you can use read_dta() for these.\nWhen inspecting the result of the read_dta() call, you will notice that one column will be imported as a labelled vector, an R equivalent for the common data structure in other statistical environments. In order to effectively continue working on the data in R, it’s best to change this data into a standard R class. To convert a variable of the class labelled to a factor, you’ll need haven’s as_factor() function.\nIn this exercise, you will work with data on yearly import and export numbers of sugar, both in USD and in weight. The data can be found at: http://assets.datacamp.com/production/course_1478/datasets/trade.dta\n\nInstructions 100 XP\n\nImport the data file directly from the URL using read_dta(), and store it as sugar.\nPrint out the structure of sugar. The Date column has class labelled.\nConvert the values in the Date column of sugar to dates, using as.Date(as_factor(___)).\nPrint out the structure of sugar once more. Looks better now?\n\n\n\nex_024.R\n\n# haven is already loaded\nlibrary(haven)\n# Import the data from the URL: sugar\nurl <- \"http://assets.datacamp.com/production/course_1478/datasets/trade.dta\"\n\nsugar <- read_dta(url)\n\n# Structure of sugar\nstr(sugar)\n\n# Convert values in Date column to dates\nsugar$Date <- as.Date(as_factor(sugar$Date))\n\n# Structure of sugar again\nstr(sugar)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-haven",
    "href": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-haven",
    "title": "22  Importing data from statistical software packages",
    "section": "22.3 Import SPSS data with haven",
    "text": "22.3 Import SPSS data with haven\nThe haven package can also import data files from SPSS. Again, importing the data is pretty straightforward. Depending on the SPSS data file you’re working with, you’ll need either read_sav() - for .sav files - or read_por() - for .por files.\nIn this exercise, you will work with data on four of the Big Five personality traits for 434 persons (Source: University of Bath). The Big Five is a psychological concept including, originally, five dimensions of personality to classify human personality. The SPSS dataset is called person.sav and is available in your working directory.\n\nInstructions 100 XP\n\nUse read_sav() to import the SPSS data in \"person.sav\". Name the imported data frame traits.\ntraits contains several missing values, or NAs. Run summary() on it to find out how manyNAs are contained in each variable.\nPrint out a subset of those individuals that scored high on Extroversion and on Agreeableness, i.e. scoring higher than 40 on each of these two categories. You can use subset() for this.\n\n\n\nex_025.R\n\n# haven is already loaded\n\n# Import person.sav: traits\ntraits <- read_sav(\"person.sav\")\n\n# Summarize traits\nsummary(traits)\n\n# Print out a subset\n\nsubset(traits, Extroversion > 40 & Agreeableness > 40)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#factorize-round-two",
    "href": "_intermediate_importing_data_in_R_05.html#factorize-round-two",
    "title": "22  Importing data from statistical software packages",
    "section": "22.4 Factorize, round two",
    "text": "22.4 Factorize, round two\nIn the last exercise you learned how to import a data file using the command read_sav(). With SPSS data files, it can also happen that some of the variables you import have the labelled class. This is done to keep all the labelling information that was originally present in the .sav and .por files. It’s advised to coerce (or change) these variables to factors or other standard R classes.\nThe data for this exercise involves information on employees and their demographic and economic attributes (Source: QRiE). The data can be found on the following URL: http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/employee.sav\n\nInstructions 100 XP\n\nImport the SPSS data straight from the URL and store the resulting data frame as work.\nDisplay the summary of the GENDER column of work. This information doesn’t give you a lot of useful information, right?\nConvert the GENDER column in work to a factor, the class to denote categorical variables in R. Use as_factor().\nOnce again display the summary of the GENDER column. This time, the printout makes much more sense.\n\n\n\nex_027.R\n\n# haven is already loaded\n\n# Import SPSS data from the URL: work\nurl <- \"http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/employee.sav\"\nwork <- read_sav(url)\n\n# Display summary of work$GENDER\nsummary(work$GENDER)\n# Convert work$GENDER to a factor\nwork$GENDER <- as_factor(work$GENDER)\n# Display summary of work$GENDER again\nsummary(work$GENDER)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-foreign-1",
    "href": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-foreign-1",
    "title": "22  Importing data from statistical software packages",
    "section": "22.5 Import STATA data with foreign (1)",
    "text": "22.5 Import STATA data with foreign (1)\nThe foreign package offers a simple function to import and read STATA data: read.dta().\nIn this exercise, you will import data on the US presidential elections in the year 2000. The data in florida.dta contains the total numbers of votes for each of the four candidates as well as the total number of votes per election area in the state of Florida (Source: Florida Department of State). The file is available in the dataset directory, you can download it here http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/florida.dta\nif you want to experiment some more.\n\nInstructions 100 XP\n\nLoad the foreign package; it’s already installed on DataCamp’s servers.\nImport the data on the elections in Florida, \"florida.dta\", and name the resulting data frame florida. Use read.dta() without specifying extra arguments.\nCheck out the last 6 observations of florida with tail().\n\n\n\nex_028.R\n\n# Load the foreign package\nlibrary(foreign)\n\n# Import florida.dta and name the resulting data frame florida\n\nflorida <- read.dta(\"florida.dta\")\n# Check tail() of florida\ntail(florida)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-foreign-2",
    "href": "_intermediate_importing_data_in_R_05.html#import-stata-data-with-foreign-2",
    "title": "22  Importing data from statistical software packages",
    "section": "22.6 Import STATA data with foreign (2)",
    "text": "22.6 Import STATA data with foreign (2)\nData can be very diverse, going from character vectors to categorical variables, dates and more. It’s in these cases that the additional arguments of read.dta() will come in handy.\nThe arguments you will use most often are convert.dates, convert.factors, missing.type and convert.underscore. Their meaning is pretty straightforward, as Filip explained in the video. It’s all about correctly converting STATA data to standard R data structures. Type ?read.dta to find out about about the default values.\nThe dataset for this exercise contains socio-economic measures and access to education for different individuals (Source: World Bank). This data is available as edequality.dta, which is located in the worldbank folder in your working directory.\n\nInstructions 100 XP\n\n\nex_029.R\n\n# foreign is already loaded\n\n# Specify the file path using file.path(): path\npath <- file.path(\"worldbank\", \"edequality.dta\")\n\n# Create and print structure of edu_equal_1\nedu_equal_1 <- read.dta(path)\nstr(edu_equal_1)\n\n\n# Create and print structure of edu_equal_2\nedu_equal_2 <- \n    read.dta(\n        path,\n        convert.factors = FALSE\n    )\nstr(edu_equal_2)\n\n\n# Create and print structure of edu_equal_3\n\nedu_equal_3 <- \n    read.dta(\n        path,\n        convert.underscore = TRUE\n    )\nstr(edu_equal_3)\n\n\nnrow(\n    subset(\n        edu_equal_1,\n        edu_equal_1$ethnicity_head == \"Bulgarian\",\n        income > 1000\n    )\n)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-foreign-1",
    "href": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-foreign-1",
    "title": "22  Importing data from statistical software packages",
    "section": "22.7 Import SPSS data with foreign (1)",
    "text": "22.7 Import SPSS data with foreign (1)\nAll great things come in pairs. Where foreign provided read.dta() to read Stata data, there’s also read.spss() to read SPSS data files. To get a data frame, make sure to set to.data.frame = TRUE inside read.spss().\nIn this exercise, you’ll be working with socio-economic variables from different countries (Source: Quantative Data Analysis in Education). The SPSS data is in a file called international.sav, which is in your working directory. You can also download it here if you want to play around with it some more.\n\nInstructions 100 XP\n\n\nex_030.R\n\n# foreign is already loaded\n\n# Import international.sav as a data frame: demo\n\ndemo <- read.spss(\n    \"international.sav\", to.data.frame=TRUE)\n# Create boxplot of gdp variable of demo\nboxplot(demo$gdp)"
  },
  {
    "objectID": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-foreign-2",
    "href": "_intermediate_importing_data_in_R_05.html#import-spss-data-with-foreign-2",
    "title": "22  Importing data from statistical software packages",
    "section": "22.8 Import SPSS data with foreign (2)",
    "text": "22.8 Import SPSS data with foreign (2)\nIn the previous exercise, you used the to.data.frame argument inside read.spss(). There are many other ways in which to customize the way your SPSS data is imported.\nIn this exercise you will experiment with another argument, use.value.labels. It specifies whether variables with value labels should be converted into R factors with levels that are named accordingly. The argument is TRUE by default which means that so called labelled variables inside SPSS are converted to factors inside R.\nYou’ll again be working with the international.sav data, which is available in your current working directory.\n\nInstructions 100 XP\n\nImport the data file \"international.sav\" as a data frame, demo_1.\nPrint the first few rows of demo_1 using the head() function.\nImport the data file \"international.sav\" as a data frame, demo_2, but this time in a way such that variables with value labels are not converted to R factors.\nAgain, print the first few rows of demo_2. Can you tell the difference between the two data frames?\n\n\n\nex_031.R\n\n# foreign is already loaded\n# Import international.sav as demo_1\ndemo_1 <- read.spss(\n    \"international.sav\",\n    to.data.frame = TRUE,\n    )\n# Print out the head of demo_1\nhead(demo_1)\n\n# Import international.sav as demo_2\ndemo_2 <- read.spss(\n    \"international.sav\",\n    to.data.frame = TRUE,\n    use.value.labels = FALSE\n    )\n\n# Print out the head of demo_2\nhead(demo_2)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#converting-data-types",
    "href": "_cleaning_data_in_R_01.html#converting-data-types",
    "title": "23  Common Data Problems",
    "section": "23.1 Converting data types",
    "text": "23.1 Converting data types\nThroughout this chapter, you’ll be working with San Francisco bike share ride data called bike_share_rides. It contains information on start and end stations of each trip, the trip duration, and some user information.\nBefore beginning to analyze any dataset, it’s important to take a look at the different types of columns you’ll be working with, which you can do using glimpse().\nIn this exercise, you’ll take a look at the data types contained in bike_share_rides and see how an incorrect data type can flaw your analysis.\ndplyr and assertive are loaded and bike_share_rides is available.\n\nInstructions 100 XP\n\nExamine the data types of the columns of bike_share_rides.\nGet a summary of the user_birth_year column of bike_share_rides.\n\n\n\nex_001.R\n\n# Glimpse at bike_share_rides\nglimpse(bike_share_rides)\n\n# Summary of user_birth_year\nsummary(bike_share_rides$user_birth_year)\n\n# Convert user_birth_year to factor: user_birth_year_fct\nbike_share_rides <- bike_share_rides %>%\n  mutate(user_birth_year_fct = as.factor(user_birth_year))\n\n# Assert user_birth_year_fct is a factor\nassert_is_factor(bike_share_rides$user_birth_year_fct)\n\n# Summary of user_birth_year_fct\nsummary(bike_share_rides$user_birth_year_fct)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#trimming-strings",
    "href": "_cleaning_data_in_R_01.html#trimming-strings",
    "title": "23  Common Data Problems",
    "section": "23.2 Trimming strings",
    "text": "23.2 Trimming strings\nIn the previous exercise, you were able to identify the correct data type and convert user_birth_year to the correct type, allowing you to extract counts that gave you a bit more insight into the dataset.\nAnother common dirty data problem is having extra bits like percent signs or periods in numbers, causing them to be read in as characters. In order to be able to crunch these numbers, the extra bits need to be removed and the numbers need to be converted from character to numeric. In this exercise, you’ll need to convert the duration column from character to numeric, but before this can happen, the word “minutes” needs to be removed from each value.\ndplyr, assertive, and stringr are loaded and bike_share_rides is available.\n\nInstructions 100 XP\n\nUse str_remove() to remove \"minutes\" from the duration column of bike_share_rides. Add this as a new column called duration_trimmed.\nConvert the duration_trimmed column to a numeric type and add this as a new column called duration_mins.\nGlimpse at bike_share_rides and assert that the duration_mins column is numeric.\nCalculate the mean of duration_mins.\n\n\n\nex_002.R\n\nbike_share_rides <- bike_share_rides %>%\n  # Remove 'minutes' from duration: duration_trimmed\n  mutate(duration_trimmed = str_remove(duration, \"minutes\"),\n  # Convert duration_trimmed to numeric: duration_mins\n         duration_mins = as.numeric(duration_trimmed))\n\n# Glimpse at bike_share_rides\nglimpse(bike_share_rides)\n\n# Assert duration_mins is numeric\nassert_is_numeric(bike_share_rides$duration_mins)\n\n# Calculate mean duration\nmean(bike_share_rides$duration_mins)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#ride-duration-constraints",
    "href": "_cleaning_data_in_R_01.html#ride-duration-constraints",
    "title": "23  Common Data Problems",
    "section": "23.3 Ride duration constraints",
    "text": "23.3 Ride duration constraints\nValues that are out of range can throw off an analysis, so it’s important to catch them early on. In this exercise, you’ll be examining the duration_min column more closely. Bikes are not allowed to be kept out for more than 24 hours, or 1440 minutes at a time, but issues with some of the bikes caused inaccurate recording of the time they were returned.\nIn this exercise, you’ll replace erroneous data with the range limit ( 1440 minutes), however, you could just as easily replace these values with NAs.\nload dplyr, assertive, and ggplot2 andbike_share_rides.\n\nInstructions 100 XP\nCreate a three-bin histogram of the duration_min column of bike_share_rides using ggplot2 to identify if there is out-of-range data.\n\n\nex_003.R\n\n# Create breaks\nbreaks <- \n  c(\n    min(bike_share_rides$duration_min),\n    0,\n    1440,\n    max(bike_share_rides$duration_min)\n  )\n\n# Create a histogram of duration_min\nggplot(bike_share_rides, aes(duration_min)) +\n  geom_histogram(breaks = breaks)\n\n# duration_min_const: replace vals of duration_min > 1440 with 1440\nbike_share_rides <- bike_share_rides %>%\n  mutate(\n    duration_min_const = replace(\n      duration_min,\n      duration_min > 1440 ,\n      1440\n    )\n  )\n\n# Make sure all values of \n# duration_min_const are between 0 and 1440\nassert_all_are_in_closed_range(\n  bike_share_rides$duration_min_const,\n  lower = 0, upper = 1440\n)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#back-to-the-future",
    "href": "_cleaning_data_in_R_01.html#back-to-the-future",
    "title": "23  Common Data Problems",
    "section": "23.4 Back to the future",
    "text": "23.4 Back to the future\nSomething has gone wrong and it looks like you have data with dates from the future, which is way outside of the date range you expected to be working with. To fix this, you’ll need to remove any rides from the dataset that have a date in the future. Before you can do this, the date column needs to be converted from a character to a Date. Having these as Date objects will make it much easier to figure out which rides are from the future, since R makes it easy to check if one Date object is before (<) or after (>) another.\nload dplyr, assertive and bike_share_rides.\n\nInstructions 100 XP\n\nConvert the date column of bike_share_rides from character to the Date data type.\nAssert that all values in the date column happened sometime in the past and not in the future.\nFilter bike_share_rides to get only the rides from the past or today, and save this as bike_share_rides_past.\nAssert that the dates in bike_share_rides_past occurred only in the past.\n\n\n\nex_004.R\n\nlibrary(lubridate)\n# Convert date to Date type\nbike_share_rides <- bike_share_rides %>%\n  mutate(date = as.Date(date))\n\n# Make sure all dates are in the past\nassert_all_are_in_past(bike_share_rides$date)\n\n\n# Filter for rides that occurred before or on today's date\nbike_share_rides_past <- bike_share_rides %>%\n  filter(date <= today())\n\n# Make sure all dates from bike_share_rides_past are in the past\nassert_all_are_in_past(bike_share_rides_past$date)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#full-duplicates",
    "href": "_cleaning_data_in_R_01.html#full-duplicates",
    "title": "23  Common Data Problems",
    "section": "23.5 Full duplicates",
    "text": "23.5 Full duplicates\nYou’ve been notified that an update has been made to the bike sharing data pipeline to make it more efficient, but that duplicates are more likely to be generated as a result. To make sure that you can continue using the same scripts to run your weekly analyses about ride statistics, you’ll need to ensure that any duplicates in the dataset are removed first.\nWhen multiple rows of a data frame share the same values for all columns, they’re full duplicates of each other. Removing duplicates like this is important, since having the same value repeated multiple times can alter summary statistics like the mean and median. Each ride, including its ride_id should be unique.\nbe sure thatdplyr is loaded and bike_share_rides is available.\n\nInstructions 100 XP\n\nGet the total number of full duplicates in bike_share_rides.\nRemove all full duplicates from bike_share_rides and save the new data frame as bike_share_rides_unique.\nGet the total number of full duplicates in the new bike_share_rides_unique data frame.\n\n\n\nex_005.R\n\n# Count the number of full duplicate\n\nsum(duplicated(bike_share_rides))\n\n# Remove duplicates\nbike_share_rides_unique <- distinct(bike_share_rides)\n\n# Count the full duplicates in bike_share_rides_unique\nsum(duplicated(bike_share_rides_unique))"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#removing-partial-duplicates",
    "href": "_cleaning_data_in_R_01.html#removing-partial-duplicates",
    "title": "23  Common Data Problems",
    "section": "23.6 Removing partial duplicates",
    "text": "23.6 Removing partial duplicates\nNow that you’ve identified and removed the full duplicates, it’s time to check for partial duplicates. Partial duplicates are a bit tricker to deal with than full duplicates. In this exercise, you’ll first identify any partial duplicates and then practice the most common technique to deal with them, which involves dropping all partial duplicates, keeping only the first.\ndplyr is loaded and bike_share_rides is available.\n\nInstructions 100 XP\n\nCount the number of occurrences of each ride_id.\nFilter for ride_ids that occur multiple times.\nRemove full and partial duplicates from bike_share_rides based on ride_id only, keeping all columns.\nStore this as bike_share_rides_unique.\n\n\n\nex_006.R\n\n# Find duplicated ride_ids\nbike_share_rides %>% \n  count(ride_id) %>% \n  filter(n > 1)\n\n# Remove full and partial duplicates\nbike_share_rides_unique <- bike_share_rides %>%\n  # Only based on ride_id instead of all cols\n  distinct(ride_id, .keep_all = TRUE)\n\n# Find duplicated ride_ids in bike_share_rides_unique\nbike_share_rides_unique %>%\n  # Count the number of occurrences of each ride_id\n  count(ride_id) %>%\n  # Filter for rows with a count > 1\n  filter(n>1)"
  },
  {
    "objectID": "_cleaning_data_in_R_01.html#aggregating-partial-duplicates",
    "href": "_cleaning_data_in_R_01.html#aggregating-partial-duplicates",
    "title": "23  Common Data Problems",
    "section": "23.7 Aggregating partial duplicates",
    "text": "23.7 Aggregating partial duplicates\nAnother way of handling partial duplicates is to compute a summary statistic of the values that differ between partial duplicates, such as mean, median, maximum, or minimum. This can come in handy when you’re not sure how your data was collected and want an average, or if based on domain knowledge, you’d rather have too high of an estimate than too low of an estimate (or vice versa).\ndplyr is loaded and bike_share_rides is available.\n\n23.7.1 Instructions 100 XP\n\nGroup bike_share_rides by ride_id and date.\nAdd a column called duration_min_avg that contains the mean ride duration for the row’s ride_id and date.\nRemove duplicates based on ride_id and date, keeping all columns of the data frame.\nRemove the duration_min column.\n\n\n\nex_007.R\n\nbike_share_rides %>%\n  # Group by ride_id and date\n  group_by(ride_id, date) %>%\n  # Add duration_min_avg column\n  mutate(duration_min_avg = mean(duration_min)) %>%\n  # Remove duplicates based on ride_id and date, keep all cols\n  distinct(ride_id, date, .keep_all = TRUE) %>%\n  # Remove duration_min column\n  select(-duration_min)"
  },
  {
    "objectID": "statistical-inference-whole-game.html",
    "href": "statistical-inference-whole-game.html",
    "title": "The whole game of statistical Inference",
    "section": "",
    "text": "Whole game\nOur goal in this part of the book is to give you a rapid overview of the main tools of data science: importing, tidying, transforming, and visualizing data, as shown in ?fig-ds-whole-game. We want to show you the “whole game” of data science giving you just enough of all the major pieces so that you can tackle real, if simple, data sets. The later parts of the book, will hit each of these topics in more depth, increasing the range of data science challenges that you can tackle."
  },
  {
    "objectID": "statistical_inference.html",
    "href": "statistical_inference.html",
    "title": "27  Statistical Inference with resampling: Bootstrap and Jacknife.",
    "section": "",
    "text": "28 Preleminaries"
  },
  {
    "objectID": "statistical_inference.html#likelihood-inference.",
    "href": "statistical_inference.html#likelihood-inference.",
    "title": "27  Statistical Inference with resampling: Bootstrap and Jacknife.",
    "section": "28.1 Likelihood inference.",
    "text": "28.1 Likelihood inference."
  },
  {
    "objectID": "statistical_inference.html#variance-analisys.",
    "href": "statistical_inference.html#variance-analisys.",
    "title": "27  Statistical Inference with resampling: Bootstrap and Jacknife.",
    "section": "28.2 Variance analisys.",
    "text": "28.2 Variance analisys."
  },
  {
    "objectID": "statistical_inference.html#roc-curves",
    "href": "statistical_inference.html#roc-curves",
    "title": "27  Statistical Inference with resampling: Bootstrap and Jacknife.",
    "section": "28.3 ROC Curves",
    "text": "28.3 ROC Curves"
  },
  {
    "objectID": "linear_regression.html#regression-models",
    "href": "linear_regression.html#regression-models",
    "title": "28  Lienar Regression",
    "section": "28.1 Regression models",
    "text": "28.1 Regression models"
  },
  {
    "objectID": "linear_regression.html#linear-regression",
    "href": "linear_regression.html#linear-regression",
    "title": "28  Lienar Regression",
    "section": "28.2 Linear Regression",
    "text": "28.2 Linear Regression"
  },
  {
    "objectID": "linear_regression.html#multiple-linear_regression-and-generalized-linear-regresion",
    "href": "linear_regression.html#multiple-linear_regression-and-generalized-linear-regresion",
    "title": "28  Lienar Regression",
    "section": "28.3 Multiple linear_regression and generalized linear regresion",
    "text": "28.3 Multiple linear_regression and generalized linear regresion"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n29  Summary\n",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "[1] T. Hastie, R. Tibshirani, J. Friedman, The elements of statistical learning, Second, Springer, New York, 2009.\n\n\n[2] W.J. Krzanowski, D.J. Hand, ROC curves for continuous data, CRC Press, Boca Raton, FL, 2009.\n\n\n[3] R. Martin, A statistical inference course based on p-values, The American Statistician. 71 (2017) 128–136.\n\n\n[4] P. McCullagh, J.A. Nelder, Generalized linear models, Chapman & Hall, London, 1989.\n\n\n[5] B. Ratner, Statistical and machine-learning data mining:: Techniques for better predictive modeling and analysis of big data, third edition, CRC Press, 2017.\n\n\n[6] D.A. Sprott, Statistical inference in science, Springer-Verlag, New York, 2000."
  }
]