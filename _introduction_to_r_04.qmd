---
format:
  html: 
    theme: darkly
    fig-width: 8
    fig-height: 4
    code-fold: true
    code-link: true
    highlight-style: dracula
    code-line-numbers: true
    code-block-border-left: true
    code-tools:
      source: true
      toggle: false
      caption: none
---
# Factors

Data often falls into a limited number of categories. For example, human hair color can be categorized as black, brown, blond, red, grey, or whiteâ€”and perhaps a few more options for people who color their hair. In R, categorical data is stored in factors. Factors are very important in data analysis, so start learning how to create, subset, and compare them now.

## What's a factor and why would you use it?

In this chapter you dive into the wonderful world of factors.

The term factor refers to a statistical data type used to store 
categorical variables. The difference between a categorical variable 
and a continuous variable is that a categorical variable can belong 
to a limited number of categories. A continuous variable, on the 
other hand, can correspond to an infinite number of values.

It is important that R knows whether it is dealing with a continuous 
or a categorical variable, as the statistical models you will develop 
in the future treat both types differently. (You will see later why 
this is the case.)

A good example of a categorical variable is sex. In many 
circumstances you can limit the sex categories to "Male" or "Female". 
(Sometimes you may need different categories. For example, you may 
need to consider chromosomal variation, hermaphroditic animals, or 
different cultural norms, but you will always have a finite number of 
categories.)

### Instructions `100 XP` {.unnumbered}
Assign to variable theory the value "factors".

```{.r filename="ex_33.R"}
# Assign to the variable theory what this chapter is about!
theory <- "factors"
```

## What's a factor and why would you use it? (2)

To create factors in R, you make use of the function `factor()`. First 
thing that you have to do is create a vector that contains all the 
observations that belong to a limited number of categories. For 
example, `sex_vector` contains the sex of 5 different individuals:

```{.r code-line-numbers="false"}
sex_vector <- c("Male","Female","Female","Male","Male")
```

It is clear that there are two categories, or in R-terms 'factor 
levels', at work here: "Male" and "Female".


The function `factor()` will encode the vector as a factor:

```{.r code-line-numbers="false"}
factor_sex_vector <- factor(sex_vector)
```
### Instructions `100 XP` {.unnumbered}

- Convert the character vector `sex_vector` to a factor with `factor()` and 
assign the result to `factor_sex_vector`
- Print out factor_sex_vector and assert that R prints out the factor levels 
below the actual values.

```{.r filename="ex_34.R"}
# Sex vector
sex_vector <- c("Male", "Female", "Female", "Male", "Male")

# Convert sex_vector to a factor
factor_sex_vector <- factor(sex_vector)

# Print out factor_sex_vector
print(factor_sex_vector)
```


## What's a factor and why would you use it? (3)

There are two types of categorical variables: a nominal categorical variable and
an ordinal categorical variable.

A nominal variable is a categorical variable without an implied order. This 
means that it is impossible to say that 'one is worth more than the other'. 
For example, think of the categorical variable animals_vector with the 
categories "Elephant", "Giraffe", "Donkey" and "Horse". Here, it is impossible 
to say that one stands above or below the other. (Note that some of you might 
disagree ;-) ).

In contrast, ordinal variables do have a natural ordering. Consider for example 
the categorical variable temperature_vector with the categories: "Low", "Medium" 
and "High". Here it is obvious that "Medium" stands above "Low", and "High" 
stands above "Medium".

###  Instructions `100 XP` {.unnumbered}

Submit the answer to check how R constructs and prints nominal and ordinal 
variables. Do not worry if you do not understand all the code just yet, we will 
get to that.

```{.r filename="ex_35.R"}
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector

# Temperature
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- 
    factor(
        temperature_vector,
        order = TRUE,
        levels = c("Low", "Medium", "High")
    )
factor_temperature_vector
``` 

## Factor levels

When you first get a dataset, you will often notice that it contains factors 
with specific factor levels. However, sometimes you will want to change the 
names of these levels for clarity or other reasons. R allows you to do this with
the function levels():

```{.r code-line-numbers="false" }
levels(factor_vector) <- c("name1", "name2",...)
```

A good illustration is the raw data that is provided to you by a survey. A 
common question for every questionnaire is the sex of the respondent. Here, for 
simplicity, just two categories were recorded, "M" and "F". (You usually need 
more categories for survey data; either way, you use a factor to store the 
categorical data.)

```{.r code-line-numbers="false" }
survey_vector <- c("M", "F", "F", "M", "M")
``` 

Recording the sex with the abbreviations `"M"` and `"F"` can be convenient if 
you are collecting data with pen and paper, but it can introduce confusion when 
analyzing the data. At that point, you will often want to change the factor 
levels to `"Male"` and `"Female"` instead of `"M"` and `"F"` for clarity.

Watch out: the order with which you assign the levels is important. If you type 
`levels(factor_survey_vector)`, you'll see that it outputs `[1] "F" "M"`. 
If you don't specify the levels of the factor when creating the vector, `R` will
automatically assign them alphabetically. To correctly map `"F"` to `"Female"`
and `"M"` to `"Male"`, the levels should be set to 
`c("Female", "Male")`, in this order.

### Instructions `100 XP` {.unnumbered}

- Check out the code that builds a factor vector from `survey_vector`. You 
should use  `factor_survey_vector` in the next instruction.

- Change the factor levels of `factor_survey_vector` to 
`c("Female", "Male")`.  Mind the order of the vector elements here.

```{.r filename="ex_36.R"}
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)

# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("F", "M")

levels(factor_survey_vector) <-  c("Female", "Male")
```

## Summarizing a factor

## Battle of the sexes

## Ordered factors

## Ordered factors (2)

## Comparing ordered factors